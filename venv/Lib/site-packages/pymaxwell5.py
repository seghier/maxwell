# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _pymaxwell5.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pymaxwell5')).lstrip('.')
        mname = mname[1:] + '._pymaxwell5'
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pymaxwell5')
    _pymaxwell5 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pymaxwell5', [dirname(__file__)])
        except ImportError:
            import _pymaxwell5
            return _pymaxwell5
        if fp is not None:
            try:
                _mod = imp.load_module('_pymaxwell5', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pymaxwell5 = swig_import_helper()
    del swig_import_helper
else:
    import _pymaxwell5
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x



def getPyMaxwellVersion():
    return _pymaxwell5.getPyMaxwellVersion()
getPyMaxwellVersion = _pymaxwell5.getPyMaxwellVersion

def getPyMaxwellVersionMajor():
    return _pymaxwell5.getPyMaxwellVersionMajor()
getPyMaxwellVersionMajor = _pymaxwell5.getPyMaxwellVersionMajor

def getPyMaxwellVersionMinor():
    return _pymaxwell5.getPyMaxwellVersionMinor()
getPyMaxwellVersionMinor = _pymaxwell5.getPyMaxwellVersionMinor

def getPyMaxwellVersionPatch():
    return _pymaxwell5.getPyMaxwellVersionPatch()
getPyMaxwellVersionPatch = _pymaxwell5.getPyMaxwellVersionPatch

def getPyMaxwellVersionBuild():
    return _pymaxwell5.getPyMaxwellVersionBuild()
getPyMaxwellVersionBuild = _pymaxwell5.getPyMaxwellVersionBuild

def getPyMaxwellVersionSuffix():
    return _pymaxwell5.getPyMaxwellVersionSuffix()
getPyMaxwellVersionSuffix = _pymaxwell5.getPyMaxwellVersionSuffix

import os;
import sys;
import subprocess;

def getFilesFromPath( path, extension ):
    """getFromPath( path, extension ) -> file names list
    Description: Obtain all file names from within a directory given its extension."""
    res = []
    filelist = os.listdir(path)
    el = len(extension)
    for file in filelist:
        if extension in file[-el:]:
            res.append(file)
    return res

def runMaxwell( parameters ):
    """Description: Runs Maxwell Render with the given parameters.
    Example code:
        parameters = []
        parameters.append('-mxs:c:/scenes/sphere.mxs')
        parameters.append('-o:c:/scenes/sphere-render.exr')
        parameters.append('-mxi:c:/scenes/sphere-render.mxi')
        parameters.append('-res:1920x1080')
        parameters.append('-time:10')
        runMaxwell(parameters);"""
    major = getPyMaxwellVersionMajor()
    if sys.platform == 'win32' or sys.platform == 'linux' or sys.platform == 'linux2':
        try:
            mwroot = os.environ['MAXWELL%s_ROOT' % major];
        except:
            print('MAXWELL%s_ROOT environment variable not found!' % major);

    if sys.platform == 'win32':
        parameters.insert(0,mwroot+'/maxwell.exe')
    elif sys.platform == 'linux' or sys.platform == 'linux2':
        parameters.insert(0,mwroot+'/maxwell')
    elif sys.platform == 'darwin':
        parameters.insert(0,'/Applications/Maxwell Render %s/maxwell.app/Contents/MacOS/maxwell' % major)

    subprocess.call(parameters);

def getChannelsList():
    """Method:    getChannelsList() -> string list
        Description: get all channel types available."""
    plist = [
        'RENDER',
        'ALPHA',
        'OBJECT',
        'MATERIAL',
        'SHADOW',
        'MOTION',
        'Z',
        'ROUGHNESS',
        'FRESNEL',
        'NORMALS',
        'POSITION',
        'DEEP',
        'UV',
        'ALPHA_CUSTOM',
        'REFLECTANCE',
        'TRIANGLE'
    ]
    return plist

def getChannelsIdList() :
    """Method:    getChannelsIdList() -> ids list
    Description: get all channel types available."""
    plist = [
        FLAG_RENDER,
        FLAG_ALPHA,
        FLAG_ID_OBJECT,
        FLAG_ID_MATERIAL,
        FLAG_SHADOW_PASS,
        FLAG_MOTION,
        FLAG_Z,
        FLAG_ROUGHNESS,
        FLAG_FRESNEL,
        FLAG_NORMALS,
        FLAG_POSITION,
        FLAG_DEEP,
        FLAG_UV,
        FLAG_ALPHA_CUSTOM,
        FLAG_REFLECTANCE,
        FLAG_ID_TRIANGLE
    ]
    return plist

RENDER_ENGINE_RS0 = _pymaxwell5.RENDER_ENGINE_RS0
RENDER_ENGINE_RS1 = _pymaxwell5.RENDER_ENGINE_RS1
RENDER_ENGINE_RSC = _pymaxwell5.RENDER_ENGINE_RSC
RENDER_ENGINE_UNKNOWN = _pymaxwell5.RENDER_ENGINE_UNKNOWN
FLAG_NONE = _pymaxwell5.FLAG_NONE
FLAG_RENDER = _pymaxwell5.FLAG_RENDER
FLAG_ALPHA = _pymaxwell5.FLAG_ALPHA
FLAG_ID_OBJECT = _pymaxwell5.FLAG_ID_OBJECT
FLAG_ID_MATERIAL = _pymaxwell5.FLAG_ID_MATERIAL
FLAG_SHADOW_PASS = _pymaxwell5.FLAG_SHADOW_PASS
FLAG_MOTION = _pymaxwell5.FLAG_MOTION
FLAG_ROUGHNESS = _pymaxwell5.FLAG_ROUGHNESS
FLAG_Z = _pymaxwell5.FLAG_Z
FLAG_AA = _pymaxwell5.FLAG_AA
FLAG_EXTRA_SAMPLING = _pymaxwell5.FLAG_EXTRA_SAMPLING
FLAG_FRESNEL = _pymaxwell5.FLAG_FRESNEL
FLAG_NORMALS = _pymaxwell5.FLAG_NORMALS
FLAG_POSITION = _pymaxwell5.FLAG_POSITION
FLAG_FALSE_COLOR = _pymaxwell5.FLAG_FALSE_COLOR
FLAG_DEEP = _pymaxwell5.FLAG_DEEP
FLAG_UV = _pymaxwell5.FLAG_UV
FLAG_ALPHA_CUSTOM = _pymaxwell5.FLAG_ALPHA_CUSTOM
FLAG_SAMPLES_3X3 = _pymaxwell5.FLAG_SAMPLES_3X3
FLAG_REFLECTANCE = _pymaxwell5.FLAG_REFLECTANCE
FLAG_DENOISER = _pymaxwell5.FLAG_DENOISER
FLAG_ID_TRIANGLE = _pymaxwell5.FLAG_ID_TRIANGLE
FLAG_ID_INSTANCE = _pymaxwell5.FLAG_ID_INSTANCE
FLAG_END = _pymaxwell5.FLAG_END
FLAG_ALL = _pymaxwell5.FLAG_ALL
FLAG_VISIBLE = _pymaxwell5.FLAG_VISIBLE
FLAG_EXTRAS = _pymaxwell5.FLAG_EXTRAS
DENOISER_MODE_PREVIEW = _pymaxwell5.DENOISER_MODE_PREVIEW
DENOISER_MODE_PRODUCTION = _pymaxwell5.DENOISER_MODE_PRODUCTION
RENDER_LAYER_ALL = _pymaxwell5.RENDER_LAYER_ALL
RENDER_LAYER_DIFFUSE = _pymaxwell5.RENDER_LAYER_DIFFUSE
RENDER_LAYER_REFLECTIONS = _pymaxwell5.RENDER_LAYER_REFLECTIONS
RENDER_LAYER_REFRACTIONS = _pymaxwell5.RENDER_LAYER_REFRACTIONS
RENDER_LAYER_DIFFUSE_AND_REFLECTIONS = _pymaxwell5.RENDER_LAYER_DIFFUSE_AND_REFLECTIONS
RENDER_LAYER_REFLECTIONS_AND_REFRACTIONS = _pymaxwell5.RENDER_LAYER_REFLECTIONS_AND_REFRACTIONS
OUTPUT_NONE = _pymaxwell5.OUTPUT_NONE
OUTPUT_PNG_8 = _pymaxwell5.OUTPUT_PNG_8
OUTPUT_PNG_16 = _pymaxwell5.OUTPUT_PNG_16
OUTPUT_TGA = _pymaxwell5.OUTPUT_TGA
OUTPUT_TIF_8 = _pymaxwell5.OUTPUT_TIF_8
OUTPUT_TIF_16 = _pymaxwell5.OUTPUT_TIF_16
OUTPUT_TIF_32 = _pymaxwell5.OUTPUT_TIF_32
OUTPUT_EXR_16 = _pymaxwell5.OUTPUT_EXR_16
OUTPUT_EXR_32 = _pymaxwell5.OUTPUT_EXR_32
OUTPUT_EXR_DEEP = _pymaxwell5.OUTPUT_EXR_DEEP
OUTPUT_JPG = _pymaxwell5.OUTPUT_JPG
OUTPUT_JP2 = _pymaxwell5.OUTPUT_JP2
OUTPUT_HDR = _pymaxwell5.OUTPUT_HDR
OUTPUT_DTEX = _pymaxwell5.OUTPUT_DTEX
OUTPUT_PSD_8 = _pymaxwell5.OUTPUT_PSD_8
OUTPUT_PSD_16 = _pymaxwell5.OUTPUT_PSD_16
OUTPUT_PSD_32 = _pymaxwell5.OUTPUT_PSD_32
OUTPUT_END = _pymaxwell5.OUTPUT_END
OUTPUT_USUAL = _pymaxwell5.OUTPUT_USUAL
EXTRA_SAMPLING_CUSTOM_ALPHA = _pymaxwell5.EXTRA_SAMPLING_CUSTOM_ALPHA
EXTRA_SAMPLING_ALPHA = _pymaxwell5.EXTRA_SAMPLING_ALPHA
EXTRA_SAMPLING_USER_BITMAP = _pymaxwell5.EXTRA_SAMPLING_USER_BITMAP
MAP_TYPE_VALUE = _pymaxwell5.MAP_TYPE_VALUE
MAP_TYPE_RGB = _pymaxwell5.MAP_TYPE_RGB
MAP_TYPE_BITMAP = _pymaxwell5.MAP_TYPE_BITMAP
MAP_TYPE_SPECTRUM_FILE = _pymaxwell5.MAP_TYPE_SPECTRUM_FILE
BLENDING_NORMAL = _pymaxwell5.BLENDING_NORMAL
BLENDING_ADDITIVE = _pymaxwell5.BLENDING_ADDITIVE
DISTANCE_NANOMETERS = _pymaxwell5.DISTANCE_NANOMETERS
DISTANCE_MICRONS = _pymaxwell5.DISTANCE_MICRONS
DISTANCE_MILLIMETERS = _pymaxwell5.DISTANCE_MILLIMETERS
DISTANCE_METERS = _pymaxwell5.DISTANCE_METERS
DISTANCE_CENTIMETERS = _pymaxwell5.DISTANCE_CENTIMETERS
DISTANCE_DECIMETERS = _pymaxwell5.DISTANCE_DECIMETERS
EMISSION_TYPE_PAIR = _pymaxwell5.EMISSION_TYPE_PAIR
EMISSION_TYPE_TEMPERATURE = _pymaxwell5.EMISSION_TYPE_TEMPERATURE
EMISSION_TYPE_MXI = _pymaxwell5.EMISSION_TYPE_MXI
EMISSION_TYPE_SPECTRUM_FILE = _pymaxwell5.EMISSION_TYPE_SPECTRUM_FILE
EMISSION_RGB = _pymaxwell5.EMISSION_RGB
EMISSION_XYZ = _pymaxwell5.EMISSION_XYZ
EMISSION_COLOR_TEMPERATURE = _pymaxwell5.EMISSION_COLOR_TEMPERATURE
EMISSION_UNITS_WATTS_AND_LUMINOUS_EFFICACY = _pymaxwell5.EMISSION_UNITS_WATTS_AND_LUMINOUS_EFFICACY
EMISSION_UNITS_LUMINOUS_POWER = _pymaxwell5.EMISSION_UNITS_LUMINOUS_POWER
EMISSION_UNITS_ILLUMINANCE = _pymaxwell5.EMISSION_UNITS_ILLUMINANCE
EMISSION_UNITS_LUMINOUS_INTENSITY = _pymaxwell5.EMISSION_UNITS_LUMINOUS_INTENSITY
EMISSION_UNITS_LUMINANCE = _pymaxwell5.EMISSION_UNITS_LUMINANCE
EMISSION_LOBE_DEFAULT = _pymaxwell5.EMISSION_LOBE_DEFAULT
EMISSION_LOBE_IES = _pymaxwell5.EMISSION_LOBE_IES
EMISSION_LOBE_SPOTLIGHT = _pymaxwell5.EMISSION_LOBE_SPOTLIGHT
SPOTLIGHT_FALLOFF_LINEAR = _pymaxwell5.SPOTLIGHT_FALLOFF_LINEAR
SPOTLIGHT_FALLOFF_SQUARE_ROOT = _pymaxwell5.SPOTLIGHT_FALLOFF_SQUARE_ROOT
SPOTLIGHT_FALLOFF_SINUSOIDAL = _pymaxwell5.SPOTLIGHT_FALLOFF_SINUSOIDAL
SPOTLIGHT_FALLOFF_SQUARED_SINUSOIDAL = _pymaxwell5.SPOTLIGHT_FALLOFF_SQUARED_SINUSOIDAL
SPOTLIGHT_FALLOFF_CUADRATIC = _pymaxwell5.SPOTLIGHT_FALLOFF_CUADRATIC
SPOTLIGHT_FALLOFF_CUBIC = _pymaxwell5.SPOTLIGHT_FALLOFF_CUBIC
DISPLACEMENT_TYPE_ON_THE_FLY = _pymaxwell5.DISPLACEMENT_TYPE_ON_THE_FLY
DISPLACEMENT_TYPE_PRETESSELLATED = _pymaxwell5.DISPLACEMENT_TYPE_PRETESSELLATED
DISPLACEMENT_TYPE_VECTOR_3D = _pymaxwell5.DISPLACEMENT_TYPE_VECTOR_3D
DISPLACEMENT_SUBDIVISION_FLAT = _pymaxwell5.DISPLACEMENT_SUBDIVISION_FLAT
DISPLACEMENT_SUBDIVISION_LOOP_OR_CATMULL = _pymaxwell5.DISPLACEMENT_SUBDIVISION_LOOP_OR_CATMULL
VD_TANGENT = _pymaxwell5.VD_TANGENT
VD_OBJECT = _pymaxwell5.VD_OBJECT
VD_WORLD = _pymaxwell5.VD_WORLD
VD_REALFLOW = _pymaxwell5.VD_REALFLOW
DISPLACEMENT_UV_NONE = _pymaxwell5.DISPLACEMENT_UV_NONE
DISPLACEMENT_UV_EDGES = _pymaxwell5.DISPLACEMENT_UV_EDGES
DISPLACEMENT_UV_EDGES_AND_CORNERS = _pymaxwell5.DISPLACEMENT_UV_EDGES_AND_CORNERS
DISPLACEMENT_UV_SHARP = _pymaxwell5.DISPLACEMENT_UV_SHARP
VD_XYZ = _pymaxwell5.VD_XYZ
VD_XZY = _pymaxwell5.VD_XZY
VD_YZX = _pymaxwell5.VD_YZX
VD_YXZ = _pymaxwell5.VD_YXZ
VD_ZXY = _pymaxwell5.VD_ZXY
VD_ZYX = _pymaxwell5.VD_ZYX
VD_PRESET_CUSTOM = _pymaxwell5.VD_PRESET_CUSTOM
VD_PRESET_ZBRUSH_TANGENT_TYPE_3 = _pymaxwell5.VD_PRESET_ZBRUSH_TANGENT_TYPE_3
VD_PRESET_ZBRUSH_WORLD = _pymaxwell5.VD_PRESET_ZBRUSH_WORLD
VD_PRESET_MUDBOX_ABSOLUTE_TANGENT = _pymaxwell5.VD_PRESET_MUDBOX_ABSOLUTE_TANGENT
VD_PRESET_MUDBOX_OBJECT = _pymaxwell5.VD_PRESET_MUDBOX_OBJECT
VD_PRESET_MUDBOX_WORLD = _pymaxwell5.VD_PRESET_MUDBOX_WORLD
VD_PRESET_REALFLOW = _pymaxwell5.VD_PRESET_REALFLOW
VD_PRESET_MODO = _pymaxwell5.VD_PRESET_MODO
FLAG_DO_NOT_OVERRIDE = _pymaxwell5.FLAG_DO_NOT_OVERRIDE
FLAG_OVERRIDE_HIDE = _pymaxwell5.FLAG_OVERRIDE_HIDE
FLAG_OVERRIDE_HIDE_TO_CAMERA = _pymaxwell5.FLAG_OVERRIDE_HIDE_TO_CAMERA
FLAG_OVERRIDE_HIDE_TO_REFL_REFR = _pymaxwell5.FLAG_OVERRIDE_HIDE_TO_REFL_REFR
FLAG_OVERRIDE_HIDE_TO_GI = _pymaxwell5.FLAG_OVERRIDE_HIDE_TO_GI
FLAG_OVERRIDE_USE_REFERENCED_ID = _pymaxwell5.FLAG_OVERRIDE_USE_REFERENCED_ID
FLAG_OVERRIDE_USE_RANDOMIZE_ID = _pymaxwell5.FLAG_OVERRIDE_USE_RANDOMIZE_ID
FLAG_OVERRIDE_ALL = _pymaxwell5.FLAG_OVERRIDE_ALL
BOOLEAN_NONE = _pymaxwell5.BOOLEAN_NONE
BOOLEAN_BOX = _pymaxwell5.BOOLEAN_BOX
BOOLEAN_SPHERE = _pymaxwell5.BOOLEAN_SPHERE
BOOLEAN_PLANE_XY = _pymaxwell5.BOOLEAN_PLANE_XY
BOOLEAN_PLANE_YZ = _pymaxwell5.BOOLEAN_PLANE_YZ
BOOLEAN_PLANE_ZX = _pymaxwell5.BOOLEAN_PLANE_ZX
EXPOSURE_CUSTOM = _pymaxwell5.EXPOSURE_CUSTOM
EXPOSURE_DARK_INTERIOR = _pymaxwell5.EXPOSURE_DARK_INTERIOR
EXPOSURE_BRIGHT_INTERIOR = _pymaxwell5.EXPOSURE_BRIGHT_INTERIOR
EXPOSURE_OVERCAST_EXTERIOR = _pymaxwell5.EXPOSURE_OVERCAST_EXTERIOR
EXPOSURE_BRIGHT_EXTERIOR = _pymaxwell5.EXPOSURE_BRIGHT_EXTERIOR
EXPOSURE_NIGHT_EXTERIOR = _pymaxwell5.EXPOSURE_NIGHT_EXTERIOR
TYPE_THIN_LENS = _pymaxwell5.TYPE_THIN_LENS
TYPE_PINHOLE_LENS = _pymaxwell5.TYPE_PINHOLE_LENS
TYPE_ORTHO_LENS = _pymaxwell5.TYPE_ORTHO_LENS
TYPE_FISHEYE_LENS = _pymaxwell5.TYPE_FISHEYE_LENS
TYPE_SPHERICAL_LENS = _pymaxwell5.TYPE_SPHERICAL_LENS
TYPE_CYLINDRICAL_LENS = _pymaxwell5.TYPE_CYLINDRICAL_LENS
TYPE_EXTENSION_LENS = _pymaxwell5.TYPE_EXTENSION_LENS
TYPE_PERSPECTIVE = _pymaxwell5.TYPE_PERSPECTIVE
TYPE_FRONT = _pymaxwell5.TYPE_FRONT
TYPE_TOP = _pymaxwell5.TYPE_TOP
TYPE_LEFT = _pymaxwell5.TYPE_LEFT
TYPE_BACK = _pymaxwell5.TYPE_BACK
TYPE_BOTTOM = _pymaxwell5.TYPE_BOTTOM
TYPE_RIGHT = _pymaxwell5.TYPE_RIGHT
SUN_DISABLED = _pymaxwell5.SUN_DISABLED
SUN_PHYSICAL = _pymaxwell5.SUN_PHYSICAL
SUN_CONSTANT = _pymaxwell5.SUN_CONSTANT
IBL_LAYER_BACKGROUND = _pymaxwell5.IBL_LAYER_BACKGROUND
IBL_LAYER_REFLECTION = _pymaxwell5.IBL_LAYER_REFLECTION
IBL_LAYER_REFRACTION = _pymaxwell5.IBL_LAYER_REFRACTION
IBL_LAYER_ILLUMINATION = _pymaxwell5.IBL_LAYER_ILLUMINATION
MONOCHROMATIC = _pymaxwell5.MONOCHROMATIC
MONOCHROMATIC_ALPHA = _pymaxwell5.MONOCHROMATIC_ALPHA
RGB8 = _pymaxwell5.RGB8
RGBA8 = _pymaxwell5.RGBA8
MONOCHROMATIC16 = _pymaxwell5.MONOCHROMATIC16
MONOCHROMATIC16_ALPHA = _pymaxwell5.MONOCHROMATIC16_ALPHA
RGB16 = _pymaxwell5.RGB16
RGBA16 = _pymaxwell5.RGBA16
MONOCHROMATIC32 = _pymaxwell5.MONOCHROMATIC32
MONOCHROMATIC32_ALPHA = _pymaxwell5.MONOCHROMATIC32_ALPHA
RGB32 = _pymaxwell5.RGB32
RGBA32 = _pymaxwell5.RGBA32
SPECTRAL = _pymaxwell5.SPECTRAL
XYZ = _pymaxwell5.XYZ
UNKNOWN = _pymaxwell5.UNKNOWN
UPDATE_PREVIEW_ALL = _pymaxwell5.UPDATE_PREVIEW_ALL
UPDATE_PREVIEW_NONE = _pymaxwell5.UPDATE_PREVIEW_NONE
OUTPUTDATA_TYPE_NONE = _pymaxwell5.OUTPUTDATA_TYPE_NONE
OUTPUTDATA_TYPE_BYTE = _pymaxwell5.OUTPUTDATA_TYPE_BYTE
OUTPUTDATA_TYPE_HALF = _pymaxwell5.OUTPUTDATA_TYPE_HALF
OUTPUTDATA_TYPE_FLOAT = _pymaxwell5.OUTPUTDATA_TYPE_FLOAT
OUTPUTDATA_TYPE_HALFFLOAT = _pymaxwell5.OUTPUTDATA_TYPE_HALFFLOAT
BITDEPTH_NONE = _pymaxwell5.BITDEPTH_NONE
BITDEPTH_8 = _pymaxwell5.BITDEPTH_8
BITDEPTH_16 = _pymaxwell5.BITDEPTH_16
BITDEPTH_32 = _pymaxwell5.BITDEPTH_32
COLOR_SPACE_SRGB = _pymaxwell5.COLOR_SPACE_SRGB
COLOR_SPACE_ADOBE98 = _pymaxwell5.COLOR_SPACE_ADOBE98
COLOR_SPACE_APPLE = _pymaxwell5.COLOR_SPACE_APPLE
COLOR_SPACE_PAL = _pymaxwell5.COLOR_SPACE_PAL
COLOR_SPACE_NTSC = _pymaxwell5.COLOR_SPACE_NTSC
COLOR_SPACE_NTSC1979 = _pymaxwell5.COLOR_SPACE_NTSC1979
COLOR_SPACE_WIDEGAMUT = _pymaxwell5.COLOR_SPACE_WIDEGAMUT
COLOR_SPACE_PROPHOTO = _pymaxwell5.COLOR_SPACE_PROPHOTO
COLOR_SPACE_ECIRRGB = _pymaxwell5.COLOR_SPACE_ECIRRGB
COLOR_SPACE_CIE1931 = _pymaxwell5.COLOR_SPACE_CIE1931
COLOR_SPACE_BRUCERGB = _pymaxwell5.COLOR_SPACE_BRUCERGB
COLOR_SPACE_COLORMATCH = _pymaxwell5.COLOR_SPACE_COLORMATCH
COLOR_SPACE_BESTRGB = _pymaxwell5.COLOR_SPACE_BESTRGB
COLOR_SPACE_DONRGB4 = _pymaxwell5.COLOR_SPACE_DONRGB4
COLOR_SPACE_REC709 = _pymaxwell5.COLOR_SPACE_REC709
COLOR_SPACE_ACES = _pymaxwell5.COLOR_SPACE_ACES
COLOR_SPACE_UNKNOWN = _pymaxwell5.COLOR_SPACE_UNKNOWN
class CsceneInfo(object):
    """
    Class CsceneInfo

      Small structure that stores information of the scene.

      Example code:

        scene = Cmaxwell(mwcallback_cb);
        info = scene.getSceneInfo();
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    nObjects = _swig_property(_pymaxwell5.CsceneInfo_nObjects_get, _pymaxwell5.CsceneInfo_nObjects_set)
    nMeshes = _swig_property(_pymaxwell5.CsceneInfo_nMeshes_get, _pymaxwell5.CsceneInfo_nMeshes_set)
    nTriangles = _swig_property(_pymaxwell5.CsceneInfo_nTriangles_get, _pymaxwell5.CsceneInfo_nTriangles_set)
    nVertexes = _swig_property(_pymaxwell5.CsceneInfo_nVertexes_get, _pymaxwell5.CsceneInfo_nVertexes_set)
    nNormals = _swig_property(_pymaxwell5.CsceneInfo_nNormals_get, _pymaxwell5.CsceneInfo_nNormals_set)
    nMaterials = _swig_property(_pymaxwell5.CsceneInfo_nMaterials_get, _pymaxwell5.CsceneInfo_nMaterials_set)
    nBitmaps = _swig_property(_pymaxwell5.CsceneInfo_nBitmaps_get, _pymaxwell5.CsceneInfo_nBitmaps_set)

    def __str__(self):
        """__str__(CsceneInfo self) -> char *"""
        return _pymaxwell5.CsceneInfo___str__(self)

    __swig_destroy__ = _pymaxwell5.delete_CsceneInfo
CsceneInfo.__str__ = new_instancemethod(_pymaxwell5.CsceneInfo___str__, None, CsceneInfo)
CsceneInfo_swigregister = _pymaxwell5.CsceneInfo_swigregister
CsceneInfo_swigregister(CsceneInfo)

class Cattribute(object):
    """
    Class Cattribute

      Cattribute represents a parameter that can be a number, rgb or texture map. It stores these
      three components and also a byte marking the default type. Cattribute.activeType can be:
      MAP_TYPE_VALUE, MAP_TYPE_RGB, MAP_TYPE_BITMAP or MAP_TYPE_SPECTRUM_FILE.
      Most of the parameters can be set with 2 of this 3 types. In example, a reflectance map can
      be set using an RGB or using a bitmap. Roughness, Anisotropy... can be set using a number or
      a bitmap.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    activeType = _swig_property(_pymaxwell5.Cattribute_activeType_get, _pymaxwell5.Cattribute_activeType_set)
    value = _swig_property(_pymaxwell5.Cattribute_value_get, _pymaxwell5.Cattribute_value_set)
    rgb = _swig_property(_pymaxwell5.Cattribute_rgb_get, _pymaxwell5.Cattribute_rgb_set)
    textureMap = _swig_property(_pymaxwell5.Cattribute_textureMap_get, _pymaxwell5.Cattribute_textureMap_set)

    def __init__(self, *args):
        """
        Class Cattribute

          Cattribute represents a parameter that can be a number, rgb or texture map. It stores these
          three components and also a byte marking the default type. Cattribute.activeType can be:
          MAP_TYPE_VALUE, MAP_TYPE_RGB, MAP_TYPE_BITMAP or MAP_TYPE_SPECTRUM_FILE.
          Most of the parameters can be set with 2 of this 3 types. In example, a reflectance map can
          be set using an RGB or using a bitmap. Roughness, Anisotropy... can be set using a number or
          a bitmap.
        Class Cattribute

          Cattribute represents a parameter that can be a number, rgb or texture map. It stores these
          three components and also a byte marking the default type. Cattribute.activeType can be:
          MAP_TYPE_VALUE, MAP_TYPE_RGB, MAP_TYPE_BITMAP or MAP_TYPE_SPECTRUM_FILE.
          Most of the parameters can be set with 2 of this 3 types. In example, a reflectance map can
          be set using an RGB or using a bitmap. Roughness, Anisotropy... can be set using a number or
          a bitmap.
        """
        _pymaxwell5.Cattribute_swiginit(self, _pymaxwell5.new_Cattribute(*args))
    __swig_destroy__ = _pymaxwell5.delete_Cattribute

    def getSpectrumFile(self):
        """
        Class Cattribute

          Cattribute represents a parameter that can be a number, rgb or texture map. It stores these
          three components and also a byte marking the default type. Cattribute.activeType can be:
          MAP_TYPE_VALUE, MAP_TYPE_RGB, MAP_TYPE_BITMAP or MAP_TYPE_SPECTRUM_FILE.
          Most of the parameters can be set with 2 of this 3 types. In example, a reflectance map can
          be set using an RGB or using a bitmap. Roughness, Anisotropy... can be set using a number or
          a bitmap.
        """
        return _pymaxwell5.Cattribute_getSpectrumFile(self)


    def setSpectrumFile(self, str):
        """
        Class Cattribute

          Cattribute represents a parameter that can be a number, rgb or texture map. It stores these
          three components and also a byte marking the default type. Cattribute.activeType can be:
          MAP_TYPE_VALUE, MAP_TYPE_RGB, MAP_TYPE_BITMAP or MAP_TYPE_SPECTRUM_FILE.
          Most of the parameters can be set with 2 of this 3 types. In example, a reflectance map can
          be set using an RGB or using a bitmap. Roughness, Anisotropy... can be set using a number or
          a bitmap.
        """
        return _pymaxwell5.Cattribute_setSpectrumFile(self, str)


    def __str__(self):
        """
        Class Cattribute

          Cattribute represents a parameter that can be a number, rgb or texture map. It stores these
          three components and also a byte marking the default type. Cattribute.activeType can be:
          MAP_TYPE_VALUE, MAP_TYPE_RGB, MAP_TYPE_BITMAP or MAP_TYPE_SPECTRUM_FILE.
          Most of the parameters can be set with 2 of this 3 types. In example, a reflectance map can
          be set using an RGB or using a bitmap. Roughness, Anisotropy... can be set using a number or
          a bitmap.
        """
        return _pymaxwell5.Cattribute___str__(self)

Cattribute.getSpectrumFile = new_instancemethod(_pymaxwell5.Cattribute_getSpectrumFile, None, Cattribute)
Cattribute.setSpectrumFile = new_instancemethod(_pymaxwell5.Cattribute_setSpectrumFile, None, Cattribute)
Cattribute.__str__ = new_instancemethod(_pymaxwell5.Cattribute___str__, None, Cattribute)
Cattribute_swigregister = _pymaxwell5.Cattribute_swigregister
Cattribute_swigregister(Cattribute)

class CemitterPair(object):
    """
    Class CemitterPair

      Class used to set the emitter pair when the
      emission type is set to Color + Luminance

      Emitters can be defined:
        1. Using color + luminance
        2. Using Temperature of emission
        3. Using an MXI texture
      When emitters are set using color + luminance the color can be set:
        1.1.a Using RGB color
        1.1.b Using Correlated Temperature color
      When emitters are set using color + luminance the luminance can be set:
        1.2.a Using Watts and efficacy
        1.2.b LuminousPower (Lumen)
        1.2.c illuminance (Lumen/m2)
        1.2.d luminousIntensity (Cd)
        1.2.b luminance (Cd/m2)
        CemitterPair is used to read/write each parameter

      Example code:
        emitterPair = CemitterPair()
        emitterPair.rgb.assign( rgb_color );
        emitterPair.xyz.assign( xyz_color );
        emitterPair.temperature = 6500.0;
        emitterPair.watts = 40.0;
        emitterPair.luminousEfficacy = 17.6;
        emitterPair.luminousPower = 100.0;
        emitterPair.illuminance = 100.0;
        emitterPair.luminousIntensity = 100.0;
        emitterPair.luminance = 100.0;
        newEmitter.setPair( emitterPair );

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    rgb = _swig_property(_pymaxwell5.CemitterPair_rgb_get, _pymaxwell5.CemitterPair_rgb_set)
    xyz = _swig_property(_pymaxwell5.CemitterPair_xyz_get, _pymaxwell5.CemitterPair_xyz_set)
    temperature = _swig_property(_pymaxwell5.CemitterPair_temperature_get, _pymaxwell5.CemitterPair_temperature_set)
    watts = _swig_property(_pymaxwell5.CemitterPair_watts_get, _pymaxwell5.CemitterPair_watts_set)
    luminousEfficacy = _swig_property(_pymaxwell5.CemitterPair_luminousEfficacy_get, _pymaxwell5.CemitterPair_luminousEfficacy_set)
    luminousPower = _swig_property(_pymaxwell5.CemitterPair_luminousPower_get, _pymaxwell5.CemitterPair_luminousPower_set)
    illuminance = _swig_property(_pymaxwell5.CemitterPair_illuminance_get, _pymaxwell5.CemitterPair_illuminance_set)
    luminousIntensity = _swig_property(_pymaxwell5.CemitterPair_luminousIntensity_get, _pymaxwell5.CemitterPair_luminousIntensity_set)
    luminance = _swig_property(_pymaxwell5.CemitterPair_luminance_get, _pymaxwell5.CemitterPair_luminance_set)

    def __init__(self):
        """__init__(CemitterPair self) -> CemitterPair"""
        _pymaxwell5.CemitterPair_swiginit(self, _pymaxwell5.new_CemitterPair())
    __swig_destroy__ = _pymaxwell5.delete_CemitterPair

    def __str__(self):
        """__str__(CemitterPair self) -> char *"""
        return _pymaxwell5.CemitterPair___str__(self)

CemitterPair.__str__ = new_instancemethod(_pymaxwell5.CemitterPair___str__, None, CemitterPair)
CemitterPair_swigregister = _pymaxwell5.CemitterPair_swigregister
CemitterPair_swigregister(CemitterPair)

class CmaxwellMaterialIterator(object):
    """
    Class CmaxwellMaterialIterator

      Class used to parse a list of materials.

      Example code:

        scene = Cmaxwell(mwcallback_cb);
        scene.readMXS('scene.mxs';
        it = CmaxwellMaterialIterator();
        material = it.first( scene );
        while material.isNull() == False:
          #do something with the material...
          material = it.next();

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CmaxwellMaterialIterator self) -> CmaxwellMaterialIterator"""
        _pymaxwell5.CmaxwellMaterialIterator_swiginit(self, _pymaxwell5.new_CmaxwellMaterialIterator())
    __swig_destroy__ = _pymaxwell5.delete_CmaxwellMaterialIterator

    def first(self, pMaxwell):
        """first(CmaxwellMaterialIterator self, Cmaxwell pMaxwell) -> CmaxwellMaterial"""
        return _pymaxwell5.CmaxwellMaterialIterator_first(self, pMaxwell)


    def next(self):
        """next(CmaxwellMaterialIterator self) -> CmaxwellMaterial"""
        return _pymaxwell5.CmaxwellMaterialIterator_next(self)

CmaxwellMaterialIterator.first = new_instancemethod(_pymaxwell5.CmaxwellMaterialIterator_first, None, CmaxwellMaterialIterator)
CmaxwellMaterialIterator.next = new_instancemethod(_pymaxwell5.CmaxwellMaterialIterator_next, None, CmaxwellMaterialIterator)
CmaxwellMaterialIterator_swigregister = _pymaxwell5.CmaxwellMaterialIterator_swigregister
CmaxwellMaterialIterator_swigregister(CmaxwellMaterialIterator)

class CmaxwellMaterial(object):
    """
    Class CmaxwellMaterial

      Class that contains the Maxwell material description.

      Example code:

        scene = Cmaxwell(mwcallback_cb);
        material = scene.createMaterial('materialname');
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def createCopy(self):
        """
        Method:      createCopy() -> CmaxwellMaterial
        Description: Creates a full copy of the material and returns it.
        """
        return _pymaxwell5.CmaxwellMaterial_createCopy(self)


    def free(self):
        """
        Method:      free() -> 1 = Success, 0 = Fail
        Description: Removes the material from the scene and destroys it.
        """
        return _pymaxwell5.CmaxwellMaterial_free(self)


    def extract(self):
        """
        Method:      extract() -> 1 = Success, 0 = Fail
        Description: Removes the material from the scene.
        """
        return _pymaxwell5.CmaxwellMaterial_extract(self)


    def getVersion(pFileName):
        """
        Method:      getVersion( filename ) -> (float,ok)
        Description: Returns the version number of the material.
        """
        return _pymaxwell5.CmaxwellMaterial_getVersion(pFileName)

    getVersion = staticmethod(getVersion)

    def setName(self, pName):
        """
        Method:      setName( name ) -> 1 = Success, 0 = Fail
        Description: Sets name of the material.
        """
        return _pymaxwell5.CmaxwellMaterial_setName(self, pName)


    def getName(self):
        """
        Method:      getName() -> string
        Description: Get name of the material.
        """
        return _pymaxwell5.CmaxwellMaterial_getName(self)


    def setReference(self, enabled, mxmPath):
        """
        Method:      setReference( enabled, mxmPath ) -> 1 = Success, 0 = Fail
        Description: Sets the path to the MXM file referenced by this material. By default materials
                     are not referenced but embeded in the scene.
        Parameter:   enabled = 1 (referenced) or 0 (embeded in the scene, default).
        Parameter:   mxmPath = Path to the MXM material file, only if the material is a reference.
        """
        return _pymaxwell5.CmaxwellMaterial_setReference(self, enabled, mxmPath)


    def getReference(self):
        """
        Method:      getReference() -> (mxmPath,enabled)
        Description: Gets the path to the MXM file referenced by this material. By default materials
                     are not referenced but embeded in the scene.
        Parameter:   enabled = 1 (referenced) or 0 (embeded in the scene, default).
        Parameter:   mxmPath = Path to the MXM material file, only if the material is a reference.
        """
        return _pymaxwell5.CmaxwellMaterial_getReference(self)


    def setDescription(self, pDescription):
        """
        Method:      setDescription( string ) -> 1 = Success, 0 = Fail
        Description: User description of the material.
        """
        return _pymaxwell5.CmaxwellMaterial_setDescription(self, pDescription)


    def getDescription(self):
        """
        Method:      getDescription() -> string
        Description: User description of the material.
        """
        return _pymaxwell5.CmaxwellMaterial_getDescription(self)


    def setUuid(self, pUuid):
        """
        Method:      setUuid( string ) -> 1 = Success, 0 = Fail
        Description: Uuid that can be used for custom purposes.
        """
        return _pymaxwell5.CmaxwellMaterial_setUuid(self, pUuid)


    def getUuid(self):
        """
        Method:      getUuid() -> string
        Description: Unique ID that can be used for custom purposes.
        """
        return _pymaxwell5.CmaxwellMaterial_getUuid(self)


    def setDirty(self):
        """
        Method:      setDirty() -> byte
        Description: Method used internally in interactive mode (not used from outside).
        """
        return _pymaxwell5.CmaxwellMaterial_setDirty(self)


    def isDirty(self):
        """Method:      isDirty() -> (bool,ok)"""
        return _pymaxwell5.CmaxwellMaterial_isDirty(self)


    def forceToWriteIntoScene(self):
        """
        Method:      forceToWriteIntoScene() -> 1 = Success, 0 = Fail
        Description: Method to embed a material in the scene.
        NOTE:        this Material will be write into the MXS.
        """
        return _pymaxwell5.CmaxwellMaterial_forceToWriteIntoScene(self)


    def belongToScene(self):
        """
        Method:      belongToScene( ) -> (bool,ok)
        Description: Material belongs to the scene.
        """
        return _pymaxwell5.CmaxwellMaterial_belongToScene(self)


    def isEmpty(self):
        """
        Method:      isEmpty() -> (bool,ok)
        Description: Checks whether the material have layers.
        """
        return _pymaxwell5.CmaxwellMaterial_isEmpty(self)


    def isEmptyOrEverythingIsDisabled(self):
        """
        Method:      isEmptyOrEverythingIsDisabled() -> (bool,ok)
        Description: Checks if the material have layers or those are disables.
        """
        return _pymaxwell5.CmaxwellMaterial_isEmptyOrEverythingIsDisabled(self)


    def setEmpty(self, resetTopProperties):
        """
        Method:      setEmpty( resetTopProperties ) -> 1 = Success, 0 = Fail
        Description: Empties the material removing all the layers.
                     Material not null but without layers.
        Parameter:   resetTopProperties = If true it also resets the global properties of the material.

        """
        return _pymaxwell5.CmaxwellMaterial_setEmpty(self, resetTopProperties)


    def read(self, pFileName):
        """
        Method:      read( filename ) -> 1 = Success, 0 = Fail
        Description: Reads a material from disk.
        Parameter:   filename = full path to the MXM file.
        """
        return _pymaxwell5.CmaxwellMaterial_read(self, pFileName)


    def write(self, pFileName):
        """
        Method:      write( filename ) -> 1 = Success, 0 = Fail
        Description: Writes the material to disk.
        Parameter:   filename = full path to the MXM file.
        """
        return _pymaxwell5.CmaxwellMaterial_write(self, pFileName)


    def setDispersion(self, enabled):
        """
        Method:      setDispersion( bool ) -> 1 = Sucess, 0 = Fail
        Description: Dispersion OFF by default.
        """
        return _pymaxwell5.CmaxwellMaterial_setDispersion(self, enabled)


    def getDispersion(self):
        """
        Method:      getDispersion( ) -> (bool,ok)
        Description: Dispersion OFF by default.
        """
        return _pymaxwell5.CmaxwellMaterial_getDispersion(self)


    def setMatte(self, enabled):
        """
        Method:      setMatte( bool ) -> 1 = Success, 0 = Fail
        Description: Matte OFF by default.
        """
        return _pymaxwell5.CmaxwellMaterial_setMatte(self, enabled)


    def getMatte(self):
        """
        Method:      getMatte() -> (bool,ok)
        Description: Matte OFF by default.
        """
        return _pymaxwell5.CmaxwellMaterial_getMatte(self)


    def setHideToCameraInMaterialId(self, enabled):
        """
        Method:      setHideToCameraInMaterialId( bool ) -> 1 = Success, 0 = Fail
        Description: Material Id hidden from camera.
        """
        return _pymaxwell5.CmaxwellMaterial_setHideToCameraInMaterialId(self, enabled)


    def getHideToCameraInMaterialId(self):
        """
        Method:      getHideToCameraInMaterialId() -> (bool,ok)
        Description: Matterial Id hidden from camera.
        """
        return _pymaxwell5.CmaxwellMaterial_getHideToCameraInMaterialId(self)


    def setMatteShadow(self, enabled):
        """
        Method:      setMatteShadow( bool ) -> 1 = Success, 0 = Fail
        Description: Matte Shadow OFF by default.
        """
        return _pymaxwell5.CmaxwellMaterial_setMatteShadow(self, enabled)


    def getMatteShadow(self):
        """
        Method:      getMatteShadow() -> (bool,ok)
        Description: Matte Shadow OFF by default.
        """
        return _pymaxwell5.CmaxwellMaterial_getMatteShadow(self)


    def setNestedPriority(self, priority):
        """
        Method:      setNestedPriority( priority ) -> 1 = Success, 0 = Fail
        Description: Priority 0 by default.
        """
        return _pymaxwell5.CmaxwellMaterial_setNestedPriority(self, priority)


    def getNestedPriority(self):
        """
        Method:      getNestedPriority() -> (priority,ok)
        Description: Priority 0 by default.
        """
        return _pymaxwell5.CmaxwellMaterial_getNestedPriority(self)


    def addLayer(self):
        """
        Method:      addLayer() -> CmaterialLayer
        Description: Adds a layer to the material.
        """
        return _pymaxwell5.CmaxwellMaterial_addLayer(self)


    def getNumLayers(self):
        """
        Method:      getNumLayers() -> (int,ok)
        Description: Returns the number of layers in the material.
        """
        return _pymaxwell5.CmaxwellMaterial_getNumLayers(self)


    def getLayer(self, index):
        """
        Method:      getLayer( index ) -> CmaterialLayer [reference]
        Description: Returns layer with the given index.
        """
        return _pymaxwell5.CmaxwellMaterial_getLayer(self, index)


    def setLayerIndex(self, oldIndex, newIndex):
        """
        Method:      setLayerIndex( oldIndex, newIndex ) -> 1 = Success, 0 = Fail
        Description: Puts layer in oldIndex into newIndex.
        """
        return _pymaxwell5.CmaxwellMaterial_setLayerIndex(self, oldIndex, newIndex)


    def getFirstActiveEmitter(self):
        """
        Method:      getFirstActiveEmitter() -> CmaterialEmitter [reference]
        Description: Returns the first active emitter found in a non disabled layer.
        """
        return _pymaxwell5.CmaxwellMaterial_getFirstActiveEmitter(self)


    def setAttribute(self, attrName, attribute):
        """
        Method:      setAttribute(name,Cattribute) -> 1 = Success, 0 = Fail
        Description: sets the global bump of the material.
                     I.e. to set the bump as a numeric value (not a texture)
        Parameter:   name = 'bump'
        Parameter:   map = Cattribute()
        Example code:
          att = Cattribute();
          att.type = TYPE_VALUE;
          att.value = 100.0;
          material.setAttribute( 'bump', att );
        """
        return _pymaxwell5.CmaxwellMaterial_setAttribute(self, attrName, attribute)


    def getAttribute(self, attrName):
        """
        Method:      getAttribute( name ) -> (Cattribute,ok)
        Description: gets the global bump of the material.
        Parameter:   name = 'bump' always.
        """
        return _pymaxwell5.CmaxwellMaterial_getAttribute(self, attrName)


    def setNormalMapState(self, enabled):
        """
        Method:      setNormalMapState( bool ) -> 1 = Success, 0 = Fail
        Description: Enables/disables  normal mapping for the global bump parameter.
        """
        return _pymaxwell5.CmaxwellMaterial_setNormalMapState(self, enabled)


    def getNormalMapState(self):
        """
        Method:      getNormalMapState() -> (bool,ok)
        Description: Normal mapping for the global bump parameter.
        """
        return _pymaxwell5.CmaxwellMaterial_getNormalMapState(self)


    def setColorID(self, color):
        """
        Method:      setColorID( Crgb ) -> 1 = Success, 0 = Fail
        Description: Sets the color used by this material in the Material ID render channel.
                     RGB values must always be in the 0-1 range.
        """
        return _pymaxwell5.CmaxwellMaterial_setColorID(self, color)


    def getColorID(self):
        """
        Method:      getColorID() -> (Crgb,ok)
        Description: gets the color used by this material in the Material ID render channel.
                     rgb values must always be in the 0-1 range.
        """
        return _pymaxwell5.CmaxwellMaterial_getColorID(self)


    def enableDisplacement(self, enable):
        """
        Method:      enableDisplacement( bool ) -> 1 = Success, 0 = Fail
        Description: Sets displacement on/off.
        """
        return _pymaxwell5.CmaxwellMaterial_enableDisplacement(self, enable)


    def isDisplacementEnabled(self):
        """
        Method:      isDisplacementEnabled() -> (bool,ok)
        Description: Gets displacement state.
        """
        return _pymaxwell5.CmaxwellMaterial_isDisplacementEnabled(self)


    def setDisplacementMap(self, map):
        """
        Method:      setDisplacementMap( CtextureMap ) -> 1 = Success, 0 = Fail
        Description: Sets the layer's displacement map. Only one displacement element
                     per layer is allowed.
        """
        return _pymaxwell5.CmaxwellMaterial_setDisplacementMap(self, map)


    def getDisplacementMap(self):
        """
        Method:      getDisplacementMap() -> (CtextureMap,ok)
        Description: Gets the layer's displacement map. Only one displacement element
                     per layer is allowed.
        """
        return _pymaxwell5.CmaxwellMaterial_getDisplacementMap(self)


    def setDisplacementCommonParameters(self, displacementType, subdivisionLevel, smoothness, offset, subdivisionType, interpolationUvType, minLOD=0, maxLOD=0):
        """
        Method:      setDisplacementCommonParameters( displacementType, subdivisionLevel,
                       smoothness, offset, subdivisionType, interpolationUvType, minLOD, maxLOD )
                     -> 1 = Success, 0 = Fail
        Parameter:   displacementType ->
                         FLAG_DISPLACEMENT_ON_THE_FLY - On-The-Fly displacement
                         FLAG_DISPLACEMENT_PRETESSELLATED - Pretessellated displacement (default)
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_BLACK - 3D Relative Tangent. Level zero black (i.e. Mudbox).
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_GREY - 3D Relative Tangent. Level zero mid grey (i.e. 3dcoat).
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_BLACK - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_GREY - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_BLACK - 3D World. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_GREY - 3D World. Level zero grey
                         FLAG_DISPLACEMENT_3D_REALFLOW - 3D RealFlow
        Parameter:   subdivisionLevel: subdivision level. Range:(1-1E6)
        Parameter:   smoothness. Enables/Disables smooth ( 0 or 1 ).
                     It's a number instead of a bool for legacy reasons.
        Parameter:   offset. Range:(-1000.0, 1000.0)
        Parameter:   subdivisionType: DISPLACEMENT_SUBDIVISION_FLAT or
                     DISPLACEMENT_SUBDIVISION_LOOP_OR_CATMULL (default)
        Parameter:   interpolationUvType: DISPLACEMENT_UV_NONE, DISPLACEMENT_UV_EDGES,
                     DISPLACEMENT_UV_EDGES_AND_CORNERS (default) or DISPLACEMENT_UV_SHARP.
        Parameter:   minLOD. Range:(0.0-1E6). (default = 0 ): Minimum size
                     in pixels to enable displacement subdivision
        Parameter:   maxLOD. Range:(0.0-1E6). (default = 0 ): If pixel size is
                     greater than maxLOD, maximum subdivision level is used.
        Note:        If both minLOD & maxLOD are 0 no LOD is used. 
        Method:      setDisplacementCommonParameters( displacementType, subdivisionLevel,
                       smoothness, offset, subdivisionType, interpolationUvType, minLOD, maxLOD )
                     -> 1 = Success, 0 = Fail
        Parameter:   displacementType ->
                         FLAG_DISPLACEMENT_ON_THE_FLY - On-The-Fly displacement
                         FLAG_DISPLACEMENT_PRETESSELLATED - Pretessellated displacement (default)
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_BLACK - 3D Relative Tangent. Level zero black (i.e. Mudbox).
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_GREY - 3D Relative Tangent. Level zero mid grey (i.e. 3dcoat).
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_BLACK - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_GREY - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_BLACK - 3D World. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_GREY - 3D World. Level zero grey
                         FLAG_DISPLACEMENT_3D_REALFLOW - 3D RealFlow
        Parameter:   subdivisionLevel: subdivision level. Range:(1-1E6)
        Parameter:   smoothness. Enables/Disables smooth ( 0 or 1 ).
                     It's a number instead of a bool for legacy reasons.
        Parameter:   offset. Range:(-1000.0, 1000.0)
        Parameter:   subdivisionType: DISPLACEMENT_SUBDIVISION_FLAT or
                     DISPLACEMENT_SUBDIVISION_LOOP_OR_CATMULL (default)
        Parameter:   interpolationUvType: DISPLACEMENT_UV_NONE, DISPLACEMENT_UV_EDGES,
                     DISPLACEMENT_UV_EDGES_AND_CORNERS (default) or DISPLACEMENT_UV_SHARP.
        Parameter:   minLOD. Range:(0.0-1E6). (default = 0 ): Minimum size
                     in pixels to enable displacement subdivision
        Parameter:   maxLOD. Range:(0.0-1E6). (default = 0 ): If pixel size is
                     greater than maxLOD, maximum subdivision level is used.
        Note:        If both minLOD & maxLOD are 0 no LOD is used. 
        Method:      setDisplacementCommonParameters( displacementType, subdivisionLevel,
                       smoothness, offset, subdivisionType, interpolationUvType, minLOD, maxLOD )
                     -> 1 = Success, 0 = Fail
        Parameter:   displacementType ->
                         FLAG_DISPLACEMENT_ON_THE_FLY - On-The-Fly displacement
                         FLAG_DISPLACEMENT_PRETESSELLATED - Pretessellated displacement (default)
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_BLACK - 3D Relative Tangent. Level zero black (i.e. Mudbox).
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_GREY - 3D Relative Tangent. Level zero mid grey (i.e. 3dcoat).
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_BLACK - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_GREY - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_BLACK - 3D World. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_GREY - 3D World. Level zero grey
                         FLAG_DISPLACEMENT_3D_REALFLOW - 3D RealFlow
        Parameter:   subdivisionLevel: subdivision level. Range:(1-1E6)
        Parameter:   smoothness. Enables/Disables smooth ( 0 or 1 ).
                     It's a number instead of a bool for legacy reasons.
        Parameter:   offset. Range:(-1000.0, 1000.0)
        Parameter:   subdivisionType: DISPLACEMENT_SUBDIVISION_FLAT or
                     DISPLACEMENT_SUBDIVISION_LOOP_OR_CATMULL (default)
        Parameter:   interpolationUvType: DISPLACEMENT_UV_NONE, DISPLACEMENT_UV_EDGES,
                     DISPLACEMENT_UV_EDGES_AND_CORNERS (default) or DISPLACEMENT_UV_SHARP.
        Parameter:   minLOD. Range:(0.0-1E6). (default = 0 ): Minimum size
                     in pixels to enable displacement subdivision
        Parameter:   maxLOD. Range:(0.0-1E6). (default = 0 ): If pixel size is
                     greater than maxLOD, maximum subdivision level is used.
        Note:        If both minLOD & maxLOD are 0 no LOD is used. 
        """
        return _pymaxwell5.CmaxwellMaterial_setDisplacementCommonParameters(self, displacementType, subdivisionLevel, smoothness, offset, subdivisionType, interpolationUvType, minLOD, maxLOD)


    def getDisplacementCommonParameters(self):
        """
        Method:      getDisplacementCommonParameters()
                     -> (displacementType,subdivisionLevel,smoothness,offset,subdivisionType,
                         interpolationUvType,minLOD,maxLOD,ok)
        Parameter:   displacementType ->
                         FLAG_DISPLACEMENT_ON_THE_FLY - On-The-Fly displacement
                         FLAG_DISPLACEMENT_PRETESSELLATED - Pretessellated displacement (default)
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_BLACK - 3D Relative Tangent. Level zero black (i.e. Mudbox).
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_GREY - 3D Relative Tangent. Level zero mid grey (i.e. 3dcoat).
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_BLACK - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_GREY - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_BLACK - 3D World. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_GREY - 3D World. Level zero grey
                         FLAG_DISPLACEMENT_3D_REALFLOW - 3D RealFlow
        Parameter:   subdivisionLevel: subdivision level. Range:(1-1E6)
        Parameter:   smoothness. Enables/Disables smooth ( 0 or 1 ).
                     It's a number instead of a bool for legacy reasons.
        Parameter:   offset. Range:(-1000.0, 1000.0)
        Parameter:   subdivisionType: DISPLACEMENT_SUBDIVISION_FLAT or
                     DISPLACEMENT_SUBDIVISION_LOOP_OR_CATMULL (default)
        Parameter:   interpolationUvType: DISPLACEMENT_UV_NONE, DISPLACEMENT_UV_EDGES,
                     DISPLACEMENT_UV_EDGES_AND_CORNERS (default) or DISPLACEMENT_UV_SHARP.
        Parameter:   minLOD. Range:(0.0-1E6). (default = 0 ): Minimum size
                     in pixels to enable displacement subdivision
        Parameter:   maxLOD. Range:(0.0-1E6). (default = 0 ): If pixel size is
                     greater than maxLOD, maximum subdivision level is used.
        Note:        If both minLOD & maxLOD are 0 no LOD is used. 
        """
        return _pymaxwell5.CmaxwellMaterial_getDisplacementCommonParameters(self)


    def setHeightMapDisplacementParameters(self, height, absoluteHeight, adaptive):
        """
        Method:      setHeightMapDisplacementParameters( height, absoluteHeight, adaptive )
                     -> 1 = success, 0 = Fail
        Parameter: height. Range (-1000.0, 1000.0)
        Parameter: absoluteHeight. Use real units for height.
        Parameter: adaptive. Enable auto adaptive subdivision
        """
        return _pymaxwell5.CmaxwellMaterial_setHeightMapDisplacementParameters(self, height, absoluteHeight, adaptive)


    def getHeightMapDisplacementParameters(self):
        """
        Method:      getHeightMapDisplacementParameters() -> (height,absoluteHeight,adaptive,ok)
        Parameter:   height. Range (-1000.0, 1000.0)
        Parameter:   absoluteHeight. Use real units for height.
        Parameter:   adaptive. Auto adaptive subdivision enabled.
        """
        return _pymaxwell5.CmaxwellMaterial_getHeightMapDisplacementParameters(self)


    def setVectorDisplacementParameters(self, scale, transformType, mapping, preset):
        """
        Method:      setVectorDisplacementParameters( Cvector scale, transformType, mapping, preset )
                     -> 1 = Success, 0 = Fail
        Parameter:   scale. Scale multiplier in each axis.
        Parameter:   transformType: VD_TANGENT (default), VD_OBJECT, VD_WORLD or VD_REALFLOW.
                     or VD_UV_SHARP
        Parameter:   mapping: VD_XYZ (default), VD_XZY, VD_YZX, VD_YXZ, VD_ZXY or VD_ZYX.
        Parameter:   preset: VD_PRESET_CUSTOM, VD_PRESET_ZBRUSH_TANGENT_TYPE_3,
                     VD_PRESET_ZBRUSH_WORLD, VD_PRESET_MUDBOX_ABSOLUTE_TANGENT, VD_PRESET_MUDBOX_WORLD
                     or VD_PRESET_REALFLOW
        """
        return _pymaxwell5.CmaxwellMaterial_setVectorDisplacementParameters(self, scale, transformType, mapping, preset)


    def getVectorDisplacementParameters(self):
        """
        Method: getVectorDisplacementParameters() -> (scale,transformType,mapping,preset,ok)
        Parameter:   scale. Scale multiplier in each axis.
        Parameter:   transformType: VD_TANGENT (default), VD_OBJECT, VD_WORLD or VD_REALFLOW.
                     or VD_UV_SHARP
        Parameter:   mapping: VD_XYZ (default), VD_XZY, VD_YZX, VD_YXZ, VD_ZXY or VD_ZYX.
        Parameter:   preset: VD_PRESET_CUSTOM, VD_PRESET_ZBRUSH_TANGENT_TYPE_3,
                     VD_PRESET_ZBRUSH_WORLD, VD_PRESET_MUDBOX_ABSOLUTE_TANGENT, VD_PRESET_MUDBOX_WORLD
                     or VD_PRESET_REALFLOW
        """
        return _pymaxwell5.CmaxwellMaterial_getVectorDisplacementParameters(self)


    def hasMaterialModifier(self):
        """hasMaterialModifier(CmaxwellMaterial self) -> byte"""
        return _pymaxwell5.CmaxwellMaterial_hasMaterialModifier(self)


    def getMaterialModifierExtensionParams(self):
        """Method:      getMaterialModifierExtensionParams() -> (MxParamList,ok)"""
        return _pymaxwell5.CmaxwellMaterial_getMaterialModifierExtensionParams(self)


    def applyMaterialModifierExtension(self, pyExtensionParams):
        """Method:      getMaterialModifierExtensionParams() -> (MxParamList,ok)"""
        return _pymaxwell5.CmaxwellMaterial_applyMaterialModifierExtension(self, pyExtensionParams)


    def cleanMaterialModifierExtension(self):
        """Method:      getMaterialModifierExtensionParams() -> (MxParamList,ok)"""
        return _pymaxwell5.CmaxwellMaterial_cleanMaterialModifierExtension(self)


    def setPreview(self, preview):
        """
        Method:      setPreview( image ) -> 1 = Success, 0 = Fail
        Description: Sets preview image of the material.
        Parameter:   image -> numpy ubyte array. shape is (width,height,3).
        """
        return _pymaxwell5.CmaxwellMaterial_setPreview(self, preview)


    def getPreview(self):
        """
        Method:      getPreview() -> (image,ok)
        Description: Gets preview image of the material.
        Parameter:   image -> numpy ubyte array. shape is (width,height,3).
        """
        return _pymaxwell5.CmaxwellMaterial_getPreview(self)


    def setGlobalMap(self, map):
        """
        Method:      setGlobalMap( CtextureMap ) -> 1 = Success, 0 = Fail
        Description: Sets the global map used as multiplier. It affects all the maps of the material
                     with useGlobalMap = 1.
        """
        return _pymaxwell5.CmaxwellMaterial_setGlobalMap(self, map)


    def getGlobalMap(self):
        """
        Method:      getGlobalMap() -> (CtextureMap,ok)
        Description: Gets the global map used as multiplier.
        """
        return _pymaxwell5.CmaxwellMaterial_getGlobalMap(self)


    def setActiveDisplayMap(self, map):
        """
        Method:      setActiveDisplayMap( CtextureMap ) -> 1 = Success, 0 = Fail
        Description: Sets  the active map shown in the Maxwell Studio viewport. If there is no
                     active map, the SDK returns the first map found. If there are no maps in the
                     material, map.pFileName returns NULL.
        """
        return _pymaxwell5.CmaxwellMaterial_setActiveDisplayMap(self, map)


    def getActiveDisplayMap(self):
        """
        Method:      getActiveDisplayMap() -> (CtextureMap,ok)
        Description: Gets the active map shown in the Maxwell Studio viewport. If there is no
                     active map, the SDK returns the first map found. If there are no maps in the
                     material, map.pFileName returns NULL.
        """
        return _pymaxwell5.CmaxwellMaterial_getActiveDisplayMap(self)


    def getNumberOfChannelsNeeded(self):
        """
        Method:      getNumberOfChannelsNeeded() -> int
        Description: Returns the number of UV channels needed for using this material.
        """
        return _pymaxwell5.CmaxwellMaterial_getNumberOfChannelsNeeded(self)


    def getMaps(self, addOnlyMapsWithBitmapsUsed):
        """
        Method:      getMaps( addOnlyMapsWithBitmapsUsed ) -> list (CtextureMap)
        Description: Returns a list with all the Cmaps used in this material. If this material has a
                     reference to another material, it does not take into account CtextureMap of the
                     referenced MXM. If addOnlyMapsWithBitmapsUsed is True, maps that contain
                     bitmaps that are not used won't be added to the list (i.e if the active
                     reflectance is set as a rgb color instead of as a bitmap, it won't be added to
                     the list of maps).

        """
        return _pymaxwell5.CmaxwellMaterial_getMaps(self, addOnlyMapsWithBitmapsUsed)


    def getDependencies(self, searchInsideReferences=True):
        """
        Method:      getDependencies(searchInsideReferences = True) -> (list,ok)
        Description: Returns a list of strings with all the extern depencencies of the material
                     (textures, ior files, etc).
                     User must load extensions (CextensionManager.instance().loadAllExtensions())
                     before call getDependencies to be able to get dependencies of MaterialModifiers
                     extension materials.
        Parameter:   searchInsideReferences. If true the function search for dependencies also in
                     the referenced MXM path if exists. searchInsideReferences is true by default
        Method:      getDependencies(searchInsideReferences = True) -> (list,ok)
        Description: Returns a list of strings with all the extern depencencies of the material
                     (textures, ior files, etc).
                     User must load extensions (CextensionManager.instance().loadAllExtensions())
                     before call getDependencies to be able to get dependencies of MaterialModifiers
                     extension materials.
        Parameter:   searchInsideReferences. If true the function search for dependencies also in
                     the referenced MXM path if exists. searchInsideReferences is true by default
        """
        return _pymaxwell5.CmaxwellMaterial_getDependencies(self, searchInsideReferences)


    def getMxmInfo(pPath):
        """
        Method:      getMxmInfo(path) -> (name,description,image,ok)
        Description: Get information from an MXM file.
        Parameter:   name -> Material name.
        Parameter:   description -> Description text of the material.
        Parameter:   image -> NumPy ubyte array. shape is (width,height,3).
        """
        return _pymaxwell5.CmaxwellMaterial_getMxmInfo(pPath)

    getMxmInfo = staticmethod(getMxmInfo)

    def addToCustomAlpha(self, groupName):
        """
        Method:      addToCustomAlpha(name) -> 1 = Success, 0 = Fail
        Description: Adds material to a custom alpha group.
        """
        return _pymaxwell5.CmaxwellMaterial_addToCustomAlpha(self, groupName)


    def removeFromCustomAlpha(self, *args):
        """
        Method:      removeFromCustomAlpha(name) -> 1 = Success, 0 = Fail
        Description: Removes material from a custom alpha group.
        Method:      removeFromCustomAlpha() -> 1 = Success, 0 = Fail
        Description: Removes material from all custom alpha groups.
        """
        return _pymaxwell5.CmaxwellMaterial_removeFromCustomAlpha(self, *args)


    def getNumCustomAlphaChannels(self):
        """
        Method:      getNumCustomAlphaChannels() -> (int,ok)
        Description: Gets the number of custom alpha chanels where the material is in it.
        """
        return _pymaxwell5.CmaxwellMaterial_getNumCustomAlphaChannels(self)


    def getCustomAlphaChannels(self):
        """
        Method:      getCustomAlphaChannels() -> (list,ok)
        Description: Gets the custom alpha channel names where the material is in it.
        """
        return _pymaxwell5.CmaxwellMaterial_getCustomAlphaChannels(self)


    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the CmaterialLayer was initialized
        """
        return _pymaxwell5.CmaxwellMaterial_isNull(self)


    def __str__(self):
        """__str__(CmaxwellMaterial self) -> char *"""
        return _pymaxwell5.CmaxwellMaterial___str__(self)

    __swig_destroy__ = _pymaxwell5.delete_CmaxwellMaterial
CmaxwellMaterial.createCopy = new_instancemethod(_pymaxwell5.CmaxwellMaterial_createCopy, None, CmaxwellMaterial)
CmaxwellMaterial.free = new_instancemethod(_pymaxwell5.CmaxwellMaterial_free, None, CmaxwellMaterial)
CmaxwellMaterial.extract = new_instancemethod(_pymaxwell5.CmaxwellMaterial_extract, None, CmaxwellMaterial)
CmaxwellMaterial.setName = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setName, None, CmaxwellMaterial)
CmaxwellMaterial.getName = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getName, None, CmaxwellMaterial)
CmaxwellMaterial.setReference = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setReference, None, CmaxwellMaterial)
CmaxwellMaterial.getReference = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getReference, None, CmaxwellMaterial)
CmaxwellMaterial.setDescription = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setDescription, None, CmaxwellMaterial)
CmaxwellMaterial.getDescription = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getDescription, None, CmaxwellMaterial)
CmaxwellMaterial.setUuid = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setUuid, None, CmaxwellMaterial)
CmaxwellMaterial.getUuid = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getUuid, None, CmaxwellMaterial)
CmaxwellMaterial.setDirty = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setDirty, None, CmaxwellMaterial)
CmaxwellMaterial.isDirty = new_instancemethod(_pymaxwell5.CmaxwellMaterial_isDirty, None, CmaxwellMaterial)
CmaxwellMaterial.forceToWriteIntoScene = new_instancemethod(_pymaxwell5.CmaxwellMaterial_forceToWriteIntoScene, None, CmaxwellMaterial)
CmaxwellMaterial.belongToScene = new_instancemethod(_pymaxwell5.CmaxwellMaterial_belongToScene, None, CmaxwellMaterial)
CmaxwellMaterial.isEmpty = new_instancemethod(_pymaxwell5.CmaxwellMaterial_isEmpty, None, CmaxwellMaterial)
CmaxwellMaterial.isEmptyOrEverythingIsDisabled = new_instancemethod(_pymaxwell5.CmaxwellMaterial_isEmptyOrEverythingIsDisabled, None, CmaxwellMaterial)
CmaxwellMaterial.setEmpty = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setEmpty, None, CmaxwellMaterial)
CmaxwellMaterial.read = new_instancemethod(_pymaxwell5.CmaxwellMaterial_read, None, CmaxwellMaterial)
CmaxwellMaterial.write = new_instancemethod(_pymaxwell5.CmaxwellMaterial_write, None, CmaxwellMaterial)
CmaxwellMaterial.setDispersion = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setDispersion, None, CmaxwellMaterial)
CmaxwellMaterial.getDispersion = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getDispersion, None, CmaxwellMaterial)
CmaxwellMaterial.setMatte = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setMatte, None, CmaxwellMaterial)
CmaxwellMaterial.getMatte = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getMatte, None, CmaxwellMaterial)
CmaxwellMaterial.setHideToCameraInMaterialId = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setHideToCameraInMaterialId, None, CmaxwellMaterial)
CmaxwellMaterial.getHideToCameraInMaterialId = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getHideToCameraInMaterialId, None, CmaxwellMaterial)
CmaxwellMaterial.setMatteShadow = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setMatteShadow, None, CmaxwellMaterial)
CmaxwellMaterial.getMatteShadow = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getMatteShadow, None, CmaxwellMaterial)
CmaxwellMaterial.setNestedPriority = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setNestedPriority, None, CmaxwellMaterial)
CmaxwellMaterial.getNestedPriority = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getNestedPriority, None, CmaxwellMaterial)
CmaxwellMaterial.addLayer = new_instancemethod(_pymaxwell5.CmaxwellMaterial_addLayer, None, CmaxwellMaterial)
CmaxwellMaterial.getNumLayers = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getNumLayers, None, CmaxwellMaterial)
CmaxwellMaterial.getLayer = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getLayer, None, CmaxwellMaterial)
CmaxwellMaterial.setLayerIndex = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setLayerIndex, None, CmaxwellMaterial)
CmaxwellMaterial.getFirstActiveEmitter = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getFirstActiveEmitter, None, CmaxwellMaterial)
CmaxwellMaterial.setAttribute = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setAttribute, None, CmaxwellMaterial)
CmaxwellMaterial.getAttribute = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getAttribute, None, CmaxwellMaterial)
CmaxwellMaterial.setNormalMapState = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setNormalMapState, None, CmaxwellMaterial)
CmaxwellMaterial.getNormalMapState = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getNormalMapState, None, CmaxwellMaterial)
CmaxwellMaterial.setColorID = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setColorID, None, CmaxwellMaterial)
CmaxwellMaterial.getColorID = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getColorID, None, CmaxwellMaterial)
CmaxwellMaterial.enableDisplacement = new_instancemethod(_pymaxwell5.CmaxwellMaterial_enableDisplacement, None, CmaxwellMaterial)
CmaxwellMaterial.isDisplacementEnabled = new_instancemethod(_pymaxwell5.CmaxwellMaterial_isDisplacementEnabled, None, CmaxwellMaterial)
CmaxwellMaterial.setDisplacementMap = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setDisplacementMap, None, CmaxwellMaterial)
CmaxwellMaterial.getDisplacementMap = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getDisplacementMap, None, CmaxwellMaterial)
CmaxwellMaterial.setDisplacementCommonParameters = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setDisplacementCommonParameters, None, CmaxwellMaterial)
CmaxwellMaterial.getDisplacementCommonParameters = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getDisplacementCommonParameters, None, CmaxwellMaterial)
CmaxwellMaterial.setHeightMapDisplacementParameters = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setHeightMapDisplacementParameters, None, CmaxwellMaterial)
CmaxwellMaterial.getHeightMapDisplacementParameters = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getHeightMapDisplacementParameters, None, CmaxwellMaterial)
CmaxwellMaterial.setVectorDisplacementParameters = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setVectorDisplacementParameters, None, CmaxwellMaterial)
CmaxwellMaterial.getVectorDisplacementParameters = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getVectorDisplacementParameters, None, CmaxwellMaterial)
CmaxwellMaterial.hasMaterialModifier = new_instancemethod(_pymaxwell5.CmaxwellMaterial_hasMaterialModifier, None, CmaxwellMaterial)
CmaxwellMaterial.getMaterialModifierExtensionParams = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getMaterialModifierExtensionParams, None, CmaxwellMaterial)
CmaxwellMaterial.applyMaterialModifierExtension = new_instancemethod(_pymaxwell5.CmaxwellMaterial_applyMaterialModifierExtension, None, CmaxwellMaterial)
CmaxwellMaterial.cleanMaterialModifierExtension = new_instancemethod(_pymaxwell5.CmaxwellMaterial_cleanMaterialModifierExtension, None, CmaxwellMaterial)
CmaxwellMaterial.setPreview = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setPreview, None, CmaxwellMaterial)
CmaxwellMaterial.getPreview = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getPreview, None, CmaxwellMaterial)
CmaxwellMaterial.setGlobalMap = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setGlobalMap, None, CmaxwellMaterial)
CmaxwellMaterial.getGlobalMap = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getGlobalMap, None, CmaxwellMaterial)
CmaxwellMaterial.setActiveDisplayMap = new_instancemethod(_pymaxwell5.CmaxwellMaterial_setActiveDisplayMap, None, CmaxwellMaterial)
CmaxwellMaterial.getActiveDisplayMap = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getActiveDisplayMap, None, CmaxwellMaterial)
CmaxwellMaterial.getNumberOfChannelsNeeded = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getNumberOfChannelsNeeded, None, CmaxwellMaterial)
CmaxwellMaterial.getMaps = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getMaps, None, CmaxwellMaterial)
CmaxwellMaterial.getDependencies = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getDependencies, None, CmaxwellMaterial)
CmaxwellMaterial.addToCustomAlpha = new_instancemethod(_pymaxwell5.CmaxwellMaterial_addToCustomAlpha, None, CmaxwellMaterial)
CmaxwellMaterial.removeFromCustomAlpha = new_instancemethod(_pymaxwell5.CmaxwellMaterial_removeFromCustomAlpha, None, CmaxwellMaterial)
CmaxwellMaterial.getNumCustomAlphaChannels = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getNumCustomAlphaChannels, None, CmaxwellMaterial)
CmaxwellMaterial.getCustomAlphaChannels = new_instancemethod(_pymaxwell5.CmaxwellMaterial_getCustomAlphaChannels, None, CmaxwellMaterial)
CmaxwellMaterial.isNull = new_instancemethod(_pymaxwell5.CmaxwellMaterial_isNull, None, CmaxwellMaterial)
CmaxwellMaterial.__str__ = new_instancemethod(_pymaxwell5.CmaxwellMaterial___str__, None, CmaxwellMaterial)
CmaxwellMaterial_swigregister = _pymaxwell5.CmaxwellMaterial_swigregister
CmaxwellMaterial_swigregister(CmaxwellMaterial)

def CmaxwellMaterial_getVersion(pFileName):
    """
    Method:      getVersion( filename ) -> (float,ok)
    Description: Returns the version number of the material.
    """
    return _pymaxwell5.CmaxwellMaterial_getVersion(pFileName)

def CmaxwellMaterial_getMxmInfo(pPath):
    """
    Method:      getMxmInfo(path) -> (name,description,image,ok)
    Description: Get information from an MXM file.
    Parameter:   name -> Material name.
    Parameter:   description -> Description text of the material.
    Parameter:   image -> NumPy ubyte array. shape is (width,height,3).
    """
    return _pymaxwell5.CmaxwellMaterial_getMxmInfo(pPath)

class CmaterialLayer(object):
    """
    Class CmaterialLayer

      Class that contains the Maxwell material layer description.

      Example code:

        scene = Cmaxwell(mwcallback_cb);
        material = scene.createMaterial('materialname');
        layer = material.addLayer();
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setEnabled(self, enable):
        """
        Method:      setEnabled( bool ) -> 1 = Succeed, 0 = Fail
        Description: Switches on/off the layer.
        """
        return _pymaxwell5.CmaterialLayer_setEnabled(self, enable)


    def getEnabled(self):
        """
        Method:      getEnabled() -> (bool,ok)
        Description: Layer enabled state.
        """
        return _pymaxwell5.CmaterialLayer_getEnabled(self)


    def setName(self, pName):
        """
        Method:      setName( string ) -> 1 = Succeed, 0 = Fail
        Description: Sets the layer name.
        """
        return _pymaxwell5.CmaterialLayer_setName(self, pName)


    def getName(self):
        """
        Method:      getName() -> (string,ok)
        Description: Gets the layer name
        """
        return _pymaxwell5.CmaterialLayer_getName(self)


    def setStackedBlendingMode(self, mode):
        """
        Method:      setStackedBlendingMode( mode ) -> 1 = Sucess, 0 = Fail
        Description: Sets the blending mode of this layer.
                     It is useful when layers are stacked only.
        Parameter:   mode -> BLENDING_NORMAL or BLENDING_ADDITIVE.
        """
        return _pymaxwell5.CmaterialLayer_setStackedBlendingMode(self, mode)


    def getStackedBlendingMode(self):
        """
        Method:      getStackedBlendingMode( ) -> (mode,ok)
        Description: sets the blending mode of this layer.
                     It is useful when layers are stacked only.
        Returns:     BLENDING_NORMAL or BLENDING_ADDITIVE.
        """
        return _pymaxwell5.CmaterialLayer_getStackedBlendingMode(self)


    def setWeight(self, attr):
        """
        Method:      setWeight( Cmap ) -> 1 = Sucess, 0 = Fail
        Description: Sets the layer mask.
        """
        return _pymaxwell5.CmaterialLayer_setWeight(self, attr)


    def getWeight(self):
        """
        Method:      getWeight() -> (Cattribute,ok)
        Description: Gets the layer mask.
        """
        return _pymaxwell5.CmaterialLayer_getWeight(self)


    def createEmitter(self):
        """
        Method:      createEmitter() -> CmaterialEmitter [reference]
        Description: Creates emitter. Only one emitter per layer is allowed.
        """
        return _pymaxwell5.CmaterialLayer_createEmitter(self)


    def getEmitter(self):
        """
        Method:      getEmitter() -> CmaterialEmitter [reference]
        Description: Gets the emitter material from this layer.
        """
        return _pymaxwell5.CmaterialLayer_getEmitter(self)


    def freeEmitter(self):
        """
        Method:      freeEmitter() -> CmaterialEmitter
        Description: Removes the emitter from this layer.
        """
        return _pymaxwell5.CmaterialLayer_freeEmitter(self)


    def addBSDF(self):
        """
        Method:      addBSDF() -> Cbsdf [reference]
        Description: Create and return a new BSDF added to the layer.

        """
        return _pymaxwell5.CmaterialLayer_addBSDF(self)


    def getNumBSDFs(self):
        """
        Method:      getNumBSDFs() -> (int,ok)
        Description: Number of BSDFs in the layer.

        """
        return _pymaxwell5.CmaterialLayer_getNumBSDFs(self)


    def getBSDF(self, index):
        """
        Method:      getBSDF( n ) -> Cbsdf [reference]
        Description: Gets the nth BSDF.

        """
        return _pymaxwell5.CmaterialLayer_getBSDF(self, index)


    def setAttribute(self, name, attr):
        """
        Method: setAttribute( name, Cattribute )
        Description: Wrapper function provided for convenience to provide an easy way for setting any
                     parameter.
        Parameter:   name -> 'weight'.
        """
        return _pymaxwell5.CmaterialLayer_setAttribute(self, name, attr)


    def getAttribute(self, name):
        """
        Method: getAttribute( name ) -> (Cattribute,ok)
        Description: Wrapper function provided for convenience to provide an easy way for getting any
                     parameter.
        Parameter:   name -> 'weight'.
        """
        return _pymaxwell5.CmaterialLayer_getAttribute(self, name)


    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the CmaterialLayer was initialized.
        """
        return _pymaxwell5.CmaterialLayer_isNull(self)


    def __str__(self):
        """__str__(CmaterialLayer self) -> char *"""
        return _pymaxwell5.CmaterialLayer___str__(self)

    __swig_destroy__ = _pymaxwell5.delete_CmaterialLayer
CmaterialLayer.setEnabled = new_instancemethod(_pymaxwell5.CmaterialLayer_setEnabled, None, CmaterialLayer)
CmaterialLayer.getEnabled = new_instancemethod(_pymaxwell5.CmaterialLayer_getEnabled, None, CmaterialLayer)
CmaterialLayer.setName = new_instancemethod(_pymaxwell5.CmaterialLayer_setName, None, CmaterialLayer)
CmaterialLayer.getName = new_instancemethod(_pymaxwell5.CmaterialLayer_getName, None, CmaterialLayer)
CmaterialLayer.setStackedBlendingMode = new_instancemethod(_pymaxwell5.CmaterialLayer_setStackedBlendingMode, None, CmaterialLayer)
CmaterialLayer.getStackedBlendingMode = new_instancemethod(_pymaxwell5.CmaterialLayer_getStackedBlendingMode, None, CmaterialLayer)
CmaterialLayer.setWeight = new_instancemethod(_pymaxwell5.CmaterialLayer_setWeight, None, CmaterialLayer)
CmaterialLayer.getWeight = new_instancemethod(_pymaxwell5.CmaterialLayer_getWeight, None, CmaterialLayer)
CmaterialLayer.createEmitter = new_instancemethod(_pymaxwell5.CmaterialLayer_createEmitter, None, CmaterialLayer)
CmaterialLayer.getEmitter = new_instancemethod(_pymaxwell5.CmaterialLayer_getEmitter, None, CmaterialLayer)
CmaterialLayer.freeEmitter = new_instancemethod(_pymaxwell5.CmaterialLayer_freeEmitter, None, CmaterialLayer)
CmaterialLayer.addBSDF = new_instancemethod(_pymaxwell5.CmaterialLayer_addBSDF, None, CmaterialLayer)
CmaterialLayer.getNumBSDFs = new_instancemethod(_pymaxwell5.CmaterialLayer_getNumBSDFs, None, CmaterialLayer)
CmaterialLayer.getBSDF = new_instancemethod(_pymaxwell5.CmaterialLayer_getBSDF, None, CmaterialLayer)
CmaterialLayer.setAttribute = new_instancemethod(_pymaxwell5.CmaterialLayer_setAttribute, None, CmaterialLayer)
CmaterialLayer.getAttribute = new_instancemethod(_pymaxwell5.CmaterialLayer_getAttribute, None, CmaterialLayer)
CmaterialLayer.isNull = new_instancemethod(_pymaxwell5.CmaterialLayer_isNull, None, CmaterialLayer)
CmaterialLayer.__str__ = new_instancemethod(_pymaxwell5.CmaterialLayer___str__, None, CmaterialLayer)
CmaterialLayer_swigregister = _pymaxwell5.CmaterialLayer_swigregister
CmaterialLayer_swigregister(CmaterialLayer)

class CmaterialEmitter(object):
    """
    Class CmaterialEmitter

      EMITTER COMPONENT:
      Each layer can contains an emitter in the top (just one per layer)
      The emitter component is created calling CmaterialLayer.createEmitter()
      Any emitter can be set through one of the following ways:
        1. Through a color + luminance pair.
          1.a. The Color can be set through a RGB value or a Correlated Temperature Color.
          1.b. The luminance can be set through different emission units (Watts, lumens, 
               candelas..) plus an IES FILE (if any).
        2. Through a temperature value in Kelvin.
        3. Through an emission texture.
      The active emission type (1,2 or 3) is set through setActiveMultiValue
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setGroupNameForMultilight(self, name):
        """
        Method:      setGroupNameForMultilight( str ) -> 1 = Success, 0 = Fail
        Description: To set the emitterGroupName
        """
        return _pymaxwell5.CmaterialEmitter_setGroupNameForMultilight(self, name)


    def getGroupNameForMultilight(self):
        """
        Method:      getGroupNameForMultilight() -> str
        Description: To get the emitterGroupName
        """
        return _pymaxwell5.CmaterialEmitter_getGroupNameForMultilight(self)


    def setState(self, enabled):
        """
        Method:      setState( bool ) -> 1 = Success, 0 = Fail
        Description: To switch on/off the emitter
        """
        return _pymaxwell5.CmaterialEmitter_setState(self, enabled)


    def getState(self):
        """
        Method:      getState() -> (bool,ok)
        Description: Checks whether the emitter is enabled.
        """
        return _pymaxwell5.CmaterialEmitter_getState(self)


    def setPair(self, pair):
        """
        Method:      setPair( CemitterPair ) -> 1 = Success, 0 = Fail
        Description: Sets pair.
        """
        return _pymaxwell5.CmaterialEmitter_setPair(self, pair)


    def getPair(self):
        """
        Method:      getPair() -> (CemitterPair,ok)
        Description: Gets pair.
        """
        return _pymaxwell5.CmaterialEmitter_getPair(self)


    def setActivePair(self, colorType, units):
        """
        Method:      setActivePair( colorType, units ) -> 1 = Success, 0 = Fail
        Description: Used to set the active types for CemitterPair. See CemitterPair declaration to
                     know how to fill a CemitterPair struct.
        Parameter:   colorType -> EMISSION_RGB, EMISSION_XYZ or EMISSION_COLOR_TEMPERATURE.
        Parameter:   units -> EMISSION_UNITS_WATTS_AND_LUMINOUS_EFFICACY,
                     EMISSION_UNITS_LUMINOUS_POWER, EMISSION_UNITS_ILLUMINANCE,
                     EMISSION_UNITS_LUMINOUS_INTENSITY or EMISSION_UNITS_LUMINANCE.
        """
        return _pymaxwell5.CmaterialEmitter_setActivePair(self, colorType, units)


    def getActivePair(self):
        """
        Method:      getPair() -> (colorType,units,ok)
        Description: Gets the active types for CemitterPair.
        Parameter:   colorType -> EMISSION_RGB, EMISSION_XYZ or EMISSION_COLOR_TEMPERATURE.
        Parameter:   units -> EMISSION_UNITS_WATTS_AND_LUMINOUS_EFFICACY,
                     EMISSION_UNITS_LUMINOUS_POWER, EMISSION_UNITS_ILLUMINANCE,
                     EMISSION_UNITS_LUMINOUS_INTENSITY or EMISSION_UNITS_LUMINANCE.
        """
        return _pymaxwell5.CmaterialEmitter_getActivePair(self)


    def setTemperature(self, temperature):
        """
        Method:      setTemperature( float ) -> 1 = Success, 0 = Fail
        Description: Sets temperature.
        """
        return _pymaxwell5.CmaterialEmitter_setTemperature(self, temperature)


    def getTemperature(self):
        """
        Method:      getTemperature() -> (temperature,ok)
        Description: Gets temperature.
        """
        return _pymaxwell5.CmaterialEmitter_getTemperature(self)


    def setMXI(self, map):
        """
        Method:      setMXI( Cattribute ) -> 1 = Success, 0 = Fail
        Description: Sets the emission texture of this emitter material (if any).
                     Accepts any high dynamic range image format (MXI,EXR,HDR..).
                     map.activeType will be assumed as TYPE_BITMAP.
        """
        return _pymaxwell5.CmaterialEmitter_setMXI(self, map)


    def getMXI(self):
        """
        Method:      getMXI() -> (Cattribute,ok)
        Description: Gets the emission texture of this emitter material (if any).
                     map.activeType will be assumed as MAP_TYPE_BITMAP.
        """
        return _pymaxwell5.CmaterialEmitter_getMXI(self)


    def setActiveEmissionType(self, type):
        """
        Method:      setActiveEmissionType( type ) -> 1 = Success, 0 = Fail
        Description: Used to choose which emission type (MXI,PAIR,TEMPERATURE) is enabled.
        Parameter:   type = EMISSION_TYPE_PAIR, EMISSION_TYPE_TEMPERATURE, EMISSION_TYPE_MXI or
                     EMISSION_TYPE_SPECTRUM_FILE.
        """
        return _pymaxwell5.CmaterialEmitter_setActiveEmissionType(self, type)


    def getActiveEmissionType(self):
        """
        Method:      getActiveEmissionType() -> (type,ok)
        Description: Used to check the emission type.
        Parameter:   type = EMISSION_TYPE_PAIR, EMISSION_TYPE_TEMPERATURE, EMISSION_TYPE_MXI or
                     EMISSION_TYPE_SPECTRUM_FILE.
        """
        return _pymaxwell5.CmaterialEmitter_getActiveEmissionType(self)


    def setLobeType(self, type):
        """
        Method:      setLobeType( type ) -> 1 = Success, 0 = Fail
        Description: Used to choose which lobe type is enabled.
        Parameter:   type -> EMISSION_LOBE_DEFAULT, EMISSION_LOBE_IES or EMISSION_LOBE_BITMAP.
        """
        return _pymaxwell5.CmaterialEmitter_setLobeType(self, type)


    def getLobeType(self):
        """
        Method:      getLobeType() -> (type,ok)
        Description: Used to choose which lobe type is enabled.
        Parameter:   type -> EMISSION_LOBE_DEFAULT, EMISSION_LOBE_IES or EMISSION_LOBE_BITMAP.
        """
        return _pymaxwell5.CmaterialEmitter_getLobeType(self)


    def setIESLobeIntensity(self, intensity):
        """
        Method:      setIESLobeIntensity( float intensity ) -> 1 = Success, 0 = Fail
        Description: Sets IES lobe intensity.
        """
        return _pymaxwell5.CmaterialEmitter_setIESLobeIntensity(self, intensity)


    def getIESLobeIntensity(self):
        """
        Method:      getIESLobeIntensity() -> (intensity,ok)
        Description: Gets IES lobe intensity.
        """
        return _pymaxwell5.CmaterialEmitter_getIESLobeIntensity(self)


    def setLobeIES(self, file):
        """
        Method:      setLobeIES( filename ) -> 1 = Success, 0 = Fail
        Description: Used to set the IES/EULUM emission file path. It works only when the active
                     emission type is 'EMISSION_LOBE_IES'
        """
        return _pymaxwell5.CmaterialEmitter_setLobeIES(self, file)


    def getLobeIES(self):
        """
        Method:      getLobeIES() -> filename
        Description: Used to get the IES/EULUM emission file path. It works only when the active
                     emission type is 'EMISSION_LOBE_IES'
        """
        return _pymaxwell5.CmaterialEmitter_getLobeIES(self)


    def setLobeImageProjectedMap(self, mapEnabled, map):
        """
        Method:      setLobeImageProjectedMap( mapEnabled, CtextureMap ) -> 1 = Success, 0 = Fail
        Description: Used to set the emission image file. It works only when the active emission type
                     is 'EMISSION_LOBE_SPOTLIGHT'.
        Parameter:   mapEnabled, default: false. Flag to set the map active or not.
        """
        return _pymaxwell5.CmaterialEmitter_setLobeImageProjectedMap(self, mapEnabled, map)


    def getLobeImageProjectedMap(self):
        """
        Method:      getLobeImageProjectedMap() -> (mapEnabled,CtextureMap,ok)
        Description: Used to get the emission image file. It works only when the active emission type
                     is 'EMISSION_LOBE_SPOTLIGHT'.
        Parameter:   mapEnabled, default: false. Flag to set the map active or not.
        """
        return _pymaxwell5.CmaterialEmitter_getLobeImageProjectedMap(self)


    def setSpotConeAngle(self, angle):
        """
        Method:      setSpotConeAngle( angle ) -> 1 = Success, 0 = Fail
        Description: When the active emission type is 'EMISSION_LOBE_SPOTLIGHT', used to set the
                     aperture angle of the spotlight projecting the emission image file.
        """
        return _pymaxwell5.CmaterialEmitter_setSpotConeAngle(self, angle)


    def getSpotConeAngle(self):
        """
        Method:      getSpotConeAngle() -> (angle,ok)
        Description: When the active emission type is 'EMISSION_LOBE_SPOTLIGHT', used to get the
                     aperture angle of the spotlight projecting the emission image file.
        """
        return _pymaxwell5.CmaterialEmitter_getSpotConeAngle(self)


    def setSpotFallOffAngle(self, angle):
        """
        Method:      setSpotFallOffAngle( angle ) -> 1 = Success, 0 = Fail
        Description: When the active emission type is 'EMISSION_LOBE_SPOTLIGHT', used to set the
                     falloff angle of the spotlight. It works only when no texture is loaded.
        """
        return _pymaxwell5.CmaterialEmitter_setSpotFallOffAngle(self, angle)


    def getSpotFallOffAngle(self):
        """
        Method:      getSpotFallOffAngle() -> (angle,ok)
        Description: When the active emission type is 'EMISSION_LOBE_SPOTLIGHT', used to set the
                     falloff angle of the spotlight. It works only when no texture is loaded.
        """
        return _pymaxwell5.CmaterialEmitter_getSpotFallOffAngle(self)


    def setSpotFallOffType(self, type):
        """
        Method:      setSpotFallOffType( bool ) -> 1 = Success, 0 = Fail
        Description: When the active emission type is EMISSION_LOBE_SPOTLIGHT, used to set the
                     falloff type.
        """
        return _pymaxwell5.CmaterialEmitter_setSpotFallOffType(self, type)


    def getSpotFallOffType(self):
        """
        Method:      getSpotFallOffType() -> (type,ok)
        Description: When the active emission type is EMISSION_LOBE_SPOTLIGHT, used to get the
                     falloff type.
        """
        return _pymaxwell5.CmaterialEmitter_getSpotFallOffType(self)


    def setSpotBlur(self, blur):
        """
        Method:      setSpotFallOffType( bool ) -> 1 = Success, 0 = Fail
        Description: When the active emission type is EMISSION_LOBE_SPOTLIGHT, used to set the
                     amount of blur.Parameter:   blur -> default 1.0, range (0.1-10).
        """
        return _pymaxwell5.CmaterialEmitter_setSpotBlur(self, blur)


    def getSpotBlur(self):
        """
        Method:      getSpotBlur() -> (blur,ok)
        Description: When the active emission type is EMISSION_LOBE_SPOTLIGHT, used to get the
                     amount of blur.
        """
        return _pymaxwell5.CmaterialEmitter_getSpotBlur(self)


    def setSpotType(self, spotType):
        """
        Method:      setSpotType( type ) -> 1 = Success, 0 = Fail
        Description: When the active emission type is EMISSION_LOBE_SPOTLIGHT, used to set
                     the spot type. For internal use only, plugins should not use this
                     parameter by default.
        Parameter:   spotType -> default 0, range (0-255).
        """
        return _pymaxwell5.CmaterialEmitter_setSpotType(self, spotType)


    def getSpotType(self):
        """
        Method:      getSpotType( type ) -> (type,ok)
        Description: When the active emission type is EMISSION_LOBE_SPOTLIGHT, used to get
                     the spot type. For internal use only, plugins should not use this
                     parameter by default.
        Parameter:   spotType -> default 0, range (0-255).
        """
        return _pymaxwell5.CmaterialEmitter_getSpotType(self)


    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the CmaterialEmitter was initialized
        """
        return _pymaxwell5.CmaterialEmitter_isNull(self)

    __swig_destroy__ = _pymaxwell5.delete_CmaterialEmitter
CmaterialEmitter.setGroupNameForMultilight = new_instancemethod(_pymaxwell5.CmaterialEmitter_setGroupNameForMultilight, None, CmaterialEmitter)
CmaterialEmitter.getGroupNameForMultilight = new_instancemethod(_pymaxwell5.CmaterialEmitter_getGroupNameForMultilight, None, CmaterialEmitter)
CmaterialEmitter.setState = new_instancemethod(_pymaxwell5.CmaterialEmitter_setState, None, CmaterialEmitter)
CmaterialEmitter.getState = new_instancemethod(_pymaxwell5.CmaterialEmitter_getState, None, CmaterialEmitter)
CmaterialEmitter.setPair = new_instancemethod(_pymaxwell5.CmaterialEmitter_setPair, None, CmaterialEmitter)
CmaterialEmitter.getPair = new_instancemethod(_pymaxwell5.CmaterialEmitter_getPair, None, CmaterialEmitter)
CmaterialEmitter.setActivePair = new_instancemethod(_pymaxwell5.CmaterialEmitter_setActivePair, None, CmaterialEmitter)
CmaterialEmitter.getActivePair = new_instancemethod(_pymaxwell5.CmaterialEmitter_getActivePair, None, CmaterialEmitter)
CmaterialEmitter.setTemperature = new_instancemethod(_pymaxwell5.CmaterialEmitter_setTemperature, None, CmaterialEmitter)
CmaterialEmitter.getTemperature = new_instancemethod(_pymaxwell5.CmaterialEmitter_getTemperature, None, CmaterialEmitter)
CmaterialEmitter.setMXI = new_instancemethod(_pymaxwell5.CmaterialEmitter_setMXI, None, CmaterialEmitter)
CmaterialEmitter.getMXI = new_instancemethod(_pymaxwell5.CmaterialEmitter_getMXI, None, CmaterialEmitter)
CmaterialEmitter.setActiveEmissionType = new_instancemethod(_pymaxwell5.CmaterialEmitter_setActiveEmissionType, None, CmaterialEmitter)
CmaterialEmitter.getActiveEmissionType = new_instancemethod(_pymaxwell5.CmaterialEmitter_getActiveEmissionType, None, CmaterialEmitter)
CmaterialEmitter.setLobeType = new_instancemethod(_pymaxwell5.CmaterialEmitter_setLobeType, None, CmaterialEmitter)
CmaterialEmitter.getLobeType = new_instancemethod(_pymaxwell5.CmaterialEmitter_getLobeType, None, CmaterialEmitter)
CmaterialEmitter.setIESLobeIntensity = new_instancemethod(_pymaxwell5.CmaterialEmitter_setIESLobeIntensity, None, CmaterialEmitter)
CmaterialEmitter.getIESLobeIntensity = new_instancemethod(_pymaxwell5.CmaterialEmitter_getIESLobeIntensity, None, CmaterialEmitter)
CmaterialEmitter.setLobeIES = new_instancemethod(_pymaxwell5.CmaterialEmitter_setLobeIES, None, CmaterialEmitter)
CmaterialEmitter.getLobeIES = new_instancemethod(_pymaxwell5.CmaterialEmitter_getLobeIES, None, CmaterialEmitter)
CmaterialEmitter.setLobeImageProjectedMap = new_instancemethod(_pymaxwell5.CmaterialEmitter_setLobeImageProjectedMap, None, CmaterialEmitter)
CmaterialEmitter.getLobeImageProjectedMap = new_instancemethod(_pymaxwell5.CmaterialEmitter_getLobeImageProjectedMap, None, CmaterialEmitter)
CmaterialEmitter.setSpotConeAngle = new_instancemethod(_pymaxwell5.CmaterialEmitter_setSpotConeAngle, None, CmaterialEmitter)
CmaterialEmitter.getSpotConeAngle = new_instancemethod(_pymaxwell5.CmaterialEmitter_getSpotConeAngle, None, CmaterialEmitter)
CmaterialEmitter.setSpotFallOffAngle = new_instancemethod(_pymaxwell5.CmaterialEmitter_setSpotFallOffAngle, None, CmaterialEmitter)
CmaterialEmitter.getSpotFallOffAngle = new_instancemethod(_pymaxwell5.CmaterialEmitter_getSpotFallOffAngle, None, CmaterialEmitter)
CmaterialEmitter.setSpotFallOffType = new_instancemethod(_pymaxwell5.CmaterialEmitter_setSpotFallOffType, None, CmaterialEmitter)
CmaterialEmitter.getSpotFallOffType = new_instancemethod(_pymaxwell5.CmaterialEmitter_getSpotFallOffType, None, CmaterialEmitter)
CmaterialEmitter.setSpotBlur = new_instancemethod(_pymaxwell5.CmaterialEmitter_setSpotBlur, None, CmaterialEmitter)
CmaterialEmitter.getSpotBlur = new_instancemethod(_pymaxwell5.CmaterialEmitter_getSpotBlur, None, CmaterialEmitter)
CmaterialEmitter.setSpotType = new_instancemethod(_pymaxwell5.CmaterialEmitter_setSpotType, None, CmaterialEmitter)
CmaterialEmitter.getSpotType = new_instancemethod(_pymaxwell5.CmaterialEmitter_getSpotType, None, CmaterialEmitter)
CmaterialEmitter.isNull = new_instancemethod(_pymaxwell5.CmaterialEmitter_isNull, None, CmaterialEmitter)
CmaterialEmitter_swigregister = _pymaxwell5.CmaterialEmitter_swigregister
CmaterialEmitter_swigregister(CmaterialEmitter)

class Creflectance(object):
    """
    Class Creflectance

      Defines the reflectance/transmittance/IOR of a bsdf or coating.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setActiveIorMode(self, complex):
        """
        Method:      setActiveIorMode( complex ) -> 1 = Success, 0 = Fail
        Description: Sets if the active mode is CUSTOM (complex = 0)
                     or measured (complex = 1, uses a complex ior file).
        """
        return _pymaxwell5.Creflectance_setActiveIorMode(self, complex)


    def getActiveIorMode(self):
        """
        Method:      getActiveIorMode() -> (int,ok)
        Description: Gets the active mode (CUSTOM = 0, measured = 1).
        """
        return _pymaxwell5.Creflectance_getActiveIorMode(self)


    def setComplexIor(self, pFileName):
        """
        Method:      setComplexIor( filename ) -> 1 = Sucess, 0 = Fail
        Description: Sets the complex ior file used when the Active IOR mode is 1 (complex mode).
        """
        return _pymaxwell5.Creflectance_setComplexIor(self, pFileName)


    def getComplexIor(self):
        """
        Method:      getComplexIor() -> filename
        Description: Gets the complex ior file used when the Active IOR mode is 1 (complex mode).
        """
        return _pymaxwell5.Creflectance_getComplexIor(self)


    def setAttribute(self, attrName, attr):
        """
        Method:      setAttribute( name, Cattribute ) -> 1 = Success, 0 = Fail
        Parameter:   name = 'color.tangential', 'color', 'transmittance.color', 'scattering'.
        Parameter:   Cattribute = attr.activeType = TYPE_RGB, TYPE_VALUE, TYPE_BITMAP.
        Example code:

          layer = material.addLayer();
          bsdf = layer.addBSDF();
          layer.setName( 'layer' );
          attr = Cattribute();
          reflectance = bsdf.getReflectance();
          # Set the reflectance color as RGB
          color = Crgb();
          color.assign( 1.0, 1.0, 1.0 );
          attr.activeType = TYPE_RGB;
          attr.rgb.assign( color );
          reflectance.setAttribute( 'color', attr );
          #Set the reflectance as a texture
          attr.pFileName = path;
          attr.uvwChannel = 0;
          attr.uIsTiled = ...;
          reflectance.setAttribute( 'color', attr );
        """
        return _pymaxwell5.Creflectance_setAttribute(self, attrName, attr)


    def getAttribute(self, attrName):
        """
        Method:      getAttribute( name ) -> (Cattribute,ok)
        Parameter:   ID = 'color.tangential', 'color', 'transmittance.color', 'scattering'.
        """
        return _pymaxwell5.Creflectance_getAttribute(self, attrName)


    def setAbsorptionDistance(self, distanceUnits, distance):
        """
        Method:      setAbsorptionDistance( TransmittanceDistance, distance ) -> 1 = Success, 0 = Fail
        Parameter:   TransmittanceDistance = DISTANCE_NANOMETERS, DISTANCE_MICRONS,
                      DISTANCE_MILLIMETERS, DISTANCE_METERS, DISTANCE_CENTIMETERS or
                      DISTANCE_DECIMETERS.
        """
        return _pymaxwell5.Creflectance_setAbsorptionDistance(self, distanceUnits, distance)


    def getAbsorptionDistance(self):
        """
        Method:      getAbsorptionDistance() -> (TransmittanceDistance,distance)
        Parameter:   TransmittanceDistance = DISTANCE_NANOMETERS, DISTANCE_MICRONS,
                      DISTANCE_MILLIMETERS, DISTANCE_METERS, DISTANCE_CENTIMETERS or
                      DISTANCE_DECIMETERS.
        """
        return _pymaxwell5.Creflectance_getAbsorptionDistance(self)


    def setScatteringParameters(self, scatteringCoefficient, asymmetryFactor, useThickness):
        """
        Method:      setScatteringParameters( scatteringCoeffeicient, asymmetryFactor,
                                              bool useThickness) -> 1 = Success, 0 = Fail
        Description: Sets the scattering parameters.
        """
        return _pymaxwell5.Creflectance_setScatteringParameters(self, scatteringCoefficient, asymmetryFactor, useThickness)


    def getScatteringParameters(self):
        """
        Method:      getScatteringParameters() -> (scatteringCoef,asymmetryFactor,useThickness,ok)
        Description: Gets the scattering parameters.
        """
        return _pymaxwell5.Creflectance_getScatteringParameters(self)


    def setScatteringThickness(self, attr):
        """
        Method:      setScatteringThickness( Cmap ) -> 1 = Success, 0 = Fail
        Description: Sets the thickness used for the Single Side Subsurface Scattering.
        """
        return _pymaxwell5.Creflectance_setScatteringThickness(self, attr)


    def getScatteringThickness(self):
        """
        Method:      getScatteringThickness() -> (Cattribute,ok)
        Description: Gets the thickness used for the Single Side Subsurface Scattering.
        """
        return _pymaxwell5.Creflectance_getScatteringThickness(self)


    def setScatteringThicknessRange(self, min, max):
        """
        Method:      setScatteringThicknessRange( min, max ) -> 1 = Success, 0 = Fail
        Description: Sets the thickness range used for the Single Side Subsurface Scattering.
        """
        return _pymaxwell5.Creflectance_setScatteringThicknessRange(self, min, max)


    def getScatteringThicknessRange(self):
        """
        Method:      getScatteringThicknessRange() -> (min,max,ok)
        Description: Gets the thickness range used for the Single Side Subsurface Scattering.
        """
        return _pymaxwell5.Creflectance_getScatteringThicknessRange(self)


    def setIOR(self, nd, abbe):
        """
        Method:      setIOR( nd, abbe ) -> 1 = Success, 0 = Fail
        Description: Gets the IOR values.
        """
        return _pymaxwell5.Creflectance_setIOR(self, nd, abbe)


    def getIOR(self):
        """
        Method:      getIOR() -> (nd,abbe,ok)
        Description: Gets the IOR values.
        """
        return _pymaxwell5.Creflectance_getIOR(self)


    def setConductor(self, k):
        """
        Method:      setConductor( k ) -> 1 = Success, 0 = Fail
        Description: k > 0 means it's a conductor.
        """
        return _pymaxwell5.Creflectance_setConductor(self, k)


    def getConductor(self):
        """
        Method:      getConductor() -> (k,ok)
        Description: k > 0 means it's a conductor.
        """
        return _pymaxwell5.Creflectance_getConductor(self)


    def enableForceFresnel(self, enabled):
        """
        Method:      enableForceFresnel( bool ) -> 1 = Success, 0 = Fail
        Description: Set the flag to force the fresnel on/off, using only
                     the chromaticism of the refl 90 and ignoring its luminescence.
        """
        return _pymaxwell5.Creflectance_enableForceFresnel(self, enabled)


    def getForceFresnel(self):
        """
        Method:      getForceFresnel() -> (bool,ok)
        Description: Get whether the fresnel is enabled.
        """
        return _pymaxwell5.Creflectance_getForceFresnel(self)


    def setFresnelCustom(self, angleStrength, roughnessStrength, isEnabled):
        """
        Method:      setFresnelCustom( angleStrength, rounghnessStrenght, bool isEnabled )                               -> 1 = Success, 0 = Fail
        Description: Enables/Disables the custom fresnel values (old R2 controls).
        """
        return _pymaxwell5.Creflectance_setFresnelCustom(self, angleStrength, roughnessStrength, isEnabled)


    def getFresnelCustom(self):
        """
        Method:      getFresnelCustom() -> (angleStrenght,roughnessStrenght,isEnabled,ok)
        Description: Enables/Disables the custom fresnel values (old R2 controls).
        """
        return _pymaxwell5.Creflectance_getFresnelCustom(self)


    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the Creflectance was initialized.
        """
        return _pymaxwell5.Creflectance_isNull(self)

    __swig_destroy__ = _pymaxwell5.delete_Creflectance
Creflectance.setActiveIorMode = new_instancemethod(_pymaxwell5.Creflectance_setActiveIorMode, None, Creflectance)
Creflectance.getActiveIorMode = new_instancemethod(_pymaxwell5.Creflectance_getActiveIorMode, None, Creflectance)
Creflectance.setComplexIor = new_instancemethod(_pymaxwell5.Creflectance_setComplexIor, None, Creflectance)
Creflectance.getComplexIor = new_instancemethod(_pymaxwell5.Creflectance_getComplexIor, None, Creflectance)
Creflectance.setAttribute = new_instancemethod(_pymaxwell5.Creflectance_setAttribute, None, Creflectance)
Creflectance.getAttribute = new_instancemethod(_pymaxwell5.Creflectance_getAttribute, None, Creflectance)
Creflectance.setAbsorptionDistance = new_instancemethod(_pymaxwell5.Creflectance_setAbsorptionDistance, None, Creflectance)
Creflectance.getAbsorptionDistance = new_instancemethod(_pymaxwell5.Creflectance_getAbsorptionDistance, None, Creflectance)
Creflectance.setScatteringParameters = new_instancemethod(_pymaxwell5.Creflectance_setScatteringParameters, None, Creflectance)
Creflectance.getScatteringParameters = new_instancemethod(_pymaxwell5.Creflectance_getScatteringParameters, None, Creflectance)
Creflectance.setScatteringThickness = new_instancemethod(_pymaxwell5.Creflectance_setScatteringThickness, None, Creflectance)
Creflectance.getScatteringThickness = new_instancemethod(_pymaxwell5.Creflectance_getScatteringThickness, None, Creflectance)
Creflectance.setScatteringThicknessRange = new_instancemethod(_pymaxwell5.Creflectance_setScatteringThicknessRange, None, Creflectance)
Creflectance.getScatteringThicknessRange = new_instancemethod(_pymaxwell5.Creflectance_getScatteringThicknessRange, None, Creflectance)
Creflectance.setIOR = new_instancemethod(_pymaxwell5.Creflectance_setIOR, None, Creflectance)
Creflectance.getIOR = new_instancemethod(_pymaxwell5.Creflectance_getIOR, None, Creflectance)
Creflectance.setConductor = new_instancemethod(_pymaxwell5.Creflectance_setConductor, None, Creflectance)
Creflectance.getConductor = new_instancemethod(_pymaxwell5.Creflectance_getConductor, None, Creflectance)
Creflectance.enableForceFresnel = new_instancemethod(_pymaxwell5.Creflectance_enableForceFresnel, None, Creflectance)
Creflectance.getForceFresnel = new_instancemethod(_pymaxwell5.Creflectance_getForceFresnel, None, Creflectance)
Creflectance.setFresnelCustom = new_instancemethod(_pymaxwell5.Creflectance_setFresnelCustom, None, Creflectance)
Creflectance.getFresnelCustom = new_instancemethod(_pymaxwell5.Creflectance_getFresnelCustom, None, Creflectance)
Creflectance.isNull = new_instancemethod(_pymaxwell5.Creflectance_isNull, None, Creflectance)
Creflectance_swigregister = _pymaxwell5.Creflectance_swigregister
Creflectance_swigregister(Creflectance)

class Ccoating(object):
    """Proxy of C++ Ccoating class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setName(self, pName):
        """
        Method:      setName( name ) -> 1 = Success, 0 = Fail
        Description: Sets the name of the coating.
        """
        return _pymaxwell5.Ccoating_setName(self, pName)


    def getName(self):
        """
        Method:      getName() -> (string,ok)
        Description: Gets the name of the coating.
        """
        return _pymaxwell5.Ccoating_getName(self)


    def setState(self, enabled):
        """
        Method:      setState( bool ) -> 1 = Success, 0 = Fail
        Description: To switch on/off the coating.
        """
        return _pymaxwell5.Ccoating_setState(self, enabled)


    def getState(self):
        """
        Method:      getState() -> (bool,ok)
        Description: Gets whether the coating is enabled.
        """
        return _pymaxwell5.Ccoating_getState(self)


    def getReflectance(self):
        """
        Method:      getReflectance() -> Creflectance [reference]
        Description: Returns the reflectance of this coating
        """
        return _pymaxwell5.Ccoating_getReflectance(self)


    def setThickness(self, attr):
        """
        Method:      setThickness( Cattribute ) -> 1 = Success, 0 = Fail
        Description: Sets the thickness of the coating.
        """
        return _pymaxwell5.Ccoating_setThickness(self, attr)


    def getThickness(self):
        """
        Method:      getThickness() -> (Cattribute,ok)
        Description: Gets the thickness of the coating.
        """
        return _pymaxwell5.Ccoating_getThickness(self)


    def setThicknessRange(self, min, max):
        """
        Method:      setThicknessRange( min, max ) -> 1 = Success, 0 = Fail
        Description: Sets the thickness range of the coating.
        """
        return _pymaxwell5.Ccoating_setThicknessRange(self, min, max)


    def getThicknessRange(self):
        """
        Method:      getThicknessRange() -> (min,max,ok)
        Description: Gets the thickness range of the coating.
        """
        return _pymaxwell5.Ccoating_getThicknessRange(self)


    def setAttribute(self, name, attr):
        """
        Method:      setAttribute(name,Cattribute)
        Description: Function provided for convenience to provide an easy way for setting any parameter.
        Parameter:   name = 'thickness' is the only value supported.
        """
        return _pymaxwell5.Ccoating_setAttribute(self, name, attr)


    def getAttribute(self, name):
        """
        Method:      getAttribute( name ) -> (Cattribute,ok)
        Description: Function provided for convenience to provide an easy way for setting any parameter.
        Parameter:   name = 'thickness' is the only value supported.
        """
        return _pymaxwell5.Ccoating_getAttribute(self, name)


    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the Ccoating was initialized.
        """
        return _pymaxwell5.Ccoating_isNull(self)


    def __str__(self):
        """__str__(Ccoating self) -> char *"""
        return _pymaxwell5.Ccoating___str__(self)

    __swig_destroy__ = _pymaxwell5.delete_Ccoating
Ccoating.setName = new_instancemethod(_pymaxwell5.Ccoating_setName, None, Ccoating)
Ccoating.getName = new_instancemethod(_pymaxwell5.Ccoating_getName, None, Ccoating)
Ccoating.setState = new_instancemethod(_pymaxwell5.Ccoating_setState, None, Ccoating)
Ccoating.getState = new_instancemethod(_pymaxwell5.Ccoating_getState, None, Ccoating)
Ccoating.getReflectance = new_instancemethod(_pymaxwell5.Ccoating_getReflectance, None, Ccoating)
Ccoating.setThickness = new_instancemethod(_pymaxwell5.Ccoating_setThickness, None, Ccoating)
Ccoating.getThickness = new_instancemethod(_pymaxwell5.Ccoating_getThickness, None, Ccoating)
Ccoating.setThicknessRange = new_instancemethod(_pymaxwell5.Ccoating_setThicknessRange, None, Ccoating)
Ccoating.getThicknessRange = new_instancemethod(_pymaxwell5.Ccoating_getThicknessRange, None, Ccoating)
Ccoating.setAttribute = new_instancemethod(_pymaxwell5.Ccoating_setAttribute, None, Ccoating)
Ccoating.getAttribute = new_instancemethod(_pymaxwell5.Ccoating_getAttribute, None, Ccoating)
Ccoating.isNull = new_instancemethod(_pymaxwell5.Ccoating_isNull, None, Ccoating)
Ccoating.__str__ = new_instancemethod(_pymaxwell5.Ccoating___str__, None, Ccoating)
Ccoating_swigregister = _pymaxwell5.Ccoating_swigregister
Ccoating_swigregister(Ccoating)

class Cbsdf(object):
    """Proxy of C++ Cbsdf class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setName(self, pName):
        """
        Method:      setName( name ) -> 1 = Success, 0 = Fail
        Description: To set the name of the BSDF.
        """
        return _pymaxwell5.Cbsdf_setName(self, pName)


    def getName(self):
        """
        Method:      getName() -> name
        Description: To get the name of the BSDF.
        """
        return _pymaxwell5.Cbsdf_getName(self)


    def setState(self, enabled):
        """
        Method:      setState( bool ) -> 1 = Success, 0 = Fail
        Description: To switch on/off the BSDF.
        """
        return _pymaxwell5.Cbsdf_setState(self, enabled)


    def getState(self):
        """
        Method:      getState() -> (bool,ok)
        Description: Checks whether the BSDF is enabled.
        """
        return _pymaxwell5.Cbsdf_getState(self)


    def setWeight(self, attr):
        """
        Method:      setWeight( Cattribute ) -> 1 = Success, 0 = Fail
        Description: Sets the weight of this BSDF in its parent layer.
        Parameter:   Cattribute = Cattribute.activeType must be TYPE_VALUE or TYPE_BITMAP.
        """
        return _pymaxwell5.Cbsdf_setWeight(self, attr)


    def getWeight(self):
        """
        Method:      getWeight() -> (Cattribute,ok)
        Description: Gets the weight of this BSDF in its parent layer.
        """
        return _pymaxwell5.Cbsdf_getWeight(self)


    def getReflectance(self):
        """
        Method:      getReflectance() -> Creflectance [reference]
        Description: Returns the reflectance of this BSDF.
        """
        return _pymaxwell5.Cbsdf_getReflectance(self)


    def setAttribute(self, attrName, attr):
        """
        Method:      setAttribute( name, Cattribute ) -> 1 = Success, 0 = Fail
        Description: Sets the value/texture of the given parameter.
        Parameter:   name -> 'roughness', 'anisotropy', 'bump', 'angle'.
        Parameter:   Cattribute -> attr.activeType = TYPE_VALUE, TIPE_BITMAP.
        Example code:

          layer = material.addLayer();
          bsdf = layer.addBSDF();
          attr = Cmap();
          attr.activeType = MAP_TYPE_VALUE; #(roughness will use a numeric value instead of a texture)
          attr.value = 77.0;
          bsdf.setColor( 'roughness', attr );
        """
        return _pymaxwell5.Cbsdf_setAttribute(self, attrName, attr)


    def getAttribute(self, attrName):
        """
        Method:      getAttribute( name ) -> (Cattribute,ok)
        Description: Gets the value/texture of the given parameter.
        Parameter:   name -> 'roughness', 'anisotropy', 'bump', 'angle'.
        """
        return _pymaxwell5.Cbsdf_getAttribute(self, attrName)


    def setNormalMapState(self, enabled):
        """
        Method:      setNormalMapState( bool ) -> 1 = Success, 0 = Fail
        Description: Enables/disables  normal mapping for the bump parameter of this BSDF.

        """
        return _pymaxwell5.Cbsdf_setNormalMapState(self, enabled)


    def getNormalMapState(self):
        """
        Method:      getNormalMapState() -> (bool,ok)
        Description: Checks whether normal mapping is activated.

        """
        return _pymaxwell5.Cbsdf_getNormalMapState(self)


    def addCoating(self):
        """
        Method:      addCoating() -> Ccoating [reference]
        Description: Add a new coating to this BSDF.

        """
        return _pymaxwell5.Cbsdf_addCoating(self)


    def getCoating(self, index):
        """
        Method:      getCoating( index ) -> Ccoating [reference]
        Description: Gets a coating by index in the BSDF.

        """
        return _pymaxwell5.Cbsdf_getCoating(self, index)


    def getNumCoatings(self):
        """
        Method:      getNumCoatings() -> (int,ok)
        Description: Number of coatings in the BSDF.
        """
        return _pymaxwell5.Cbsdf_getNumCoatings(self)


    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the Cbsdf was initialized.
        """
        return _pymaxwell5.Cbsdf_isNull(self)


    def __str__(self):
        """__str__(Cbsdf self) -> char *"""
        return _pymaxwell5.Cbsdf___str__(self)

    __swig_destroy__ = _pymaxwell5.delete_Cbsdf
Cbsdf.setName = new_instancemethod(_pymaxwell5.Cbsdf_setName, None, Cbsdf)
Cbsdf.getName = new_instancemethod(_pymaxwell5.Cbsdf_getName, None, Cbsdf)
Cbsdf.setState = new_instancemethod(_pymaxwell5.Cbsdf_setState, None, Cbsdf)
Cbsdf.getState = new_instancemethod(_pymaxwell5.Cbsdf_getState, None, Cbsdf)
Cbsdf.setWeight = new_instancemethod(_pymaxwell5.Cbsdf_setWeight, None, Cbsdf)
Cbsdf.getWeight = new_instancemethod(_pymaxwell5.Cbsdf_getWeight, None, Cbsdf)
Cbsdf.getReflectance = new_instancemethod(_pymaxwell5.Cbsdf_getReflectance, None, Cbsdf)
Cbsdf.setAttribute = new_instancemethod(_pymaxwell5.Cbsdf_setAttribute, None, Cbsdf)
Cbsdf.getAttribute = new_instancemethod(_pymaxwell5.Cbsdf_getAttribute, None, Cbsdf)
Cbsdf.setNormalMapState = new_instancemethod(_pymaxwell5.Cbsdf_setNormalMapState, None, Cbsdf)
Cbsdf.getNormalMapState = new_instancemethod(_pymaxwell5.Cbsdf_getNormalMapState, None, Cbsdf)
Cbsdf.addCoating = new_instancemethod(_pymaxwell5.Cbsdf_addCoating, None, Cbsdf)
Cbsdf.getCoating = new_instancemethod(_pymaxwell5.Cbsdf_getCoating, None, Cbsdf)
Cbsdf.getNumCoatings = new_instancemethod(_pymaxwell5.Cbsdf_getNumCoatings, None, Cbsdf)
Cbsdf.isNull = new_instancemethod(_pymaxwell5.Cbsdf_isNull, None, Cbsdf)
Cbsdf.__str__ = new_instancemethod(_pymaxwell5.Cbsdf___str__, None, Cbsdf)
Cbsdf_swigregister = _pymaxwell5.Cbsdf_swigregister
Cbsdf_swigregister(Cbsdf)

class CmaxwellCameraIterator(object):
    """
    Class CmaxwellCameraIterator

      Class used to parse a list of cameras.
      Example code:

        scene = Cmaxwell(mwcallback_cb);
        scene.readMXS('scene.mxs');
        it = CmaxwellCameraIterator();
        camera = it.first(scene);
        while camera.isNull() == False:
          # Do something with the camera...
          camera = it.next();
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CmaxwellCameraIterator self) -> CmaxwellCameraIterator"""
        _pymaxwell5.CmaxwellCameraIterator_swiginit(self, _pymaxwell5.new_CmaxwellCameraIterator())
    __swig_destroy__ = _pymaxwell5.delete_CmaxwellCameraIterator

    def first(self, pMaxwell):
        """first(CmaxwellCameraIterator self, Cmaxwell pMaxwell) -> CmaxwellCamera"""
        return _pymaxwell5.CmaxwellCameraIterator_first(self, pMaxwell)


    def next(self):
        """next(CmaxwellCameraIterator self) -> CmaxwellCamera"""
        return _pymaxwell5.CmaxwellCameraIterator_next(self)

CmaxwellCameraIterator.first = new_instancemethod(_pymaxwell5.CmaxwellCameraIterator_first, None, CmaxwellCameraIterator)
CmaxwellCameraIterator.next = new_instancemethod(_pymaxwell5.CmaxwellCameraIterator_next, None, CmaxwellCameraIterator)
CmaxwellCameraIterator_swigregister = _pymaxwell5.CmaxwellCameraIterator_swigregister
CmaxwellCameraIterator_swigregister(CmaxwellCameraIterator)

class CmaxwellCamera(object):
    """
    Class CmaxwellCamera

      Class that contains the Maxwell camera description.
      Example code:

        scene = Cmaxwell(mwcallback_cb);
        scene.readMXS('scene.mxs');
        it = CmaxwellCameraIterator();
        camera = it.first(scene);
        while camera.isNull() == False:
          # Do something with the camera...
          camera = it.next();
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def setStep(self, iStep, origin, focalPoint, up, focalLength, fStop, stepTime, focalLengthNeedCorrection=1):
        """
        Method:      setStep( step, Cvector origin, Cvector focalPoint, Cvector, up,
                              focalLenght, fStop, stepTime, focalLengthNeedCorrection = 1 )
                     -> 1 = Success, 0 = Fail
        Description: Sets the camera parameters that can change in an animation. The static
                     parameters that are set in Cmaxwell.addCamera cannot be animated
                     (resolution, film..).
        Method:      setStep( step, Cvector origin, Cvector focalPoint, Cvector, up,
                              focalLenght, fStop, stepTime, focalLengthNeedCorrection = 1 )
                     -> 1 = Success, 0 = Fail
        Description: Sets the camera parameters that can change in an animation. The static
                     parameters that are set in Cmaxwell.addCamera cannot be animated
                     (resolution, film..).
        """
        return _pymaxwell5.CmaxwellCamera_setStep(self, iStep, origin, focalPoint, up, focalLength, fStop, stepTime, focalLengthNeedCorrection)


    def setStep2(self, iStep, base, targetDistance, focalLength, fStop, stepTime, focalLengthNeedCorrection=1):
        """
        Method:      setStep2( step, Cbase base, targetDistance, 
                              focalLenght, fStop, stepTime, focalLengthNeedCorrection = 1 )
                     -> 1 = Success, 0 = Fail
        Description: Sets the camera parameters that can change in an animation. The static
                     parameters that are set in Cmaxwell.addCamera cannot be animated
                     (resolution, film..).
        Method:      setStep2( step, Cbase base, targetDistance, 
                              focalLenght, fStop, stepTime, focalLengthNeedCorrection = 1 )
                     -> 1 = Success, 0 = Fail
        Description: Sets the camera parameters that can change in an animation. The static
                     parameters that are set in Cmaxwell.addCamera cannot be animated
                     (resolution, film..).
        """
        return _pymaxwell5.CmaxwellCamera_setStep2(self, iStep, base, targetDistance, focalLength, fStop, stepTime, focalLengthNeedCorrection)


    def getStep2(self, iStep):
        """
        Method:      getStep( step )
                     -> (origin,xAxis,yAxis,xAxis,targetDistance,focalLength,fStop,stepTime,ok)
        Description: Gets the camera parameters that can change in an animation. The static
                     parameters that are set in Cmaxwell.addCamera can not be animated
                     (resolution, film..).
        """
        return _pymaxwell5.CmaxwellCamera_getStep2(self, iStep)


    def getStep(self, iStep):
        """
        Method:      getStep2( step )
                     -> (origin,focalPoint,up,focalLength,fStop,stepTime,ok)
        Description: Gets the camera parameters that can change in an animation. The static
                     parameters that are set in Cmaxwell.addCamera can not be animated
                     (resolution, film..).
        """
        return _pymaxwell5.CmaxwellCamera_getStep(self, iStep)


    def getValues(self):
        """
        Method:      getValues()
                     -> (name, nSteps, shutter, filmWidth, filmHeight, iso, pDiaphragmType,
                         angle, nBlades, fps, xRes, yRes, pixelAspect, lensType)
        Description: Gets the camera parameters (dict) that cannot change in an animation.
        Parameter:   lensType -> TYPE_THIN_LENS, TYPE_PINHOLE_LENS, TYPE_ORTHO_LENS, TYPE_FISHEYE_LENS,
                      TYPE_SPHERICAL_LENS, TYPE_CYLINDRICAL_LENS or TYPE_EXTENSION_LENS
        """
        return _pymaxwell5.CmaxwellCamera_getValues(self)


    def setName(self, pName):
        """
        Method:      setName( name ) -> 1 = Success, 0 = Fail
        Description: Sets camera name.
        """
        return _pymaxwell5.CmaxwellCamera_setName(self, pName)


    def getName(self):
        """
        Method:      getName() -> name
        Description: Gets camera name.
        """
        return _pymaxwell5.CmaxwellCamera_getName(self)


    def setResolution(self, xRes, yRes):
        """
        Method:      setResolution( x, y ) -> 1 = Success, 0 = Fail
        Description: Sets camera resolution.
        """
        return _pymaxwell5.CmaxwellCamera_setResolution(self, xRes, yRes)


    def getResolution(self):
        """
        Method:      getResolution() -> (x,y,ok)
        Description: Gets camera resolution.
        """
        return _pymaxwell5.CmaxwellCamera_getResolution(self)


    def setPixelAspect(self, pixelAspect):
        """
        Method:      setPixelAspect( pixelAspect ) -> 1 = Success, 0 = Fail
        Description: Sets camera pixel aspect ratio ( 0.01 - 100.0 ) Default = 1.0.
        """
        return _pymaxwell5.CmaxwellCamera_setPixelAspect(self, pixelAspect)


    def getPixelAspect(self):
        """
        Method:      getPixelAspect() -> (pixelAspect,ok)
        Description: Gets camera pixel aspect ratio ( 0.01 - 100.0 ) Default = 1.0.
        """
        return _pymaxwell5.CmaxwellCamera_getPixelAspect(self)


    def setShutter(self, shutter):
        """
        Method:      setShutter( shutter ) -> 1 = Success, 0 = Fail
        Description: Sets camera shutter (1/s) ( 0.01 - 10000.0 ) Default = 250.0.
        """
        return _pymaxwell5.CmaxwellCamera_setShutter(self, shutter)


    def getShutter(self):
        """
        Method:      getShutter() -> (shutter,ok)
        Description: Gets camera shutter (1/s) ( 0.01 - 10000.0 ) Default = 250.0.
        """
        return _pymaxwell5.CmaxwellCamera_getShutter(self)


    def setIso(self, iso):
        """
        Method:      setShutter( iso ) -> 1 = Success, 0 = Fail
        Description: Sets camera iso ( 1.0 - 10000.0 ) Default = 100.0.
        """
        return _pymaxwell5.CmaxwellCamera_setIso(self, iso)


    def getIso(self):
        """
        Method:      getIso() -> (iso,ok)
        Description: Gets camera iso ( 1.0 - 10000.0 ) Default = 100.0.
        """
        return _pymaxwell5.CmaxwellCamera_getIso(self)


    def setExposurePreset(self, preset):
        """
        Method:      setExposurePreset( preset ) -> 1 = Success, 0 = Fail
        Description: This parameter is not used by the render core but only in plug-ins and Studio.
                     ISO, Shutter and fStop values for each preset can be extracted using the
                     getExposurePresetValues method.
        """
        return _pymaxwell5.CmaxwellCamera_setExposurePreset(self, preset)


    def getExposurePreset(self):
        """
        Method:      getExposurePreset( preset ) -> 1 = Success, 0 = Fail
        Description: This parameter is not used by the render core but only in plug-ins and Studio.
                     ISO and Shutter and fStop values for each preset can be extracted using the
                     getExposurePresetValues method.
        """
        return _pymaxwell5.CmaxwellCamera_getExposurePreset(self)


    def getExposurePresetValues(preset):
        """
        Method:      setExposurePreset( preset ) -> (iso,shutter,fstop,ok)
        Description: Returns by reference ISO, Shutter and fStop values for a specific preset. Preset values
                     are only used in GUIs, the render engine uses ISO and Shutter only if preset is
                     EXPOSURE_CUSTOM or invalid the function returns 0, otherwise it returns 1.
        """
        return _pymaxwell5.CmaxwellCamera_getExposurePresetValues(preset)

    getExposurePresetValues = staticmethod(getExposurePresetValues)

    def setFilmSize(self, filmWidth, filmHeight):
        """
        Method:      setFilmSize( width, height ) -> 1 = Success, 0 = Fail
        Description: Sets camera film size ( 0.001 - 10000.0 meters ) Default = 0.035 x 0.024.
        """
        return _pymaxwell5.CmaxwellCamera_setFilmSize(self, filmWidth, filmHeight)


    def getFilmSize(self):
        """
        Method:      getFilmSize() -> (width,height,ok)
        Description: Gets camera film size ( 1.0 - 10000.0 ) Default = 0.035 x 0.024.
        """
        return _pymaxwell5.CmaxwellCamera_getFilmSize(self)


    def setDiaphragm(self, pDiaphragmType, angle, nBlades):
        """
        Method:      setDiaphragm( type, angle, nBlades ) -> 1 = Success, 0 = Fail
        Description: Sets camera diaphragm
        Parameter:   type = 'CIRCULAR', 'POLYGONAL'.
        """
        return _pymaxwell5.CmaxwellCamera_setDiaphragm(self, pDiaphragmType, angle, nBlades)


    def getDiaphragm(self):
        """
        Method:      getDiaphragm() -> (type,angle,nBlades,ok)
        Description: Gets camera diaphragm
        Parameter:   type = 'CIRCULAR' or 'POLYGONAL'.
        """
        return _pymaxwell5.CmaxwellCamera_getDiaphragm(self)


    def setFPS(self, fps):
        """
        Method:      setFPS( fps ) -> 1 = Success, 0 = Fail
        Description: Sets camera framerate ( 0.01 - 10000.0 ) Default = 24.0.
        """
        return _pymaxwell5.CmaxwellCamera_setFPS(self, fps)


    def getFPS(self):
        """
        Method:      getFPS() -> (fps,ok)
        Description: Gets camera framerate ( 0.01 - 10000.0 ) Default = 24.0.
        """
        return _pymaxwell5.CmaxwellCamera_getFPS(self)


    def setScreenRegion(self, x1, y1, x2, y2, pRegionType):
        """
        Method:      setScreenRegion( x1, y1, x2, y2, type ) -> 1 = Success, 0 = Fail
        Description: Defines a render region for the camera.
        Parameter:   x1, y1, x2, y2 edges of the region (in pixels).
        Parameter:   type = 'REGION', 'BLOW UP'.
        """
        return _pymaxwell5.CmaxwellCamera_setScreenRegion(self, x1, y1, x2, y2, pRegionType)


    def getScreenRegion(self):
        """
        Method:      getScreenRegion() -> (x1,y1,x2,y2,type,ok)
        Description: Gets the render region for the camera.
        Parameter:   x1, y1, x2, y2 edges of the region (in pixels).
        Parameter:   type = 'REGION', 'BLOW UP'.
        """
        return _pymaxwell5.CmaxwellCamera_getScreenRegion(self)


    def setCutPlanes(self, zNear, zFar, enabled):
        """
        Method:      setCutPlanes( zNear, zFar, bool enabled ) -> 1 = Success, 0 = Fail
        Description: Set cut planes of the camera ( 0.0 - 1e7 ) Default = 0.0.
        """
        return _pymaxwell5.CmaxwellCamera_setCutPlanes(self, zNear, zFar, enabled)


    def getCutPlanes(self):
        """
        Method:      getCutPlanes() -> (zNear,zFar,enabled,ok)
        Description: Get cut planes of the camera ( 0.0 - 1e7 ) Default = 0.0.
        """
        return _pymaxwell5.CmaxwellCamera_getCutPlanes(self)


    def setShiftLens(self, xShift, yShift):
        """
        Method:      setShiftLens( xShift, yShift ) -> 1 = Success, 0 = Fail
        Description: Set shift lens of the camera ( -100.0 - 100.0 ) Default = 0.0.
        """
        return _pymaxwell5.CmaxwellCamera_setShiftLens(self, xShift, yShift)


    def getShiftLens(self):
        """
        Method:      getShiftLens() -> (xShift,yShift,ok)
        Description: Get shift lens of the camera ( -100.0 - 100.0 ) Default = 0.0.
        """
        return _pymaxwell5.CmaxwellCamera_getShiftLens(self)


    def setLensType(self, type):
        """
        Method:      setLensType(LensType) -> 1 = Success, 0 = Fail
        Description: Set lens type.
        Parameter:   LensType -> TYPE_THIN_LENS, TYPE_PINHOLE_LENS, TYPE_ORTHO_LENS, TYPE_FISHEYE_LENS,
                      TYPE_SPHERICAL_LENS, TYPE_CYLINDRICAL_LENS or TYPE_EXTENSION_LENS.
        """
        return _pymaxwell5.CmaxwellCamera_setLensType(self, type)


    def getLensType(self):
        """
        Method:      getLensType() -> (LensType,ok)
        Description: Get lens type of the camera. See LensType enum.
                     Returns TYPE_THIN_LENS, TYPE_PINHOLE_LENS, TYPE_ORTHO_LENS, TYPE_FISHEYE_LENS,
                      TYPE_SPHERICAL_LENS, TYPE_CYLINDRICAL_LENS or TYPE_EXTENSION_LENS
        """
        return _pymaxwell5.CmaxwellCamera_getLensType(self)


    def setSphericalLensProperties(self, labmdaAperture):
        """
        Method:      setSphericalLensProperties(labmdaAperture) -> 1 = Success, 0 = Fail
        Description: Set spherical lens properties.
        Parameter:   labmdaAperture -> rads, PI by default.
        """
        return _pymaxwell5.CmaxwellCamera_setSphericalLensProperties(self, labmdaAperture)


    def getSphericalLensProperties(self):
        """
        Method:      getSphericalLensProperties() -> (labmdaAperture,ok)
        Description: Get spherical lens properties.
        Parameter:   labmdaAperture -> rads, PI by default.
        """
        return _pymaxwell5.CmaxwellCamera_getSphericalLensProperties(self)


    def setFishLensProperties(self, aperture):
        """
        Method:      setFishLensProperties(aperture) -> 1 = Success, 0 = Fail
        Description: Set fish lens properties.
        Parameter:   aperture -> rads, PI by default.
        """
        return _pymaxwell5.CmaxwellCamera_setFishLensProperties(self, aperture)


    def getFishLensProperties(self):
        """
        Method:      getFishLensProperties() -> (aperture,ok)
        Description: Get fish lens properties.
        Parameter:   aperture -> rads, PI by default.
        """
        return _pymaxwell5.CmaxwellCamera_getFishLensProperties(self)


    def setCylindricalLensProperties(self, aperture):
        """
        Method:      setCylindricalLensProperties(aperture) -> 1 = Success, 0 = Fail
        Description: Set cylindrical lens properties.
        Parameter:   aperture -> rads, 2*PI by default.
        """
        return _pymaxwell5.CmaxwellCamera_setCylindricalLensProperties(self, aperture)


    def getCylindricalLensProperties(self):
        """
        Method:      getCylindricalLensProperties() -> (aperture,ok)
        Description: Get cylindrical lens properties.
        Parameter:   aperture -> rads, 2*PI by default.
        """
        return _pymaxwell5.CmaxwellCamera_getCylindricalLensProperties(self)


    def setCustomBokeh(self, ratio, angle, enabled):
        """
        Method:      setCustomBokeh(ratio, angle, enabled) -> 1 = Success, 0 = Fail
        Description: Defines a custom bokeh
        Parameter:   ratio = aspect ratio (default: 1)
        Parameter:   angle: angle in radians
        Parameter:   enabled: sets the custom bokeh on/off
        """
        return _pymaxwell5.CmaxwellCamera_setCustomBokeh(self, ratio, angle, enabled)


    def getCustomBokeh(self):
        """
        Method:      getCustomBokeh() -> (ratio,angle,enabled,ok)
        Description: Gets custom bokeh parameters (tuple).
        Parameter:   ratio = aspect ratio (default: 1).
        Parameter:   angle: angle in radians.
        Parameter:   enabled: custom bokeh on/off.
        """
        return _pymaxwell5.CmaxwellCamera_getCustomBokeh(self)


    def setCameraResponsePreset(self, name):
        """
        Method:      setCameraResponsePreset() -> 1 = Success, 0 = Fail
        Description: Sets preset name. "Maxwell" by default.
        """
        return _pymaxwell5.CmaxwellCamera_setCameraResponsePreset(self, name)


    def getCameraResponsePreset(self):
        """
        Method:      getCameraResponsePreset() -> str
        Description: Gets preset name.
        """
        return _pymaxwell5.CmaxwellCamera_getCameraResponsePreset(self)


    def getCameraResponsePresetsList():
        """
        Method:      getCameraResponsePresetsList() -> (str[],ok)
        Description: Gets the available preset names.
        """
        return _pymaxwell5.CmaxwellCamera_getCameraResponsePresetsList()

    getCameraResponsePresetsList = staticmethod(getCameraResponsePresetsList)

    def setHide(self, hide):
        """
        Method:      setHide( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the hidden status of this camera (used only in Maxwell Studio).
        """
        return _pymaxwell5.CmaxwellCamera_setHide(self, hide)


    def isHide(self):
        """
        Method:      isHide() -> (bool,ok)
        Description: Gets the hidden status of this camera (used only in Maxwell Studio)
        """
        return _pymaxwell5.CmaxwellCamera_isHide(self)


    def setUuid(self, pUuid):
        """
        Method:      setUuid( id ) -> 1 = Success, 0 = Fail
        Description: Unique id that can be used for custom purposes.
        """
        return _pymaxwell5.CmaxwellCamera_setUuid(self, pUuid)


    def getUuid(self):
        """
        Method:      getUuid() -> id
        Description: Unique id that can be used for custom purposes.
        """
        return _pymaxwell5.CmaxwellCamera_getUuid(self)


    def setActive(self):
        """
        Method:      setActive() -> 1 = Success, 0 = Fail
        Description: Sets the active camera used when rendering when there is more than one.
        """
        return _pymaxwell5.CmaxwellCamera_setActive(self)


    def free(self):
        """
        Method:      free() -> 1 = Success, 0 = Fail
        Description: Destroys the camera.
        """
        return _pymaxwell5.CmaxwellCamera_free(self)


    def hasCameraLensExtension(self):
        """hasCameraLensExtension(CmaxwellCamera self) -> byte"""
        return _pymaxwell5.CmaxwellCamera_hasCameraLensExtension(self)


    def getCameraLensExtensionParams(self):
        """getCameraLensExtensionParams(CmaxwellCamera self) -> PyObject *"""
        return _pymaxwell5.CmaxwellCamera_getCameraLensExtensionParams(self)


    def applyCameraLensExtension(self, extensionParams):
        """applyCameraLensExtension(CmaxwellCamera self, PyObject * extensionParams) -> byte"""
        return _pymaxwell5.CmaxwellCamera_applyCameraLensExtension(self, extensionParams)


    def cleanCameraLensExtension(self):
        """cleanCameraLensExtension(CmaxwellCamera self) -> byte"""
        return _pymaxwell5.CmaxwellCamera_cleanCameraLensExtension(self)


    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the Ccamera was initialized.
        """
        return _pymaxwell5.CmaxwellCamera_isNull(self)


    def __str__(self):
        """__str__(CmaxwellCamera self) -> char *"""
        return _pymaxwell5.CmaxwellCamera___str__(self)


    def __init__(self):
        """__init__(CmaxwellCamera self) -> CmaxwellCamera"""
        _pymaxwell5.CmaxwellCamera_swiginit(self, _pymaxwell5.new_CmaxwellCamera())
    __swig_destroy__ = _pymaxwell5.delete_CmaxwellCamera
CmaxwellCamera.setStep = new_instancemethod(_pymaxwell5.CmaxwellCamera_setStep, None, CmaxwellCamera)
CmaxwellCamera.setStep2 = new_instancemethod(_pymaxwell5.CmaxwellCamera_setStep2, None, CmaxwellCamera)
CmaxwellCamera.getStep2 = new_instancemethod(_pymaxwell5.CmaxwellCamera_getStep2, None, CmaxwellCamera)
CmaxwellCamera.getStep = new_instancemethod(_pymaxwell5.CmaxwellCamera_getStep, None, CmaxwellCamera)
CmaxwellCamera.getValues = new_instancemethod(_pymaxwell5.CmaxwellCamera_getValues, None, CmaxwellCamera)
CmaxwellCamera.setName = new_instancemethod(_pymaxwell5.CmaxwellCamera_setName, None, CmaxwellCamera)
CmaxwellCamera.getName = new_instancemethod(_pymaxwell5.CmaxwellCamera_getName, None, CmaxwellCamera)
CmaxwellCamera.setResolution = new_instancemethod(_pymaxwell5.CmaxwellCamera_setResolution, None, CmaxwellCamera)
CmaxwellCamera.getResolution = new_instancemethod(_pymaxwell5.CmaxwellCamera_getResolution, None, CmaxwellCamera)
CmaxwellCamera.setPixelAspect = new_instancemethod(_pymaxwell5.CmaxwellCamera_setPixelAspect, None, CmaxwellCamera)
CmaxwellCamera.getPixelAspect = new_instancemethod(_pymaxwell5.CmaxwellCamera_getPixelAspect, None, CmaxwellCamera)
CmaxwellCamera.setShutter = new_instancemethod(_pymaxwell5.CmaxwellCamera_setShutter, None, CmaxwellCamera)
CmaxwellCamera.getShutter = new_instancemethod(_pymaxwell5.CmaxwellCamera_getShutter, None, CmaxwellCamera)
CmaxwellCamera.setIso = new_instancemethod(_pymaxwell5.CmaxwellCamera_setIso, None, CmaxwellCamera)
CmaxwellCamera.getIso = new_instancemethod(_pymaxwell5.CmaxwellCamera_getIso, None, CmaxwellCamera)
CmaxwellCamera.setExposurePreset = new_instancemethod(_pymaxwell5.CmaxwellCamera_setExposurePreset, None, CmaxwellCamera)
CmaxwellCamera.getExposurePreset = new_instancemethod(_pymaxwell5.CmaxwellCamera_getExposurePreset, None, CmaxwellCamera)
CmaxwellCamera.setFilmSize = new_instancemethod(_pymaxwell5.CmaxwellCamera_setFilmSize, None, CmaxwellCamera)
CmaxwellCamera.getFilmSize = new_instancemethod(_pymaxwell5.CmaxwellCamera_getFilmSize, None, CmaxwellCamera)
CmaxwellCamera.setDiaphragm = new_instancemethod(_pymaxwell5.CmaxwellCamera_setDiaphragm, None, CmaxwellCamera)
CmaxwellCamera.getDiaphragm = new_instancemethod(_pymaxwell5.CmaxwellCamera_getDiaphragm, None, CmaxwellCamera)
CmaxwellCamera.setFPS = new_instancemethod(_pymaxwell5.CmaxwellCamera_setFPS, None, CmaxwellCamera)
CmaxwellCamera.getFPS = new_instancemethod(_pymaxwell5.CmaxwellCamera_getFPS, None, CmaxwellCamera)
CmaxwellCamera.setScreenRegion = new_instancemethod(_pymaxwell5.CmaxwellCamera_setScreenRegion, None, CmaxwellCamera)
CmaxwellCamera.getScreenRegion = new_instancemethod(_pymaxwell5.CmaxwellCamera_getScreenRegion, None, CmaxwellCamera)
CmaxwellCamera.setCutPlanes = new_instancemethod(_pymaxwell5.CmaxwellCamera_setCutPlanes, None, CmaxwellCamera)
CmaxwellCamera.getCutPlanes = new_instancemethod(_pymaxwell5.CmaxwellCamera_getCutPlanes, None, CmaxwellCamera)
CmaxwellCamera.setShiftLens = new_instancemethod(_pymaxwell5.CmaxwellCamera_setShiftLens, None, CmaxwellCamera)
CmaxwellCamera.getShiftLens = new_instancemethod(_pymaxwell5.CmaxwellCamera_getShiftLens, None, CmaxwellCamera)
CmaxwellCamera.setLensType = new_instancemethod(_pymaxwell5.CmaxwellCamera_setLensType, None, CmaxwellCamera)
CmaxwellCamera.getLensType = new_instancemethod(_pymaxwell5.CmaxwellCamera_getLensType, None, CmaxwellCamera)
CmaxwellCamera.setSphericalLensProperties = new_instancemethod(_pymaxwell5.CmaxwellCamera_setSphericalLensProperties, None, CmaxwellCamera)
CmaxwellCamera.getSphericalLensProperties = new_instancemethod(_pymaxwell5.CmaxwellCamera_getSphericalLensProperties, None, CmaxwellCamera)
CmaxwellCamera.setFishLensProperties = new_instancemethod(_pymaxwell5.CmaxwellCamera_setFishLensProperties, None, CmaxwellCamera)
CmaxwellCamera.getFishLensProperties = new_instancemethod(_pymaxwell5.CmaxwellCamera_getFishLensProperties, None, CmaxwellCamera)
CmaxwellCamera.setCylindricalLensProperties = new_instancemethod(_pymaxwell5.CmaxwellCamera_setCylindricalLensProperties, None, CmaxwellCamera)
CmaxwellCamera.getCylindricalLensProperties = new_instancemethod(_pymaxwell5.CmaxwellCamera_getCylindricalLensProperties, None, CmaxwellCamera)
CmaxwellCamera.setCustomBokeh = new_instancemethod(_pymaxwell5.CmaxwellCamera_setCustomBokeh, None, CmaxwellCamera)
CmaxwellCamera.getCustomBokeh = new_instancemethod(_pymaxwell5.CmaxwellCamera_getCustomBokeh, None, CmaxwellCamera)
CmaxwellCamera.setCameraResponsePreset = new_instancemethod(_pymaxwell5.CmaxwellCamera_setCameraResponsePreset, None, CmaxwellCamera)
CmaxwellCamera.getCameraResponsePreset = new_instancemethod(_pymaxwell5.CmaxwellCamera_getCameraResponsePreset, None, CmaxwellCamera)
CmaxwellCamera.setHide = new_instancemethod(_pymaxwell5.CmaxwellCamera_setHide, None, CmaxwellCamera)
CmaxwellCamera.isHide = new_instancemethod(_pymaxwell5.CmaxwellCamera_isHide, None, CmaxwellCamera)
CmaxwellCamera.setUuid = new_instancemethod(_pymaxwell5.CmaxwellCamera_setUuid, None, CmaxwellCamera)
CmaxwellCamera.getUuid = new_instancemethod(_pymaxwell5.CmaxwellCamera_getUuid, None, CmaxwellCamera)
CmaxwellCamera.setActive = new_instancemethod(_pymaxwell5.CmaxwellCamera_setActive, None, CmaxwellCamera)
CmaxwellCamera.free = new_instancemethod(_pymaxwell5.CmaxwellCamera_free, None, CmaxwellCamera)
CmaxwellCamera.hasCameraLensExtension = new_instancemethod(_pymaxwell5.CmaxwellCamera_hasCameraLensExtension, None, CmaxwellCamera)
CmaxwellCamera.getCameraLensExtensionParams = new_instancemethod(_pymaxwell5.CmaxwellCamera_getCameraLensExtensionParams, None, CmaxwellCamera)
CmaxwellCamera.applyCameraLensExtension = new_instancemethod(_pymaxwell5.CmaxwellCamera_applyCameraLensExtension, None, CmaxwellCamera)
CmaxwellCamera.cleanCameraLensExtension = new_instancemethod(_pymaxwell5.CmaxwellCamera_cleanCameraLensExtension, None, CmaxwellCamera)
CmaxwellCamera.isNull = new_instancemethod(_pymaxwell5.CmaxwellCamera_isNull, None, CmaxwellCamera)
CmaxwellCamera.__str__ = new_instancemethod(_pymaxwell5.CmaxwellCamera___str__, None, CmaxwellCamera)
CmaxwellCamera_swigregister = _pymaxwell5.CmaxwellCamera_swigregister
CmaxwellCamera_swigregister(CmaxwellCamera)

def CmaxwellCamera_getExposurePresetValues(preset):
    """
    Method:      setExposurePreset( preset ) -> (iso,shutter,fstop,ok)
    Description: Returns by reference ISO, Shutter and fStop values for a specific preset. Preset values
                 are only used in GUIs, the render engine uses ISO and Shutter only if preset is
                 EXPOSURE_CUSTOM or invalid the function returns 0, otherwise it returns 1.
    """
    return _pymaxwell5.CmaxwellCamera_getExposurePresetValues(preset)

def CmaxwellCamera_getCameraResponsePresetsList():
    """
    Method:      getCameraResponsePresetsList() -> (str[],ok)
    Description: Gets the available preset names.
    """
    return _pymaxwell5.CmaxwellCamera_getCameraResponsePresetsList()

class CmaxwellObjectIterator(object):
    """
    Class CmaxwellObjectIterator

      Class used to parse a list of objects.
      Example code:

        scene = Cmaxwell(mwcallback_cb);
        scene.readMXS('scene.mxs');
        it = CmaxwellObjectIterator();
        object = it.first(scene);
        while object.isNull() == False:
          # Do something with the object...
          object = it.next();
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CmaxwellObjectIterator self) -> CmaxwellObjectIterator"""
        _pymaxwell5.CmaxwellObjectIterator_swiginit(self, _pymaxwell5.new_CmaxwellObjectIterator())
    __swig_destroy__ = _pymaxwell5.delete_CmaxwellObjectIterator

    def first(self, pMaxwell):
        """first(CmaxwellObjectIterator self, Cmaxwell pMaxwell) -> CmaxwellObject"""
        return _pymaxwell5.CmaxwellObjectIterator_first(self, pMaxwell)


    def next(self):
        """next(CmaxwellObjectIterator self) -> CmaxwellObject"""
        return _pymaxwell5.CmaxwellObjectIterator_next(self)

CmaxwellObjectIterator.first = new_instancemethod(_pymaxwell5.CmaxwellObjectIterator_first, None, CmaxwellObjectIterator)
CmaxwellObjectIterator.next = new_instancemethod(_pymaxwell5.CmaxwellObjectIterator_next, None, CmaxwellObjectIterator)
CmaxwellObjectIterator_swigregister = _pymaxwell5.CmaxwellObjectIterator_swigregister
CmaxwellObjectIterator_swigregister(CmaxwellObjectIterator)

class CmaxwellObjectTrianglesGroup(object):
    """
    Class CmaxwellObjectTrianglesGroup

      Class used to group triangles in an object so the user can recover a triangles selection
      later in Maxwell Studio. Is not used by the render engine.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getName(self):
        """getName(CmaxwellObjectTrianglesGroup self) -> char const *"""
        return _pymaxwell5.CmaxwellObjectTrianglesGroup_getName(self)


    def getObject(self):
        """getObject(CmaxwellObjectTrianglesGroup self) -> CmaxwellObject"""
        return _pymaxwell5.CmaxwellObjectTrianglesGroup_getObject(self)


    def getTrianglesCount(self):
        """getTrianglesCount(CmaxwellObjectTrianglesGroup self) -> dword"""
        return _pymaxwell5.CmaxwellObjectTrianglesGroup_getTrianglesCount(self)


    def getTriangles(self):
        """
        Method:      getTriangles() -> list
        Description: List of triangles that belongs to the group.
        """
        return _pymaxwell5.CmaxwellObjectTrianglesGroup_getTriangles(self)


    def setMaterial(self, material):
        """
        Method:      getTriangles() -> list
        Description: List of triangles that belongs to the group.
        """
        return _pymaxwell5.CmaxwellObjectTrianglesGroup_setMaterial(self, material)


    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the CmaxwellObjectTrianglesGroup was initialized.
        """
        return _pymaxwell5.CmaxwellObjectTrianglesGroup_isNull(self)


    def __init__(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the CmaxwellObjectTrianglesGroup was initialized.
        """
        _pymaxwell5.CmaxwellObjectTrianglesGroup_swiginit(self, _pymaxwell5.new_CmaxwellObjectTrianglesGroup())
    __swig_destroy__ = _pymaxwell5.delete_CmaxwellObjectTrianglesGroup
CmaxwellObjectTrianglesGroup.getName = new_instancemethod(_pymaxwell5.CmaxwellObjectTrianglesGroup_getName, None, CmaxwellObjectTrianglesGroup)
CmaxwellObjectTrianglesGroup.getObject = new_instancemethod(_pymaxwell5.CmaxwellObjectTrianglesGroup_getObject, None, CmaxwellObjectTrianglesGroup)
CmaxwellObjectTrianglesGroup.getTrianglesCount = new_instancemethod(_pymaxwell5.CmaxwellObjectTrianglesGroup_getTrianglesCount, None, CmaxwellObjectTrianglesGroup)
CmaxwellObjectTrianglesGroup.getTriangles = new_instancemethod(_pymaxwell5.CmaxwellObjectTrianglesGroup_getTriangles, None, CmaxwellObjectTrianglesGroup)
CmaxwellObjectTrianglesGroup.setMaterial = new_instancemethod(_pymaxwell5.CmaxwellObjectTrianglesGroup_setMaterial, None, CmaxwellObjectTrianglesGroup)
CmaxwellObjectTrianglesGroup.isNull = new_instancemethod(_pymaxwell5.CmaxwellObjectTrianglesGroup_isNull, None, CmaxwellObjectTrianglesGroup)
CmaxwellObjectTrianglesGroup_swigregister = _pymaxwell5.CmaxwellObjectTrianglesGroup_swigregister
CmaxwellObjectTrianglesGroup_swigregister(CmaxwellObjectTrianglesGroup)

class CmaxwellObjectTrianglesGroupIterator(object):
    """Proxy of C++ CmaxwellObjectTrianglesGroupIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CmaxwellObjectTrianglesGroupIterator self) -> CmaxwellObjectTrianglesGroupIterator"""
        _pymaxwell5.CmaxwellObjectTrianglesGroupIterator_swiginit(self, _pymaxwell5.new_CmaxwellObjectTrianglesGroupIterator())
    __swig_destroy__ = _pymaxwell5.delete_CmaxwellObjectTrianglesGroupIterator

    def first(self, object):
        """first(CmaxwellObjectTrianglesGroupIterator self, CmaxwellObject object) -> CmaxwellObjectTrianglesGroup"""
        return _pymaxwell5.CmaxwellObjectTrianglesGroupIterator_first(self, object)


    def next(self):
        """next(CmaxwellObjectTrianglesGroupIterator self) -> CmaxwellObjectTrianglesGroup"""
        return _pymaxwell5.CmaxwellObjectTrianglesGroupIterator_next(self)

CmaxwellObjectTrianglesGroupIterator.first = new_instancemethod(_pymaxwell5.CmaxwellObjectTrianglesGroupIterator_first, None, CmaxwellObjectTrianglesGroupIterator)
CmaxwellObjectTrianglesGroupIterator.next = new_instancemethod(_pymaxwell5.CmaxwellObjectTrianglesGroupIterator_next, None, CmaxwellObjectTrianglesGroupIterator)
CmaxwellObjectTrianglesGroupIterator_swigregister = _pymaxwell5.CmaxwellObjectTrianglesGroupIterator_swigregister
CmaxwellObjectTrianglesGroupIterator_swigregister(CmaxwellObjectTrianglesGroupIterator)

class CmaxwellObject(object):
    """Proxy of C++ CmaxwellObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def free(self):
        """
        Method:      free() -> 1 = Success, 0 = Fail
        Description: Destroys the object.
        """
        return _pymaxwell5.CmaxwellObject_free(self)


    def getName(self):
        """
        Method:      getName() -> (name,ok)
        Description: To get the name of the object.
        """
        return _pymaxwell5.CmaxwellObject_getName(self)


    def setName(self, pName):
        """
        Method:      getName( name ) -> 1 = Success, 0 = Fail
        Description: To set the name of the object.
        """
        return _pymaxwell5.CmaxwellObject_setName(self, pName)


    def isMesh(self):
        """
        Method:      isMesh() -> (int,ok)
        Description: Returns 1 if this CmaxwellObject is a real mesh
                     Returns 0 if not an instance or any other thing
        """
        return _pymaxwell5.CmaxwellObject_isMesh(self)


    def isInstance(self):
        """
        Method:      isInstance() -> (int,ok)
        Description: Returns 1 if this CmaxwellObject is an instance
                     Returns 0 otherwise
        """
        return _pymaxwell5.CmaxwellObject_isInstance(self)


    def getInstanced(self):
        """
        Method:      getInstanced() -> CmaxwellObject
        Description: If this CmaxwellObject is an instance this method returns its parent object.
        """
        return _pymaxwell5.CmaxwellObject_getInstanced(self)


    def getReferencedScenePath(self):
        """
        Method:      getReferencedScenePath() -> path
        Description: Gets the scene file referenced by this object.
        """
        return _pymaxwell5.CmaxwellObject_getReferencedScenePath(self)


    def setReferencedScenePath(self, path):
        """
        Method:      setReferencedScenePath( path ) -> 1 = Success, 0 = Fail
        Description: Sets the scene file referenced by this object.
        """
        return _pymaxwell5.CmaxwellObject_setReferencedScenePath(self, path)


    def getReferencedSceneMaterial(self, objectName):
        """
        Method:      getReferencedSceneMaterial( objectName ) -> (CmaxwellMaterial [reference],ok)
        Description: Gets the material of an specific object inside the referenced scene.
        """
        return _pymaxwell5.CmaxwellObject_getReferencedSceneMaterial(self, objectName)


    def setReferencedSceneMaterial(self, objectName, material):
        """
        Method:      setReferenceMaterial( objectName, material ) -> 1 = Success, 0 = Fail
        Description: Sets the material of an specific object inside the referenced scene.
        """
        return _pymaxwell5.CmaxwellObject_setReferencedSceneMaterial(self, objectName, material)


    def getReferencedOverrideFlags(self):
        """
        Method:      getReferencedOverrideFlags() -> (flags,ok) = Fail
        Description: Sets the override policy for visibility flags.
        Parameter:   flags -> FLAG_DO_NOT_OVERRIDE, FLAG_OVERRIDE_HIDE, FLAG_OVERRIDE_HIDE_TO_CAMERA,
                      FLAG_OVERRIDE_HIDE_TO_REFL_REFR, FLAG_OVERRIDE_HIDE_TO_GI or FLAG_OVERRIDE_ALL.
        """
        return _pymaxwell5.CmaxwellObject_getReferencedOverrideFlags(self)


    def setReferencedOverrideFlags(self, flags):
        """
        Method:      setReferencedOverrideFlags( flags ) -> 1 = Success, 0 = Fail
        Description: Sets the override policy for visibility flags.
        Parameter:   flags -> FLAG_DO_NOT_OVERRIDE, FLAG_OVERRIDE_HIDE, FLAG_OVERRIDE_HIDE_TO_CAMERA,
                      FLAG_OVERRIDE_HIDE_TO_REFL_REFR, FLAG_OVERRIDE_HIDE_TO_GI or FLAG_OVERRIDE_ALL.
        """
        return _pymaxwell5.CmaxwellObject_setReferencedOverrideFlags(self, flags)


    def mergeMeshes(self, meshes):
        """
        Method:      mergeMeshes( CmaxwellObject[] meshes ) -> 1 = Success, 0 = Fail
        Description: Merges an array of meshes into a single mesh. The original meshes are not
                     removed (it can be done later calling CmaxwellObject.free()).
                     Note: object itself must not be one of the objects included in 'meshes'. In
                     that case the script will crash.
        """
        return _pymaxwell5.CmaxwellObject_mergeMeshes(self, meshes)


    def getParent(self):
        """
        Method:      getParent() -> (CmaxwellObject [reference],ok)
        Description: Gets the parent object in the hierarchy.
        """
        return _pymaxwell5.CmaxwellObject_getParent(self)


    def setParent(self, parent):
        """
        Method:      setParent( CmaxwellObject ) -> 1 = Success, 0 = Fail
        Description: Sets the parent object in the hierarchy.
        """
        return _pymaxwell5.CmaxwellObject_setParent(self, parent)


    def getUuid(self):
        """
        Method:      getUuid() -> string
        Description: Unique Id that can be used for custom purposes.
        """
        return _pymaxwell5.CmaxwellObject_getUuid(self)


    def setUuid(self, pUuid):
        """
        Method:      setUuid( string ) -> 1 = Success, 0 = Fail
        Description: Unique Id that can be used for custom purposes.
        """
        return _pymaxwell5.CmaxwellObject_setUuid(self, pUuid)


    def getMaterial(self):
        """
        Method:      getMaterial() -> (CmaxwellMaterial [reference],ok)
        Description: Gets material applyed to the object.
        """
        return _pymaxwell5.CmaxwellObject_getMaterial(self)


    def setMaterial(self, material):
        """
        Method:      setMaterial( CmaxwellMaterial ) -> 1 = Success, 0 = Fail
        Description: Sets material applyed to the object.
        """
        return _pymaxwell5.CmaxwellObject_setMaterial(self, material)


    def getBackfaceMaterial(self):
        """
        Method:      getBackfaceMaterial() -> (CmaxwellMaterial [reference],ok)
        Description: Material applied to the other side of the object. By default it is null so the
                     same material is applied in both sides.
        """
        return _pymaxwell5.CmaxwellObject_getBackfaceMaterial(self)


    def setBackfaceMaterial(self, material):
        """
        Method:      setBackfaceMaterial( CmaxwellMaterial ) -> 1 = Success, 0 = Fail
        Description: Material applied to the other side of the object. By default it is null so the
                     same material is applied in both sides.
        """
        return _pymaxwell5.CmaxwellObject_setBackfaceMaterial(self, material)


    def getRenderBooleanType(self):
        """
        Method:      getBackfaceMaterial() -> (RenderBooleanType,ok)
        Description: Sets the render boolean type of this object. Default value is 0, which means that
                     the object is not a boolean renders normally.
        Parameter:   RenderBooleanType -> BOOLEAN_NONE, BOOLEAN_BOX, BOOLEAN_SPHERE, BOOLEAN_PLANE_XY,
                      BOOLEAN_PLANE_YZ or BOOLEAN_PLANE_ZX.
        """
        return _pymaxwell5.CmaxwellObject_getRenderBooleanType(self)


    def setRenderBooleanType(self, type):
        """
        Method:      setRenderBooleanType( RenderBooleanType ) -> 1 = Success, 0 = Fail
        Description: Sets the render boolean type of this object. Default value is 0, which means that
                     the object is not a boolean renders normally.
        Parameter:   RenderBooleanType -> BOOLEAN_NONE, BOOLEAN_BOX, BOOLEAN_SPHERE, BOOLEAN_PLANE_XY,
                      BOOLEAN_PLANE_YZ or BOOLEAN_PLANE_ZX.
        """
        return _pymaxwell5.CmaxwellObject_setRenderBooleanType(self, type)


    def addExcludedLight(self, lightObjectName):
        """
        Method:      addExcludedLight( lightObjectName ) -> 1 = Success, 0 = Fail
        Description: Excludes direct lighting in this object from the object with name lightObjectName.
                     By default there are no excluded lights to any object.
        """
        return _pymaxwell5.CmaxwellObject_addExcludedLight(self, lightObjectName)


    def removeExcludedLight(self, lightObjectName):
        """
        Method:      removeExcludedLight( lightObjectName ) -> 1 = Success, 0 = Fail
        Description: Removes excluded light from this object.
        """
        return _pymaxwell5.CmaxwellObject_removeExcludedLight(self, lightObjectName)


    def getNumExcludedLights(self):
        """
        Method:      getNumExcludedLights() -> (int,ok)
        Description: Gets number of excluded lights from the object.
        """
        return _pymaxwell5.CmaxwellObject_getNumExcludedLights(self)


    def getExcludedLightAtIndex(self, index):
        """
        Method:      getExcludedLightAtIndex( index ) -> name
        Description: Gets excluded light name.
        """
        return _pymaxwell5.CmaxwellObject_getExcludedLightAtIndex(self, index)


    def getProperties(self):
        """
        Method:      getProperties() -> (doDirectCausticsReflection, doDirectCausticsRefraction,
                                         doIndirectCausticsReflection, doIndirectCausticsRefraction,ok)
        Description: Caustics properties of the object.
        """
        return _pymaxwell5.CmaxwellObject_getProperties(self)


    def setProperties(self, doDirectCausticsReflection, doDirectCausticsRefraction, doIndirectCausticsReflection, doIndirectCausticsRefraction):
        """
        Method:      setProperties( doDirectCausticsReflection, doDirectCausticsRefraction,
                                    doIndirectCausticsReflection, doIndirectCausticsRefraction )
                     -> 1 = Success, 0 = Fail
        Description: Caustics properties of the object. Input values must be 1 (true) or 0 (false).
        """
        return _pymaxwell5.CmaxwellObject_setProperties(self, doDirectCausticsReflection, doDirectCausticsRefraction, doIndirectCausticsReflection, doIndirectCausticsRefraction)


    def getDependencies(self, searchInsideReference=True):
        """
        Method:      getDependencies(searchInsideReference = True) -> (list,ok)
        Description: Returns an array of strings with all the extern dependencies of the object
                     (external files, etc).Parameter:   searchInsideReference. If true the function search for dependencies also in the
                     referenced proxy object if exists. searchInsideReference is true by default.
        Method:      getDependencies(searchInsideReference = True) -> (list,ok)
        Description: Returns an array of strings with all the extern dependencies of the object
                     (external files, etc).Parameter:   searchInsideReference. If true the function search for dependencies also in the
                     referenced proxy object if exists. searchInsideReference is true by default.
        """
        return _pymaxwell5.CmaxwellObject_getDependencies(self, searchInsideReference)


    def getVerticesCount(self):
        """
        Method:      getNumVertexes() -> (int,ok)
        Description: Number of vertices.
        """
        return _pymaxwell5.CmaxwellObject_getVerticesCount(self)


    def getTrianglesCount(self):
        """
        Method:      getTrianglesCount() -> (int,ok)
        Description: Number of triangles.
        """
        return _pymaxwell5.CmaxwellObject_getTrianglesCount(self)


    def getNormalsCount(self):
        """
        Method:      getNormalsCount() -> (int,ok)
        Description: Number of normals.
        """
        return _pymaxwell5.CmaxwellObject_getNormalsCount(self)


    def getPositionsPerVertexCount(self):
        """
        Method:      getPositionsPerVertexCount() -> (int,ok)
        Description: Number of positions per vertex.
        """
        return _pymaxwell5.CmaxwellObject_getPositionsPerVertexCount(self)


    def getChannelsUVWCount(self):
        """
        Method:      getChannelsUVWCount() -> (int,ok)
        Description: Number of positions UVW channels.
        """
        return _pymaxwell5.CmaxwellObject_getChannelsUVWCount(self)


    def getTriangleGroupsCount(self):
        """
        Method:      getTriangleGroupsCount() -> (int,ok)
        Description: Number of triangle groups.
        """
        return _pymaxwell5.CmaxwellObject_getTriangleGroupsCount(self)


    def addChannelUVW(self, id=0xFF):
        """
        Method:      addChannelUVW( id = 0xFF ) -> (index,ok)
        Description: For a given object, either add all channels with id's or without id's, but don't
                     add some channels with id and others without id. If the channels are added with
                     id, pass this id to the functions (set/getTriangleUVW, generate...UVW, etc) that
                     modify the channel. When working without id's, pass the returned 'index' from
                     addChannelUVW to those functions.
        Method:      addChannelUVW( id = 0xFF ) -> (index,ok)
        Description: For a given object, either add all channels with id's or without id's, but don't
                     add some channels with id and others without id. If the channels are added with
                     id, pass this id to the functions (set/getTriangleUVW, generate...UVW, etc) that
                     modify the channel. When working without id's, pass the returned 'index' from
                     addChannelUVW to those functions.
        """
        return _pymaxwell5.CmaxwellObject_addChannelUVW(self, id)


    def getUVWChannelId(self, index):
        """
        Method:      getUVWChannelId( index ) -> (id,ok)
        Description: Gets UVW channel ID.
        """
        return _pymaxwell5.CmaxwellObject_getUVWChannelId(self, index)


    def generateSphericalUVW(self, iChannel, projectorBase, startLatitude, endLatitude, startLongitude, endLongitude):
        """
        Method:      generateSphericalUVW( int iChannel, Cbase projectorBase,
                                           float startLatitude, float endLatitude,
                                           float startLongitude, float endLongitude )
                     -> 1 = Success, 0 = Fail
        """
        return _pymaxwell5.CmaxwellObject_generateSphericalUVW(self, iChannel, projectorBase, startLatitude, endLatitude, startLongitude, endLongitude)


    def generateCylindricalUVW(self, iChannel, projectorBase, startAngle, endAngle):
        """
        Method:      generateCylindricalUVW( int iChannel, Cbase projectorBase,
                                           float startAngle, float endAngle )
                     -> (channel,projector,ok)

        """
        return _pymaxwell5.CmaxwellObject_generateCylindricalUVW(self, iChannel, projectorBase, startAngle, endAngle)


    def generateCubicUVW(self, iChannel, projectorBase, mirrorBackFaces=False):
        """
        Method:      generateCubicUVW( int iChannel, Cbase projectorBase,
                                       bool mirrorBackFaces = False )
                     -> (channel,projector,ok)

        Method:      generateCubicUVW( int iChannel, Cbase projectorBase,
                                       bool mirrorBackFaces = False )
                     -> (channel,projector,ok)

        """
        return _pymaxwell5.CmaxwellObject_generateCubicUVW(self, iChannel, projectorBase, mirrorBackFaces)


    def generatePlanarUVW(self, iChannel, projectorBase):
        """
        Method:      generatePlanarUVW( int iChannel, Cbase projectorBase )
                     -> (channel,projector,ok)

        """
        return _pymaxwell5.CmaxwellObject_generatePlanarUVW(self, iChannel, projectorBase)


    def getVertex(self, iVertex, iPosition):
        """
        Method:      getVertex( int iVertex, int iPosition ) -> (Cvector,ok)

        """
        return _pymaxwell5.CmaxwellObject_getVertex(self, iVertex, iPosition)


    def setVertex(self, iVertex, iPosition, point):
        """
        Method:      setVertex( int iVertex, int iPosition, Cvector point )
                     -> 1 = Success, 'error' = False

        """
        return _pymaxwell5.CmaxwellObject_setVertex(self, iVertex, iPosition, point)


    def getNormal(self, iVertex, iPosition):
        """
        Method:      getNormal( int iNormal, int iPosition ) -> (Cvector,ok)

        """
        return _pymaxwell5.CmaxwellObject_getNormal(self, iVertex, iPosition)


    def setNormal(self, iNormal, iPosition, normal):
        """
        Method:      setNormal( int iNormal, int iPosition, Cvector normal )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell5.CmaxwellObject_setNormal(self, iNormal, iPosition, normal)


    def getBoundingBox(self):
        """
        Method:      getBoundingBox() -> (Cvector,Cvector,ok)

        """
        return _pymaxwell5.CmaxwellObject_getBoundingBox(self)


    def getBoundingBoxTransformed(self):
        """
        Method:      getBoundingBoxTransformed() -> (Cvector,Cvector,ok)

        """
        return _pymaxwell5.CmaxwellObject_getBoundingBoxTransformed(self)


    def getTriangle(self, iTriangle):
        """
        Method:      getTriangle( int iTriangle ) -> (v1,v2,v3,n1,n2,n3,ok)

        """
        return _pymaxwell5.CmaxwellObject_getTriangle(self, iTriangle)


    def setTriangle(self, index, iVertex1, iVertex2, iVertex3, iNormal1, iNormal2, iNormal3):
        """
        Method:      setTriangle( int iTriangle, int iVertex1, int iVertex2, int iVertex3,
                                  int iNormal1, int iNormal2, int iNormal3 )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell5.CmaxwellObject_setTriangle(self, index, iVertex1, iVertex2, iVertex3, iNormal1, iNormal2, iNormal3)


    def getTriangleUVW(self, iTriangle, iChannelID):
        """
        Method:      getTriangleUVW( int iTriangle, int iChannelID )
                     -> (float u1, float v1, float w1, float u2, float v2, float w2,
                         float u3, float v3, float w3, ok)

        """
        return _pymaxwell5.CmaxwellObject_getTriangleUVW(self, iTriangle, iChannelID)


    def setTriangleUVW(self, iTriangle, iChannelID, u1, v1, w1, u2, v2, w2, u3, v3, w3):
        """
        Method:      setTriangleUVW( int iTriangle, int iChannelID, float u1, float v1, float w1,
                                     float u2, float v2, float w2, float u2, float v2, float w3 )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell5.CmaxwellObject_setTriangleUVW(self, iTriangle, iChannelID, u1, v1, w1, u2, v2, w2, u3, v3, w3)


    def getTriangleMaterial(self, iTriangle):
        """
        Method:      getTriangleMaterial( int iTriangle ) -> (CmaxwellMaterial [reference],ok)

        """
        return _pymaxwell5.CmaxwellObject_getTriangleMaterial(self, iTriangle)


    def setTriangleMaterial(self, iTriangle, material):
        """
        Method:      setTriangleMaterial( int iTriangle, CmaxwellMaterial )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell5.CmaxwellObject_setTriangleMaterial(self, iTriangle, material)


    def getTriangleQuadBuddy(self, iTriangle):
        """
        Method:      getTriangleQuadBuddy( int iTriangle ) -> (index,ok)

        """
        return _pymaxwell5.CmaxwellObject_getTriangleQuadBuddy(self, iTriangle)


    def setTriangleQuadBuddy(self, iTriangle, iBuddyIndex):
        """
        Method:      setTriangleQuadBuddy( int iTriangle, int iBuddyIndex ) -> 1 = Success, 0 = Fail

        """
        return _pymaxwell5.CmaxwellObject_setTriangleQuadBuddy(self, iTriangle, iBuddyIndex)


    def getBaseAndPivot(self, substepTime=0.0):
        """
        Method:      getBaseAndPivot( float substepTime = 0.0 ) -> (Cbase base, Cbase pivot, ok)

        Method:      getBaseAndPivot( float substepTime = 0.0 ) -> (Cbase base, Cbase pivot, ok)

        """
        return _pymaxwell5.CmaxwellObject_getBaseAndPivot(self, substepTime)


    def setBaseAndPivot(self, base, pivot, substepTime=0.0):
        """
        Method:      setBaseAndPivot( Cbase base, Cbase pivot, float substepTime = 0.0 )
                     -> 1 = Success, 0 = Fail

        Method:      setBaseAndPivot( Cbase base, Cbase pivot, float substepTime = 0.0 )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell5.CmaxwellObject_setBaseAndPivot(self, base, pivot, substepTime)


    def getWorldTransform(self):
        """
        Method:      getWorldTransform() -> (Cbase,ok)
        Description: Returns the world transform of the object taking into account base and pivot of
                     all its parents. If object vertices & normals have been transformed to world
                     coordinates it returns the identity.
        """
        return _pymaxwell5.CmaxwellObject_getWorldTransform(self)


    def isInWorldCoordinates(self):
        """
        Method:      isInWorldCoordinates() -> int
        Description: specifies if object vertices & normals have been transformed to world coordinates
                     (Maxwell can transform object internally at different points).
        """
        return _pymaxwell5.CmaxwellObject_isInWorldCoordinates(self)


    def getTransformSubstepsCount(self):
        """
        Method:      getTransformSubstepsCount() -> int
        Description: Description: Return the number of substeps
                     used for defining Base and Pivot motion blur.
        """
        return _pymaxwell5.CmaxwellObject_getTransformSubstepsCount(self)


    def getTransformStepInfoByIndex(self, index):
        """
        Method:      getTransformStepInfoByIndex( int index )
                     -> (Cbase base, Cbase pivot, float time, ok)
        Description: Returns transform information(base, pivot and time) for the given index.
        """
        return _pymaxwell5.CmaxwellObject_getTransformStepInfoByIndex(self, index)


    def getPosition(self):
        """
        Method:      getPosition() -> (Cvector,ok)
        Description: Gets position of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell5.CmaxwellObject_getPosition(self)


    def setPosition(self, vector):
        """
        method:      setposition( Cvector ) -> 1 = success, 0 = fail
        description: Sets position of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell5.CmaxwellObject_setPosition(self, vector)


    def getRotation(self):
        """
        Method:      getRotation() -> (Cvector,ok)
        Description: Gets rotation of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell5.CmaxwellObject_getRotation(self)


    def setRotation(self, vector):
        """
        Method:      setRotation( Cvector ) -> 1 = Success, 0 = Fail
        Description: Sets rotation of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell5.CmaxwellObject_setRotation(self, vector)


    def getScale(self):
        """
        Method:      getScale() -> (Cvector,ok)
        Description: Gets scale of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell5.CmaxwellObject_getScale(self)


    def setScale(self, vector):
        """
        Method:      setScale( Cvector ) -> 1 = Success, 0 = Fail
        Description: Sets scale of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell5.CmaxwellObject_setScale(self, vector)


    def getShear(self):
        """
        Method:      getShear() -> (Cvector,ok)
        Description: Gets shear of the object in the scene
        """
        return _pymaxwell5.CmaxwellObject_getShear(self)


    def setShear(self, vector):
        """
        Method:      setShear( Cvector ) -> 1 = Success, 0 = Fail
        Description: Sets scale of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell5.CmaxwellObject_setShear(self, vector)


    def getPivotPosition(self):
        """
        Method:      getPivotPosition() -> (Cvector,ok)
        Description: Gets pivot position of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell5.CmaxwellObject_getPivotPosition(self)


    def setPivotPosition(self, vector):
        """
        Method:      setPivotPosition( Cvector ) -> 1 = Success, 0 = Fail
        Description: Sets pivot position of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell5.CmaxwellObject_setPivotPosition(self, vector)


    def getPivotRotation(self):
        """
        Method:      getPivotRotation() -> (Cvector,ok)
        Description: Gets pivot rotation the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell5.CmaxwellObject_getPivotRotation(self)


    def setPivotRotation(self, vector):
        """
        Method:      setPivotRotation( Cvector ) -> 1 = Success, 0 = Fail
        Description: Sets pivot rotation of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell5.CmaxwellObject_setPivotRotation(self, vector)


    def isPosRotScaleInitialized(self):
        """
        Method:      isPosRotScaleInitialized() -> (bool,ok)
        Description: Returns true if the following methods have been used for the given CmaxwellObject:
                     getPosition, setPosition, getRotation, setRotation, getScale, setScale,
                     getShear, setShear, getPivotPosition, setPivotPosition, getPivotRotation,
                     setPivotRotation.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell5.CmaxwellObject_isPosRotScaleInitialized(self)


    def addTrianglesGroup(self, pName, triangles):
        """
        Method:      addTrianglesGroup( name, trianglesList ) -> 1 = Success, 0 = Fail
        Description: Method for triangles groups creation.
        Parameter:   name: Name of the triangles group.
        Parameter:   trianglesList: list with the indices of the triangles of the group.
        """
        return _pymaxwell5.CmaxwellObject_addTrianglesGroup(self, pName, triangles)


    def recalculateNormals(self, thresholdAngle):
        """
        Method:      recalculateNormals( thresholdAngle ) -> 1 = Success, 0 = Fail
        Description: Optional routine that recalculates normal vectors.
        Parameter:   thresholdAngle = specifies the maximum angle between neighbor
                     faces to smooth their normals.
        """
        return _pymaxwell5.CmaxwellObject_recalculateNormals(self, thresholdAngle)


    def cleanGeometry(self):
        """
        Method:      cleanGeometry() -> 1 = Success, 0 = Fail
        Description: Optional routine that removes degenerated faces, repeated/unused vertex
                     and normals. This function is automatically called inside the writeMXS method
                     it is not needed to call it except in scenarios like the interactive engine.
        """
        return _pymaxwell5.CmaxwellObject_cleanGeometry(self)


    def getHide(self):
        """
        Method:      getHide() -> (bool,ok)
        Description: Checks whether the object is hidden.
        """
        return _pymaxwell5.CmaxwellObject_getHide(self)


    def setHide(self, hide):
        """
        Method:      setHide( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the object visibility.
        """
        return _pymaxwell5.CmaxwellObject_setHide(self, hide)


    def getHideToCamera(self):
        """
        Method:      getHideToCamera() -> (bool,ok)
        Description: Checks whether the object is hidden to camera.
        """
        return _pymaxwell5.CmaxwellObject_getHideToCamera(self)


    def setHideToCamera(self, hide):
        """
        Method:      setHideToCamera( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the object visibility to the camera.
        """
        return _pymaxwell5.CmaxwellObject_setHideToCamera(self, hide)


    def getHideToCameraInShadowsPass(self, *args):
        """
        Method:      getHideToCameraInShadowsPass() -> (bool,ok)
        Description: Checks whether the object is hidden to camera in shadow pass.
        Method:      getHideToCameraInShadowsPass() -> (bool,ok)
        Description: Checks whether the object is hidden to camera in shadow pass.
        """
        return _pymaxwell5.CmaxwellObject_getHideToCameraInShadowsPass(self, *args)


    def setHideToCameraInShadowsPass(self, hide):
        """
        Method:      setHideToCameraInShadowsPass( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the object visibility to the camera in shadow pass.
        """
        return _pymaxwell5.CmaxwellObject_setHideToCameraInShadowsPass(self, hide)


    def getHideToCameraInObjectId(self):
        """
        Method:      getHideToCameraInObjectId() -> (bool,ok)
        Description: Checks whether the object is hidden for object Id
        """
        return _pymaxwell5.CmaxwellObject_getHideToCameraInObjectId(self)


    def setHideToCameraInObjectId(self, hide):
        """
        Method:      setHideToCameraInObjectId( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the object visibility to the camera for object id.
        """
        return _pymaxwell5.CmaxwellObject_setHideToCameraInObjectId(self, hide)


    def getHideToReflectionsRefractions(self):
        """
        Method:      getHideToReflectionsRefractions() -> (bool,ok)
        Description: Checks whether the object is hidden to reflections and refractions
        """
        return _pymaxwell5.CmaxwellObject_getHideToReflectionsRefractions(self)


    def setHideToReflectionsRefractions(self, hide):
        """
        Method:      setHideToReflectionsRefractions( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the object visibility to reflections and refractions.
        """
        return _pymaxwell5.CmaxwellObject_setHideToReflectionsRefractions(self, hide)


    def getHideToGI(self):
        """
        Method:      getHideToGI() -> (bool,ok)
        Description: Checks whether the object is hidden to global illumination.
        """
        return _pymaxwell5.CmaxwellObject_getHideToGI(self)


    def setHideToGI(self, hide):
        """
        Method:      setHideToGI( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the object visibility to global illumination.
        """
        return _pymaxwell5.CmaxwellObject_setHideToGI(self, hide)


    def isExcludedOfCutPlanes(self):
        """
        Method:      isExcludedOfCutPlanes() -> (bool,ok)
        Description: Checks wheter the object is excluded of cut planes.
        """
        return _pymaxwell5.CmaxwellObject_isExcludedOfCutPlanes(self)


    def excludeOfCutPlanes(self, exclude):
        """
        Method:      excludeOfCutPlanes( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the object inclusion of cut planes
        """
        return _pymaxwell5.CmaxwellObject_excludeOfCutPlanes(self, exclude)


    def getBackfaceCulling(self):
        """
        Method:      getBackfaceCulling() -> (bool,ok)
        Description: Checks whether backface culling is enabled.
        """
        return _pymaxwell5.CmaxwellObject_getBackfaceCulling(self)


    def setBackfaceCulling(self, state):
        """
        Method:      setBackfaceCulling( bool ) -> 1 = Success, 0 = Fail
        Description: Sets backface culling state of the object.
        """
        return _pymaxwell5.CmaxwellObject_setBackfaceCulling(self, state)


    def getOpacity(self):
        """
        Method:      getOpacity() -> (float,ok)
        Description: Checks opacity state of the object.
        """
        return _pymaxwell5.CmaxwellObject_getOpacity(self)


    def setOpacity(self, opacity):
        """
        Method:      setOpacity( float ) -> 1 = Success, 0 = Fail
        Description: Sets opacity state of the object.
        """
        return _pymaxwell5.CmaxwellObject_setOpacity(self, opacity)


    def getReferenceProxyDisplayPoints(self, percent, maxPoints):
        """
        Method:      getReferenceProxyDisplayPoints( int percent, int maxPoints ) -> numpy array (nPoints,3)
        Description: Returns an array with the vertices of the object in object space.
                     This function is not accurate but should be used for preview purposes only.
                     If the object is not a mesh, returns nothing.
        Parameter:   percent = percent (\%) of points of the mesh that will be returned.
        Parameter:   maxPoints = maximum number of points that will be in the returned array (-1
                                 means there is not a maximum fixed).

        """
        return _pymaxwell5.CmaxwellObject_getReferenceProxyDisplayPoints(self, percent, maxPoints)


    def getColorID(self):
        """
        Method:      getColorID() -> (Crgb,ok)
        Description: Gets the color used by this object in the Object ID render channel.
        """
        return _pymaxwell5.CmaxwellObject_getColorID(self)


    def setColorID(self, color):
        """
        Method:      setColorID( Crgb ) -> 1 = Success, 0 = Fail
        Description: Sets the color used by this object in the Object ID render channel. RGB
                     values must always be in the 0-1 range.
        """
        return _pymaxwell5.CmaxwellObject_setColorID(self, color)


    def setGeometryDirty(self):
        """
        Method:      setGeometryDirty() -> 1 = Success, 0 = Fail
        Description: Method used to recalculate structures needed in interactive mode when the
                     object changes. It is not needed to call it if the UVs or material change,
                     but just should be called when the mesh or base change.
        """
        return _pymaxwell5.CmaxwellObject_setGeometryDirty(self)


    def initializeMesh(self, nVertex, nNormals, nTriangles, positionsPerVertex):
        """initializeMesh(CmaxwellObject self, dword nVertex, dword nNormals, dword nTriangles, dword positionsPerVertex) -> byte"""
        return _pymaxwell5.CmaxwellObject_initializeMesh(self, nVertex, nNormals, nTriangles, positionsPerVertex)


    def resizeMesh(self, newNVertex, newNNormals, newNTriangles, newNpositionsPerVertex):
        """
        Method:      resizeMesh( newNVertex, nweNNormals, nesNFaces, newNpositionsPervertex)
                     -> 1  = Success, 0 = Fail
        Description: This function reinitializes all the basic geometry and UV arrays. The number of
                     UV channels and their ids remain the same, but UV's are zeroed. Motion blur
                     vertices can be wiped (if there were) setting newNpositionsPerVertex = 1, or
                     added (if there weren't) setting newNpositionsPerVertex = 2.
        """
        return _pymaxwell5.CmaxwellObject_resizeMesh(self, newNVertex, newNNormals, newNTriangles, newNpositionsPerVertex)


    def generateCustomUVW(self, iChannel, iGeneratorType):
        """generateCustomUVW(CmaxwellObject self, dword iChannel, dword iGeneratorType) -> byte"""
        return _pymaxwell5.CmaxwellObject_generateCustomUVW(self, iChannel, iGeneratorType)


    def getUVWChannelProperties(self, iChannel):
        """
        Method:      getUVWChannelProperties( iChannel )
                      -> (int projType, bool custumProj, Cbase projectorBase, float startLatitude,
                         float endLatutide, float startLongitude, float endLongitude,
                         float startAngle, float endAngle, bool mirrorBackFaces, ok)
        """
        return _pymaxwell5.CmaxwellObject_getUVWChannelProperties(self, iChannel)


    def getGlobalXform(self):
        """getGlobalXform(CmaxwellObject self) -> PyObject *"""
        return _pymaxwell5.CmaxwellObject_getGlobalXform(self)


    def getGlobalNormalsXform(self):
        """getGlobalNormalsXform(CmaxwellObject self) -> PyObject *"""
        return _pymaxwell5.CmaxwellObject_getGlobalNormalsXform(self)


    def getInverseGlobalXform(self):
        """getInverseGlobalXform(CmaxwellObject self) -> PyObject *"""
        return _pymaxwell5.CmaxwellObject_getInverseGlobalXform(self)


    def getInverseGlobalNormalsXform(self):
        """getInverseGlobalNormalsXform(CmaxwellObject self) -> PyObject *"""
        return _pymaxwell5.CmaxwellObject_getInverseGlobalNormalsXform(self)


    def isGeometryLoader(self):
        """
        Method:      isGeometryLoader() -> (bool,ok)
        Description: Checks whether the object was created by a geometry loader extension
        """
        return _pymaxwell5.CmaxwellObject_isGeometryLoader(self)


    def isGeometryProcedural(self):
        """
        Method:      isGeometryProcedural() -> (bool,ok)
        Description: Checks whether the object was created by a procedural extension
        """
        return _pymaxwell5.CmaxwellObject_isGeometryProcedural(self)


    def hasGeometryModifiers(self):
        """
        Method:      hasGeometryModifiers() -> (bool,ok)
        Description: Checks whether the object has a geometry modifier extension
        """
        return _pymaxwell5.CmaxwellObject_hasGeometryModifiers(self)


    def applyGeometryModifierExtension(self, extensionParams):
        """applyGeometryModifierExtension(CmaxwellObject self, PyObject * extensionParams) -> byte"""
        return _pymaxwell5.CmaxwellObject_applyGeometryModifierExtension(self, extensionParams)


    def cleanAllGeometryModifierExtensions(self):
        """cleanAllGeometryModifierExtensions(CmaxwellObject self) -> byte"""
        return _pymaxwell5.CmaxwellObject_cleanAllGeometryModifierExtensions(self)


    def getGeometryLoaderExtensionParams(self):
        """getGeometryLoaderExtensionParams(CmaxwellObject self) -> PyObject *"""
        return _pymaxwell5.CmaxwellObject_getGeometryLoaderExtensionParams(self)


    def getGeometryProceduralExtensionParams(self):
        """getGeometryProceduralExtensionParams(CmaxwellObject self) -> PyObject *"""
        return _pymaxwell5.CmaxwellObject_getGeometryProceduralExtensionParams(self)


    def getGeometryModifierExtensionsNumber(self):
        """getGeometryModifierExtensionsNumber(CmaxwellObject self) -> PyObject *"""
        return _pymaxwell5.CmaxwellObject_getGeometryModifierExtensionsNumber(self)


    def getGeometryModifierExtensionParamsAtIndex(self, modifierExtensionsIndex):
        """getGeometryModifierExtensionParamsAtIndex(CmaxwellObject self, dword modifierExtensionsIndex) -> PyObject *"""
        return _pymaxwell5.CmaxwellObject_getGeometryModifierExtensionParamsAtIndex(self, modifierExtensionsIndex)


    def getCustomDataChunksCount(self):
        """getCustomDataChunksCount(CmaxwellObject self) -> dword"""
        return _pymaxwell5.CmaxwellObject_getCustomDataChunksCount(self)


    def addCustomDataChunk(self, name, pydata):
        """addCustomDataChunk(CmaxwellObject self, char const * name, PyObject * pydata) -> PyObject *"""
        return _pymaxwell5.CmaxwellObject_addCustomDataChunk(self, name, pydata)


    def getCustomDataChunkByName(self, name):
        """getCustomDataChunkByName(CmaxwellObject self, char const * name) -> PyObject *"""
        return _pymaxwell5.CmaxwellObject_getCustomDataChunkByName(self, name)


    def getCustomDataChunkAtIndex(self, index):
        """getCustomDataChunkAtIndex(CmaxwellObject self, dword index) -> PyObject *"""
        return _pymaxwell5.CmaxwellObject_getCustomDataChunkAtIndex(self, index)


    def getCustomDataChunkIndex(self, name):
        """getCustomDataChunkIndex(CmaxwellObject self, char const * name) -> int"""
        return _pymaxwell5.CmaxwellObject_getCustomDataChunkIndex(self, name)


    def removeCustomDataChunk(self, name):
        """removeCustomDataChunk(CmaxwellObject self, char const * name) -> byte"""
        return _pymaxwell5.CmaxwellObject_removeCustomDataChunk(self, name)


    def removeCustomDataChunkAtIndex(self, index):
        """removeCustomDataChunkAtIndex(CmaxwellObject self, dword index) -> byte"""
        return _pymaxwell5.CmaxwellObject_removeCustomDataChunkAtIndex(self, index)


    def addToCustomAlpha(self, groupName):
        """
        Method:      addToCustomAlpha( groupName ) -> 1 = Success, 0 = Fail
        Description: Adds the object to the custom alpha group named 'groupName'.
        """
        return _pymaxwell5.CmaxwellObject_addToCustomAlpha(self, groupName)


    def removeFromCustomAlpha(self, *args):
        """
        Method:      removeFromCustomAlpha( groupName ) -> 1 = Success, 0 = Fail
        Description: Removes the object from the custom alpha group named 'groupName'.
        Method:      removeFromCustomAlpha() -> 1 = Success, 0 = Fail
        Description: Removes the object from all custom alpha groups.
        """
        return _pymaxwell5.CmaxwellObject_removeFromCustomAlpha(self, *args)


    def getNumCustomAlphaChannels(self):
        """
        Method:      removeFromCustomAlpha() -> (nChannels,ok)
        Description: Number of custom alpha channels/groups.
        """
        return _pymaxwell5.CmaxwellObject_getNumCustomAlphaChannels(self)


    def getCustomAlphaChannels(self):
        """
        Method:      getCustomAlphaChannels( groupName ) -> (channelsNamesList,ok)
        Description: Gets a names list of all the custom alpha channels created.
        """
        return _pymaxwell5.CmaxwellObject_getCustomAlphaChannels(self)


    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the CmaxwellObject was initialized.
        """
        return _pymaxwell5.CmaxwellObject_isNull(self)


    def __str__(self):
        """__str__(CmaxwellObject self) -> char *"""
        return _pymaxwell5.CmaxwellObject___str__(self)


    def __init__(self):
        """__init__(CmaxwellObject self) -> CmaxwellObject"""
        _pymaxwell5.CmaxwellObject_swiginit(self, _pymaxwell5.new_CmaxwellObject())
    __swig_destroy__ = _pymaxwell5.delete_CmaxwellObject
CmaxwellObject.free = new_instancemethod(_pymaxwell5.CmaxwellObject_free, None, CmaxwellObject)
CmaxwellObject.getName = new_instancemethod(_pymaxwell5.CmaxwellObject_getName, None, CmaxwellObject)
CmaxwellObject.setName = new_instancemethod(_pymaxwell5.CmaxwellObject_setName, None, CmaxwellObject)
CmaxwellObject.isMesh = new_instancemethod(_pymaxwell5.CmaxwellObject_isMesh, None, CmaxwellObject)
CmaxwellObject.isInstance = new_instancemethod(_pymaxwell5.CmaxwellObject_isInstance, None, CmaxwellObject)
CmaxwellObject.getInstanced = new_instancemethod(_pymaxwell5.CmaxwellObject_getInstanced, None, CmaxwellObject)
CmaxwellObject.getReferencedScenePath = new_instancemethod(_pymaxwell5.CmaxwellObject_getReferencedScenePath, None, CmaxwellObject)
CmaxwellObject.setReferencedScenePath = new_instancemethod(_pymaxwell5.CmaxwellObject_setReferencedScenePath, None, CmaxwellObject)
CmaxwellObject.getReferencedSceneMaterial = new_instancemethod(_pymaxwell5.CmaxwellObject_getReferencedSceneMaterial, None, CmaxwellObject)
CmaxwellObject.setReferencedSceneMaterial = new_instancemethod(_pymaxwell5.CmaxwellObject_setReferencedSceneMaterial, None, CmaxwellObject)
CmaxwellObject.getReferencedOverrideFlags = new_instancemethod(_pymaxwell5.CmaxwellObject_getReferencedOverrideFlags, None, CmaxwellObject)
CmaxwellObject.setReferencedOverrideFlags = new_instancemethod(_pymaxwell5.CmaxwellObject_setReferencedOverrideFlags, None, CmaxwellObject)
CmaxwellObject.mergeMeshes = new_instancemethod(_pymaxwell5.CmaxwellObject_mergeMeshes, None, CmaxwellObject)
CmaxwellObject.getParent = new_instancemethod(_pymaxwell5.CmaxwellObject_getParent, None, CmaxwellObject)
CmaxwellObject.setParent = new_instancemethod(_pymaxwell5.CmaxwellObject_setParent, None, CmaxwellObject)
CmaxwellObject.getUuid = new_instancemethod(_pymaxwell5.CmaxwellObject_getUuid, None, CmaxwellObject)
CmaxwellObject.setUuid = new_instancemethod(_pymaxwell5.CmaxwellObject_setUuid, None, CmaxwellObject)
CmaxwellObject.getMaterial = new_instancemethod(_pymaxwell5.CmaxwellObject_getMaterial, None, CmaxwellObject)
CmaxwellObject.setMaterial = new_instancemethod(_pymaxwell5.CmaxwellObject_setMaterial, None, CmaxwellObject)
CmaxwellObject.getBackfaceMaterial = new_instancemethod(_pymaxwell5.CmaxwellObject_getBackfaceMaterial, None, CmaxwellObject)
CmaxwellObject.setBackfaceMaterial = new_instancemethod(_pymaxwell5.CmaxwellObject_setBackfaceMaterial, None, CmaxwellObject)
CmaxwellObject.getRenderBooleanType = new_instancemethod(_pymaxwell5.CmaxwellObject_getRenderBooleanType, None, CmaxwellObject)
CmaxwellObject.setRenderBooleanType = new_instancemethod(_pymaxwell5.CmaxwellObject_setRenderBooleanType, None, CmaxwellObject)
CmaxwellObject.addExcludedLight = new_instancemethod(_pymaxwell5.CmaxwellObject_addExcludedLight, None, CmaxwellObject)
CmaxwellObject.removeExcludedLight = new_instancemethod(_pymaxwell5.CmaxwellObject_removeExcludedLight, None, CmaxwellObject)
CmaxwellObject.getNumExcludedLights = new_instancemethod(_pymaxwell5.CmaxwellObject_getNumExcludedLights, None, CmaxwellObject)
CmaxwellObject.getExcludedLightAtIndex = new_instancemethod(_pymaxwell5.CmaxwellObject_getExcludedLightAtIndex, None, CmaxwellObject)
CmaxwellObject.getProperties = new_instancemethod(_pymaxwell5.CmaxwellObject_getProperties, None, CmaxwellObject)
CmaxwellObject.setProperties = new_instancemethod(_pymaxwell5.CmaxwellObject_setProperties, None, CmaxwellObject)
CmaxwellObject.getDependencies = new_instancemethod(_pymaxwell5.CmaxwellObject_getDependencies, None, CmaxwellObject)
CmaxwellObject.getVerticesCount = new_instancemethod(_pymaxwell5.CmaxwellObject_getVerticesCount, None, CmaxwellObject)
CmaxwellObject.getTrianglesCount = new_instancemethod(_pymaxwell5.CmaxwellObject_getTrianglesCount, None, CmaxwellObject)
CmaxwellObject.getNormalsCount = new_instancemethod(_pymaxwell5.CmaxwellObject_getNormalsCount, None, CmaxwellObject)
CmaxwellObject.getPositionsPerVertexCount = new_instancemethod(_pymaxwell5.CmaxwellObject_getPositionsPerVertexCount, None, CmaxwellObject)
CmaxwellObject.getChannelsUVWCount = new_instancemethod(_pymaxwell5.CmaxwellObject_getChannelsUVWCount, None, CmaxwellObject)
CmaxwellObject.getTriangleGroupsCount = new_instancemethod(_pymaxwell5.CmaxwellObject_getTriangleGroupsCount, None, CmaxwellObject)
CmaxwellObject.addChannelUVW = new_instancemethod(_pymaxwell5.CmaxwellObject_addChannelUVW, None, CmaxwellObject)
CmaxwellObject.getUVWChannelId = new_instancemethod(_pymaxwell5.CmaxwellObject_getUVWChannelId, None, CmaxwellObject)
CmaxwellObject.generateSphericalUVW = new_instancemethod(_pymaxwell5.CmaxwellObject_generateSphericalUVW, None, CmaxwellObject)
CmaxwellObject.generateCylindricalUVW = new_instancemethod(_pymaxwell5.CmaxwellObject_generateCylindricalUVW, None, CmaxwellObject)
CmaxwellObject.generateCubicUVW = new_instancemethod(_pymaxwell5.CmaxwellObject_generateCubicUVW, None, CmaxwellObject)
CmaxwellObject.generatePlanarUVW = new_instancemethod(_pymaxwell5.CmaxwellObject_generatePlanarUVW, None, CmaxwellObject)
CmaxwellObject.getVertex = new_instancemethod(_pymaxwell5.CmaxwellObject_getVertex, None, CmaxwellObject)
CmaxwellObject.setVertex = new_instancemethod(_pymaxwell5.CmaxwellObject_setVertex, None, CmaxwellObject)
CmaxwellObject.getNormal = new_instancemethod(_pymaxwell5.CmaxwellObject_getNormal, None, CmaxwellObject)
CmaxwellObject.setNormal = new_instancemethod(_pymaxwell5.CmaxwellObject_setNormal, None, CmaxwellObject)
CmaxwellObject.getBoundingBox = new_instancemethod(_pymaxwell5.CmaxwellObject_getBoundingBox, None, CmaxwellObject)
CmaxwellObject.getBoundingBoxTransformed = new_instancemethod(_pymaxwell5.CmaxwellObject_getBoundingBoxTransformed, None, CmaxwellObject)
CmaxwellObject.getTriangle = new_instancemethod(_pymaxwell5.CmaxwellObject_getTriangle, None, CmaxwellObject)
CmaxwellObject.setTriangle = new_instancemethod(_pymaxwell5.CmaxwellObject_setTriangle, None, CmaxwellObject)
CmaxwellObject.getTriangleUVW = new_instancemethod(_pymaxwell5.CmaxwellObject_getTriangleUVW, None, CmaxwellObject)
CmaxwellObject.setTriangleUVW = new_instancemethod(_pymaxwell5.CmaxwellObject_setTriangleUVW, None, CmaxwellObject)
CmaxwellObject.getTriangleMaterial = new_instancemethod(_pymaxwell5.CmaxwellObject_getTriangleMaterial, None, CmaxwellObject)
CmaxwellObject.setTriangleMaterial = new_instancemethod(_pymaxwell5.CmaxwellObject_setTriangleMaterial, None, CmaxwellObject)
CmaxwellObject.getTriangleQuadBuddy = new_instancemethod(_pymaxwell5.CmaxwellObject_getTriangleQuadBuddy, None, CmaxwellObject)
CmaxwellObject.setTriangleQuadBuddy = new_instancemethod(_pymaxwell5.CmaxwellObject_setTriangleQuadBuddy, None, CmaxwellObject)
CmaxwellObject.getBaseAndPivot = new_instancemethod(_pymaxwell5.CmaxwellObject_getBaseAndPivot, None, CmaxwellObject)
CmaxwellObject.setBaseAndPivot = new_instancemethod(_pymaxwell5.CmaxwellObject_setBaseAndPivot, None, CmaxwellObject)
CmaxwellObject.getWorldTransform = new_instancemethod(_pymaxwell5.CmaxwellObject_getWorldTransform, None, CmaxwellObject)
CmaxwellObject.isInWorldCoordinates = new_instancemethod(_pymaxwell5.CmaxwellObject_isInWorldCoordinates, None, CmaxwellObject)
CmaxwellObject.getTransformSubstepsCount = new_instancemethod(_pymaxwell5.CmaxwellObject_getTransformSubstepsCount, None, CmaxwellObject)
CmaxwellObject.getTransformStepInfoByIndex = new_instancemethod(_pymaxwell5.CmaxwellObject_getTransformStepInfoByIndex, None, CmaxwellObject)
CmaxwellObject.getPosition = new_instancemethod(_pymaxwell5.CmaxwellObject_getPosition, None, CmaxwellObject)
CmaxwellObject.setPosition = new_instancemethod(_pymaxwell5.CmaxwellObject_setPosition, None, CmaxwellObject)
CmaxwellObject.getRotation = new_instancemethod(_pymaxwell5.CmaxwellObject_getRotation, None, CmaxwellObject)
CmaxwellObject.setRotation = new_instancemethod(_pymaxwell5.CmaxwellObject_setRotation, None, CmaxwellObject)
CmaxwellObject.getScale = new_instancemethod(_pymaxwell5.CmaxwellObject_getScale, None, CmaxwellObject)
CmaxwellObject.setScale = new_instancemethod(_pymaxwell5.CmaxwellObject_setScale, None, CmaxwellObject)
CmaxwellObject.getShear = new_instancemethod(_pymaxwell5.CmaxwellObject_getShear, None, CmaxwellObject)
CmaxwellObject.setShear = new_instancemethod(_pymaxwell5.CmaxwellObject_setShear, None, CmaxwellObject)
CmaxwellObject.getPivotPosition = new_instancemethod(_pymaxwell5.CmaxwellObject_getPivotPosition, None, CmaxwellObject)
CmaxwellObject.setPivotPosition = new_instancemethod(_pymaxwell5.CmaxwellObject_setPivotPosition, None, CmaxwellObject)
CmaxwellObject.getPivotRotation = new_instancemethod(_pymaxwell5.CmaxwellObject_getPivotRotation, None, CmaxwellObject)
CmaxwellObject.setPivotRotation = new_instancemethod(_pymaxwell5.CmaxwellObject_setPivotRotation, None, CmaxwellObject)
CmaxwellObject.isPosRotScaleInitialized = new_instancemethod(_pymaxwell5.CmaxwellObject_isPosRotScaleInitialized, None, CmaxwellObject)
CmaxwellObject.addTrianglesGroup = new_instancemethod(_pymaxwell5.CmaxwellObject_addTrianglesGroup, None, CmaxwellObject)
CmaxwellObject.recalculateNormals = new_instancemethod(_pymaxwell5.CmaxwellObject_recalculateNormals, None, CmaxwellObject)
CmaxwellObject.cleanGeometry = new_instancemethod(_pymaxwell5.CmaxwellObject_cleanGeometry, None, CmaxwellObject)
CmaxwellObject.getHide = new_instancemethod(_pymaxwell5.CmaxwellObject_getHide, None, CmaxwellObject)
CmaxwellObject.setHide = new_instancemethod(_pymaxwell5.CmaxwellObject_setHide, None, CmaxwellObject)
CmaxwellObject.getHideToCamera = new_instancemethod(_pymaxwell5.CmaxwellObject_getHideToCamera, None, CmaxwellObject)
CmaxwellObject.setHideToCamera = new_instancemethod(_pymaxwell5.CmaxwellObject_setHideToCamera, None, CmaxwellObject)
CmaxwellObject.getHideToCameraInShadowsPass = new_instancemethod(_pymaxwell5.CmaxwellObject_getHideToCameraInShadowsPass, None, CmaxwellObject)
CmaxwellObject.setHideToCameraInShadowsPass = new_instancemethod(_pymaxwell5.CmaxwellObject_setHideToCameraInShadowsPass, None, CmaxwellObject)
CmaxwellObject.getHideToCameraInObjectId = new_instancemethod(_pymaxwell5.CmaxwellObject_getHideToCameraInObjectId, None, CmaxwellObject)
CmaxwellObject.setHideToCameraInObjectId = new_instancemethod(_pymaxwell5.CmaxwellObject_setHideToCameraInObjectId, None, CmaxwellObject)
CmaxwellObject.getHideToReflectionsRefractions = new_instancemethod(_pymaxwell5.CmaxwellObject_getHideToReflectionsRefractions, None, CmaxwellObject)
CmaxwellObject.setHideToReflectionsRefractions = new_instancemethod(_pymaxwell5.CmaxwellObject_setHideToReflectionsRefractions, None, CmaxwellObject)
CmaxwellObject.getHideToGI = new_instancemethod(_pymaxwell5.CmaxwellObject_getHideToGI, None, CmaxwellObject)
CmaxwellObject.setHideToGI = new_instancemethod(_pymaxwell5.CmaxwellObject_setHideToGI, None, CmaxwellObject)
CmaxwellObject.isExcludedOfCutPlanes = new_instancemethod(_pymaxwell5.CmaxwellObject_isExcludedOfCutPlanes, None, CmaxwellObject)
CmaxwellObject.excludeOfCutPlanes = new_instancemethod(_pymaxwell5.CmaxwellObject_excludeOfCutPlanes, None, CmaxwellObject)
CmaxwellObject.getBackfaceCulling = new_instancemethod(_pymaxwell5.CmaxwellObject_getBackfaceCulling, None, CmaxwellObject)
CmaxwellObject.setBackfaceCulling = new_instancemethod(_pymaxwell5.CmaxwellObject_setBackfaceCulling, None, CmaxwellObject)
CmaxwellObject.getOpacity = new_instancemethod(_pymaxwell5.CmaxwellObject_getOpacity, None, CmaxwellObject)
CmaxwellObject.setOpacity = new_instancemethod(_pymaxwell5.CmaxwellObject_setOpacity, None, CmaxwellObject)
CmaxwellObject.getReferenceProxyDisplayPoints = new_instancemethod(_pymaxwell5.CmaxwellObject_getReferenceProxyDisplayPoints, None, CmaxwellObject)
CmaxwellObject.getColorID = new_instancemethod(_pymaxwell5.CmaxwellObject_getColorID, None, CmaxwellObject)
CmaxwellObject.setColorID = new_instancemethod(_pymaxwell5.CmaxwellObject_setColorID, None, CmaxwellObject)
CmaxwellObject.setGeometryDirty = new_instancemethod(_pymaxwell5.CmaxwellObject_setGeometryDirty, None, CmaxwellObject)
CmaxwellObject.initializeMesh = new_instancemethod(_pymaxwell5.CmaxwellObject_initializeMesh, None, CmaxwellObject)
CmaxwellObject.resizeMesh = new_instancemethod(_pymaxwell5.CmaxwellObject_resizeMesh, None, CmaxwellObject)
CmaxwellObject.generateCustomUVW = new_instancemethod(_pymaxwell5.CmaxwellObject_generateCustomUVW, None, CmaxwellObject)
CmaxwellObject.getUVWChannelProperties = new_instancemethod(_pymaxwell5.CmaxwellObject_getUVWChannelProperties, None, CmaxwellObject)
CmaxwellObject.getGlobalXform = new_instancemethod(_pymaxwell5.CmaxwellObject_getGlobalXform, None, CmaxwellObject)
CmaxwellObject.getGlobalNormalsXform = new_instancemethod(_pymaxwell5.CmaxwellObject_getGlobalNormalsXform, None, CmaxwellObject)
CmaxwellObject.getInverseGlobalXform = new_instancemethod(_pymaxwell5.CmaxwellObject_getInverseGlobalXform, None, CmaxwellObject)
CmaxwellObject.getInverseGlobalNormalsXform = new_instancemethod(_pymaxwell5.CmaxwellObject_getInverseGlobalNormalsXform, None, CmaxwellObject)
CmaxwellObject.isGeometryLoader = new_instancemethod(_pymaxwell5.CmaxwellObject_isGeometryLoader, None, CmaxwellObject)
CmaxwellObject.isGeometryProcedural = new_instancemethod(_pymaxwell5.CmaxwellObject_isGeometryProcedural, None, CmaxwellObject)
CmaxwellObject.hasGeometryModifiers = new_instancemethod(_pymaxwell5.CmaxwellObject_hasGeometryModifiers, None, CmaxwellObject)
CmaxwellObject.applyGeometryModifierExtension = new_instancemethod(_pymaxwell5.CmaxwellObject_applyGeometryModifierExtension, None, CmaxwellObject)
CmaxwellObject.cleanAllGeometryModifierExtensions = new_instancemethod(_pymaxwell5.CmaxwellObject_cleanAllGeometryModifierExtensions, None, CmaxwellObject)
CmaxwellObject.getGeometryLoaderExtensionParams = new_instancemethod(_pymaxwell5.CmaxwellObject_getGeometryLoaderExtensionParams, None, CmaxwellObject)
CmaxwellObject.getGeometryProceduralExtensionParams = new_instancemethod(_pymaxwell5.CmaxwellObject_getGeometryProceduralExtensionParams, None, CmaxwellObject)
CmaxwellObject.getGeometryModifierExtensionsNumber = new_instancemethod(_pymaxwell5.CmaxwellObject_getGeometryModifierExtensionsNumber, None, CmaxwellObject)
CmaxwellObject.getGeometryModifierExtensionParamsAtIndex = new_instancemethod(_pymaxwell5.CmaxwellObject_getGeometryModifierExtensionParamsAtIndex, None, CmaxwellObject)
CmaxwellObject.getCustomDataChunksCount = new_instancemethod(_pymaxwell5.CmaxwellObject_getCustomDataChunksCount, None, CmaxwellObject)
CmaxwellObject.addCustomDataChunk = new_instancemethod(_pymaxwell5.CmaxwellObject_addCustomDataChunk, None, CmaxwellObject)
CmaxwellObject.getCustomDataChunkByName = new_instancemethod(_pymaxwell5.CmaxwellObject_getCustomDataChunkByName, None, CmaxwellObject)
CmaxwellObject.getCustomDataChunkAtIndex = new_instancemethod(_pymaxwell5.CmaxwellObject_getCustomDataChunkAtIndex, None, CmaxwellObject)
CmaxwellObject.getCustomDataChunkIndex = new_instancemethod(_pymaxwell5.CmaxwellObject_getCustomDataChunkIndex, None, CmaxwellObject)
CmaxwellObject.removeCustomDataChunk = new_instancemethod(_pymaxwell5.CmaxwellObject_removeCustomDataChunk, None, CmaxwellObject)
CmaxwellObject.removeCustomDataChunkAtIndex = new_instancemethod(_pymaxwell5.CmaxwellObject_removeCustomDataChunkAtIndex, None, CmaxwellObject)
CmaxwellObject.addToCustomAlpha = new_instancemethod(_pymaxwell5.CmaxwellObject_addToCustomAlpha, None, CmaxwellObject)
CmaxwellObject.removeFromCustomAlpha = new_instancemethod(_pymaxwell5.CmaxwellObject_removeFromCustomAlpha, None, CmaxwellObject)
CmaxwellObject.getNumCustomAlphaChannels = new_instancemethod(_pymaxwell5.CmaxwellObject_getNumCustomAlphaChannels, None, CmaxwellObject)
CmaxwellObject.getCustomAlphaChannels = new_instancemethod(_pymaxwell5.CmaxwellObject_getCustomAlphaChannels, None, CmaxwellObject)
CmaxwellObject.isNull = new_instancemethod(_pymaxwell5.CmaxwellObject_isNull, None, CmaxwellObject)
CmaxwellObject.__str__ = new_instancemethod(_pymaxwell5.CmaxwellObject___str__, None, CmaxwellObject)
CmaxwellObject_swigregister = _pymaxwell5.CmaxwellObject_swigregister
CmaxwellObject_swigregister(CmaxwellObject)

class CmaxwellEnvironment(object):
    """
    Class CmaxwellEnvironment

      Class that contains the Maxwell environment description.

      Example code:

        environment = scene.getEnvironment()
        environment.setActiveSky('PHYSICAL')
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getSunPositionType(self):
        """
        Method:      getSunPositionType() -> (type,ok)
        Description: Gets the sun position input type.
        Parameter:   type = 0 -> Latitude/Longitude
                            1 -> Angles (zenith/azimuth)
                            2 -> Direction (vector)

        """
        return _pymaxwell5.CmaxwellEnvironment_getSunPositionType(self)


    def setSunPositionType(self, positionType):
        """
        Method:      setSunPositionType( type ) -> 1 = Success, 0 = Fail
        Description: Sets the sun position input type. Call this function after
                     setPhysicalSkyGeometry and longitude and latitude parameters will be
                     overridden.
        Parameter:   type = 0 -> Latitude/Longitude
                            1 -> Angles (zenith/azimuth)
                            2 -> Direction (vector)

        """
        return _pymaxwell5.CmaxwellEnvironment_setSunPositionType(self, positionType)


    def getSkyConstant(self):
        """
        Method:      getSkyConstant() -> (float luminance , Crgb color0, Crgb color90,
                                          float controlPoint, ok)
        Description: get the parameters of the constant (non physical) sky
        Parameter:   luminance = any value greater than 0.
        Parameter:   color0 = Crgb color at the horizont
        Parameter:   color90 = Crgb color at the zenith
        Parameter:   controlPoint = Range from 0 to 90. Sets the angle where the two colors are
                     50/50 mixed (i.e controlPoint = 45.0 means that the color at 45 angle is 50\%
                     color0 and 50\% color90
        """
        return _pymaxwell5.CmaxwellEnvironment_getSkyConstant(self)


    def setSkyConstant(self, luminance, color0, color90, controlPoint):
        """
        Method:      setSkyConstant( luminance, color0, color90, controlPoint )
                     -> 1 = Success, 0 = Fail
        Description: set the parameters of the constant (non physical) sky
        Parameter:   luminance = any value greater than 0.
        Parameter:   color0 = Crgb color at the horizon
        Parameter:   color90 = Crgb color at the zenith
        Parameter:   controlPoint = Range from 0 to 90. Sets the angle where the two colors are
                     50/50 mixed (i.e controlPoint = 45.0 means that the color at 45 angle is 50\%
                     color0 and 50\% color90
        """
        return _pymaxwell5.CmaxwellEnvironment_setSkyConstant(self, luminance, color0, color90, controlPoint)


    def getSunLongitudeAndLatitude(self):
        """
        Method:      getSunLongitudeAndLatitude()
                     -> (longitude,latitude,gmt,dayOfYear,timeOfDay,ok)
        Description: Gets the location of the sun when sunpositiontype = 0
        Parameter:   longitude from -180.0 to 180.0;
        Parameter:   latitude from -90.0 to 90.0
        Parameter:   gmt from -12 to 12; default 0
        Parameter:   dayOfYear from 1 to 365; default 100
        Parameter:   timeOfDay from 0.0 to 24.0; default 17
        """
        return _pymaxwell5.CmaxwellEnvironment_getSunLongitudeAndLatitude(self)


    def setSunLongitudeAndLatitude(self, longitude, latitude, gmt, dayOfYear, timeOfDay):
        """
        Method:      setSunLongitudeAndLatitude( longitude, latitude, gmt, dayOfYear, timeOfDay )
                     -> 1 = Success, 0 = Fail
        Description: Sets the location of the sun when sunpositiontype = 0
        Parameter:   longitude from -180.0 to 180.0;
        Parameter:   latitude from -90.0 to 90.0
        Parameter:   gmt from -12 to 12; default 0
        Parameter:   dayOfYear from 1 to 365; default 100
        Parameter:   timeOfDay from 0.0 to 24.0; default 17
        """
        return _pymaxwell5.CmaxwellEnvironment_setSunLongitudeAndLatitude(self, longitude, latitude, gmt, dayOfYear, timeOfDay)


    def getSunAngles(self):
        """
        Method:      getSunAngles() -> (float zenith, float azimuth, ok)
        Description: It is an alternative way to get the sun position based on spheric angles.
        Parameter:   zenith = from 0.0 to 90.0 in radians.
        Parameter:   azimuth = from 0.0 to 360.0 in radians.
        """
        return _pymaxwell5.CmaxwellEnvironment_getSunAngles(self)


    def setSunAngles(self, zenith, azimuth):
        """
        Method:      setSunAngles( zenith, azimuth ) -> 1 = Success, 0 = Fail
        Description: It is an alternative way to set the sun position based on spheric angles.
        Parameter:   zenith = from 0.0 to 90.0 in radians.
        Parameter:   azimuth = from 0.0 to 360.0 in radians.
        """
        return _pymaxwell5.CmaxwellEnvironment_setSunAngles(self, zenith, azimuth)


    def getSunDirection(self):
        """
        Method:      getSunDirection() -> (Cvector,ok)
        Description: Gets sun direction that defines sun position.

        """
        return _pymaxwell5.CmaxwellEnvironment_getSunDirection(self)


    def setSunDirection(self, dir):
        """
        Method:      setSunDirection( Cvector ) -> 1 = Success, 0 = Fail
        Description: It is an alternative way to set the sun position based on a direction.
        """
        return _pymaxwell5.CmaxwellEnvironment_setSunDirection(self, dir)


    def getSunRotation(self):
        """
        Method:      getSunRotation() -> (rotation,ok)
        Description: Defines the ground rotation of the sky hemisphere.
        Parameter:   basisRotation (in radians) from 0 to 2PI radians.
        """
        return _pymaxwell5.CmaxwellEnvironment_getSunRotation(self)


    def setSunRotation(self, rotation):
        """
        Method:      setSunRotation( basisRotation ) -> 1 = Success, 0 = Fail
        Description: Defines the ground rotation of the sky hemisphere.
        Parameter:   basisRotation (in radians) from 0 to 2PI radians.
        """
        return _pymaxwell5.CmaxwellEnvironment_setSunRotation(self, rotation)


    def getSunProperties(self):
        """
        Method:      getSunProperties() -> (type,sunTemperature,sunPowerScaleFactor,radiusMultiplier,
                     constantColor,ok)
        Description: Gets the sun properties used for both physical and constant skies when sun is
                     enabled.
        Parameter:   type: SUN_DISABLED, SUN_PHYSICAL (default) or SUN_CONSTANT.
        Parameter:   sunTemperature: in kelvins.Default 5777. Range: 100 - 1000000.
        Parameter:   sunPowerScaleFactor: total power refered to the Earth's sun. For example a
                     value of 0.8 would mean a sun emititng 0.8 times less energy than ours.
                     Default: 1.0. Range: Is allowed any value greater than 0.
        Parameter:   radiusMultiplier. Range: 0.01 - 1000.
        Parameter:   constantColor. Default rgb(1,1,1).
        """
        return _pymaxwell5.CmaxwellEnvironment_getSunProperties(self)


    def setSunProperties(self, type, sunTemperature, sunPowerScaleFactor, radiusMultiplier, constantColor):
        """
        Method:      setSunProperties( type, sunTemperature, sunPowerScaleFactor, radiusMultiplier,
                     Crgb constantColor ) -> 1 = Success, 0 = Fail
        Description: Gets the sun properties used for both physical and constant skies when sun is
                     enabled.
        Parameter:   type: SUN_DISABLED, SUN_PHYSICAL (default) or SUN_CONSTANT.
        Parameter:   sunTemperature: in kelvins.Default 5777. Range: 100 - 1000000.
        Parameter:   sunPowerScaleFactor: total power refered to the Earth's sun. For example a
                     value of 0.8 would mean a sun emititng 0.8 times less energy than ours.
                     Default: 1.0. Range: Is allowed any value greater than 0.
        Parameter:   radiusMultiplier. Range: 0.01 - 1000.
        Parameter:   constantColor. Default rgb(1,1,1).
        """
        return _pymaxwell5.CmaxwellEnvironment_setSunProperties(self, type, sunTemperature, sunPowerScaleFactor, radiusMultiplier, constantColor)


    def getPhysicalSkyAtmosphere(self):
        """
        Method:      getPhysicalSkyAtmosphere() -> (float intensity, float ozone, float water,
                                                    float angstromTurbidity, float wavelengthTurbidity,
                                                    float aerosolAlbedo, float asymmetryFactor,
                                                    float planetReflectance, ok)
        Description: Gets the atmosphere parameters of the physical sky.
        Parameter:   intensity. Default: 1.0 Range: Any value greater than 0.
        Parameter:   ozone ( cms ) Default: 0.4.
                     Range: Any value greater than 0 (usually between 0 and 1).
        Parameter:   water: water vapor ( cms ) Default: 2.0 Range: Any value greater than 0.
        Parameter:   angstromTurbidity: coefficient Default: 0.04 Range: Any value greater than 0.
        Parameter:   wavelengthTurbidity exponent Default: 1.2 Range: Any value greater than 0.
        Parameter:   aerosolAlbedo: aerosol albedo Default: 0.8 Range: (0,1).
        Parameter:   asymmetryFactor: 'anisotropy' of aerosol.
                     Default: 0.7. Range (-0.99999, 0.99999).
        Parameter:   planetReflectance: Range (0.0, 1.0)
        """
        return _pymaxwell5.CmaxwellEnvironment_getPhysicalSkyAtmosphere(self)


    def setPhysicalSkyAtmosphere(self, intensity, ozone, water, angstromTurbidity, wavelengthTurbidity, aerosolAlbedo, asymmetryFactor, planetReflectance):
        """
        Method:      setPhysicalSkyAtmosphere( intensity, ozone, water, angstromTurbidity,
                       wavelengthTurbidity, aerosolAlbedo, asymmetryFactor, planetReflectance )
                     -> 1 = Success, 0 = Fail
        Description: Sets the atmosphere parameters of the physical sky
        Parameter:   intensity. Default: 1.0 Range: Any value greater than 0
        Parameter:   ozone ( cms ) Default: 0.4
                     Range: Any value greater than 0 (usually between 0 and 1)
        Parameter:   water: water vapor ( cms ) Default: 2.0 Range: Any value greater than 0
        Parameter:   angstrom turbidity: coefficient Default: 0.04 Range: Any value greater than 0
        Parameter:   wavelength turbidity exponent Default: 1.2 Range: Any value greater than 0
        Parameter:   aerosolAlbedo: aerosol albedo Default: 0.8 Range: (0-1)
        Parameter:   asymmetryFactor: 'anisotropy' of aerosol.
                     Default: 0.7. Range (-0.99999, 0.99999);
        Parameter:   planetReflectance: Range (0.0, 1.0)
        """
        return _pymaxwell5.CmaxwellEnvironment_setPhysicalSkyAtmosphere(self, intensity, ozone, water, angstromTurbidity, wavelengthTurbidity, aerosolAlbedo, asymmetryFactor, planetReflectance)


    def getActiveSky(self):
        """
        Method:       getActiveSky() -> string
        Description:  Gets the active sky used. Returns:
                      None <- no sky,
                      'CONSTANT' <- constant sky
                      'PHYSICAL' <- physical sky
        """
        return _pymaxwell5.CmaxwellEnvironment_getActiveSky(self)


    def setActiveSky(self, pActiveSky):
        """
        Method:       setActiveSky( sky ) -> 1 = Success, 0 = Fail
        Description:  Sets the active sky
        Parameter:    sky = '' (no sky), 'CONSTANT' or 'PHYSICAL'
        """
        return _pymaxwell5.CmaxwellEnvironment_setActiveSky(self, pActiveSky)


    def getSunDirectionUsedForRendering(self):
        """
        Method:      getSunDirectionUsedForRendering() -> (Cvector,ok)
        Description: Returns the sun direction. If the sun position was set through a direction
                     vector, it returns the same vector. If the sun position was set through
                     latitude/longitude or through angles it returns the translation to a direction.
                     This function is mainly used for drawing the sky in a viewport.
        """
        return _pymaxwell5.CmaxwellEnvironment_getSunDirectionUsedForRendering(self)


    def saveSkyToHDR(self, path, xRes, yRes):
        """
        Method:       saveSkyToHDR( path, xRes, yRes ) -> 1 = Success, 0 = Fail
        Description:  Saves current sky to an HDR file in the path 'path' with the given
                      resolution.
        """
        return _pymaxwell5.CmaxwellEnvironment_saveSkyToHDR(self, path, xRes, yRes)


    def saveSkyToPreset(self, path):
        """
        Method:       saveSkyToPreset( path ) -> 1 = Success, 0 = Fail
        Description:  Saves current physical sky values to a sky preset file in 'path'.
        """
        return _pymaxwell5.CmaxwellEnvironment_saveSkyToPreset(self, path)


    def loadSkyFromPreset(self, path):
        """
        Method:       loadSkyFromPreset( path ) -> 1 = Success, 0 = Fail
        Description:  Loads 'path' preset file into the scene replacing current physical sky values.
        """
        return _pymaxwell5.CmaxwellEnvironment_loadSkyFromPreset(self, path)


    def getSkyColor(self, dir):
        """
        Method:       getSkyColor( Cvector dir ) -> (Crgb hdr, Crgb8 ldr, ok)
        Description:  Returns sky RGB color (already tonemapped and after exposure is applied) of
                      the current sky values in the given direction.
        """
        return _pymaxwell5.CmaxwellEnvironment_getSkyColor(self, dir)


    def getSkyColorNoTonemapped(self, dir):
        """
        Method:       getSkyColorNoTonemapped( Cvector dir ) -> (Crgb,ok)
        Description:  Returns sky RGB color (without tonemapping nor exposure) of the current
                      sky values in the given direction
        """
        return _pymaxwell5.CmaxwellEnvironment_getSkyColorNoTonemapped(self, dir)


    def isEnvironmentEnabled(self):
        """
        Method:      isEnvironmentEnabled() -> (bool,ok)
        Description: Checks whether the IBL (Image Based Lighting) is enabled
        """
        return _pymaxwell5.CmaxwellEnvironment_isEnvironmentEnabled(self)


    def enableEnvironment(self, enable):
        """
        Method:      enableEnvironment( enable ) -> 1 = Success, 0 = Fail
        Description: Sets the IBL (Image Based Lighting) on/off.
        """
        return _pymaxwell5.CmaxwellEnvironment_enableEnvironment(self, enable)


    def getEnvironmentWeight(self):
        """
        Method:      getEnvironmentWeight() -> (weight,ok)
        Description: Gets the value for the global multiplier of all the environment layers. This
                     multiplier is the number used in multilight to adjust all the layers at once.
        """
        return _pymaxwell5.CmaxwellEnvironment_getEnvironmentWeight(self)


    def setEnvironmentWeight(self, weight):
        """
        Method:      setEnvironmentWeight( weight ) -> 1 = Success, 0 = Fail
        Description: Sets the value for the global multiplier of all the environment layers. This
                     multiplier is the number used in multilight to adjust all the layers at once.
        """
        return _pymaxwell5.CmaxwellEnvironment_setEnvironmentWeight(self, weight)


    def setEnvironmentLayer(self, layerType, pBitmapFileName, state, sphericalMapping, interpolate, intensity, uTile, vTile, uTileOffset, vTileOffset):
        """
        Method: setEnvironmentLayer( layerType, bitmapFileName, bool state, bool sphericalMapping,
                     bool interpolate, real intensity, real uTile, real vTile, real uTileOffset,
                     real vTileOffset ) -> 1 = Success, 0 = Fail
        Description: Sets the parameters of each environment layer.
        Parameter:   layerType sets the layer type. IBL_LAYER_BACKGROUND, IBL_LAYER_REFLECTION,
                     IBL_LAYER_REFRACTION or IBL_LAYER_ILLUMINATION.
        Parameter:   bitmapFileName. Path of the texture file.
        Parameter:   channel state: 0 = Disabled;  1 = Enabled; 2 = Use active sky instead.
                     Default: Enabled.
        Parameter:   sphericalMapping can only be set to false when pLayerName = 'background'.
        Parameter:   interpolate: If true, pixel values are interpolated.
        Parameter:   Intensity. Range: From 0.0 to 1000.0 (default 1.0).
        Parameter:   uTile/vTile. Range: From 0.0001 to 1000.0 (default 1.0).
        Parameter:   uTileOffset/vTileOffset. Range: From 0.0 to 360.0 (default 0.0).
        """
        return _pymaxwell5.CmaxwellEnvironment_setEnvironmentLayer(self, layerType, pBitmapFileName, state, sphericalMapping, interpolate, intensity, uTile, vTile, uTileOffset, vTileOffset)


    def getEnvironmentLayer(self, layerType):
        """
        Method: getEnvironmentLayer( layerType ) -> (bitmapFileName,state,sphericalMapping,
                     interpolate,intensity,uTile,vTile,uTileOffset,vTileOffset,ok)
        Description: Gets the parameters of each environment layer.
        Parameter:   layerType sets the layer type. IBL_LAYER_BACKGROUND, IBL_LAYER_REFLECTION,
                     IBL_LAYER_REFRACTION or IBL_LAYER_ILLUMINATION.
        Parameter:   bitmapFileName. Path of the texture file.
        Parameter:   channel state: 0 = Disabled;  1 = Enabled; 2 = Use active sky instead.
                     Default: Enabled.
        Parameter:   sphericalMapping can only be set to false when pLayerName = 'background'.
        Parameter:   interpolate: If true, pixel values are interpolated.
        Parameter:   Intensity. Range: From 0.0 to 1000.0 (default 1.0).
        Parameter:   uTile/vTile. Range: From 0.0001 to 1000.0 (default 1.0).
        Parameter:   uTileOffset/vTileOffset. Range: From 0.0 to 360.0 (default 0.0).
        """
        return _pymaxwell5.CmaxwellEnvironment_getEnvironmentLayer(self, layerType)


    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the CmaxwellEnvironment was initialized.
        """
        return _pymaxwell5.CmaxwellEnvironment_isNull(self)


    def __str__(self):
        """__str__(CmaxwellEnvironment self) -> char *"""
        return _pymaxwell5.CmaxwellEnvironment___str__(self)


    def __init__(self):
        """__init__(CmaxwellEnvironment self) -> CmaxwellEnvironment"""
        _pymaxwell5.CmaxwellEnvironment_swiginit(self, _pymaxwell5.new_CmaxwellEnvironment())
    __swig_destroy__ = _pymaxwell5.delete_CmaxwellEnvironment
CmaxwellEnvironment.getSunPositionType = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getSunPositionType, None, CmaxwellEnvironment)
CmaxwellEnvironment.setSunPositionType = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_setSunPositionType, None, CmaxwellEnvironment)
CmaxwellEnvironment.getSkyConstant = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getSkyConstant, None, CmaxwellEnvironment)
CmaxwellEnvironment.setSkyConstant = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_setSkyConstant, None, CmaxwellEnvironment)
CmaxwellEnvironment.getSunLongitudeAndLatitude = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getSunLongitudeAndLatitude, None, CmaxwellEnvironment)
CmaxwellEnvironment.setSunLongitudeAndLatitude = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_setSunLongitudeAndLatitude, None, CmaxwellEnvironment)
CmaxwellEnvironment.getSunAngles = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getSunAngles, None, CmaxwellEnvironment)
CmaxwellEnvironment.setSunAngles = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_setSunAngles, None, CmaxwellEnvironment)
CmaxwellEnvironment.getSunDirection = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getSunDirection, None, CmaxwellEnvironment)
CmaxwellEnvironment.setSunDirection = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_setSunDirection, None, CmaxwellEnvironment)
CmaxwellEnvironment.getSunRotation = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getSunRotation, None, CmaxwellEnvironment)
CmaxwellEnvironment.setSunRotation = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_setSunRotation, None, CmaxwellEnvironment)
CmaxwellEnvironment.getSunProperties = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getSunProperties, None, CmaxwellEnvironment)
CmaxwellEnvironment.setSunProperties = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_setSunProperties, None, CmaxwellEnvironment)
CmaxwellEnvironment.getPhysicalSkyAtmosphere = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getPhysicalSkyAtmosphere, None, CmaxwellEnvironment)
CmaxwellEnvironment.setPhysicalSkyAtmosphere = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_setPhysicalSkyAtmosphere, None, CmaxwellEnvironment)
CmaxwellEnvironment.getActiveSky = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getActiveSky, None, CmaxwellEnvironment)
CmaxwellEnvironment.setActiveSky = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_setActiveSky, None, CmaxwellEnvironment)
CmaxwellEnvironment.getSunDirectionUsedForRendering = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getSunDirectionUsedForRendering, None, CmaxwellEnvironment)
CmaxwellEnvironment.saveSkyToHDR = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_saveSkyToHDR, None, CmaxwellEnvironment)
CmaxwellEnvironment.saveSkyToPreset = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_saveSkyToPreset, None, CmaxwellEnvironment)
CmaxwellEnvironment.loadSkyFromPreset = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_loadSkyFromPreset, None, CmaxwellEnvironment)
CmaxwellEnvironment.getSkyColor = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getSkyColor, None, CmaxwellEnvironment)
CmaxwellEnvironment.getSkyColorNoTonemapped = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getSkyColorNoTonemapped, None, CmaxwellEnvironment)
CmaxwellEnvironment.isEnvironmentEnabled = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_isEnvironmentEnabled, None, CmaxwellEnvironment)
CmaxwellEnvironment.enableEnvironment = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_enableEnvironment, None, CmaxwellEnvironment)
CmaxwellEnvironment.getEnvironmentWeight = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getEnvironmentWeight, None, CmaxwellEnvironment)
CmaxwellEnvironment.setEnvironmentWeight = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_setEnvironmentWeight, None, CmaxwellEnvironment)
CmaxwellEnvironment.setEnvironmentLayer = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_setEnvironmentLayer, None, CmaxwellEnvironment)
CmaxwellEnvironment.getEnvironmentLayer = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_getEnvironmentLayer, None, CmaxwellEnvironment)
CmaxwellEnvironment.isNull = new_instancemethod(_pymaxwell5.CmaxwellEnvironment_isNull, None, CmaxwellEnvironment)
CmaxwellEnvironment.__str__ = new_instancemethod(_pymaxwell5.CmaxwellEnvironment___str__, None, CmaxwellEnvironment)
CmaxwellEnvironment_swigregister = _pymaxwell5.CmaxwellEnvironment_swigregister
CmaxwellEnvironment_swigregister(CmaxwellEnvironment)

class CdwVector2D(object):
    """Proxy of C++ Cvector2DT<(dword)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def x(self):
        """x(CdwVector2D self) -> unsigned long"""
        return _pymaxwell5.CdwVector2D_x(self)


    def y(self):
        """y(CdwVector2D self) -> unsigned long"""
        return _pymaxwell5.CdwVector2D_y(self)


    def u(self):
        """u(CdwVector2D self) -> unsigned long"""
        return _pymaxwell5.CdwVector2D_u(self)


    def v(self):
        """v(CdwVector2D self) -> unsigned long"""
        return _pymaxwell5.CdwVector2D_v(self)


    def i(self):
        """i(CdwVector2D self) -> unsigned long"""
        return _pymaxwell5.CdwVector2D_i(self)


    def j(self):
        """j(CdwVector2D self) -> unsigned long"""
        return _pymaxwell5.CdwVector2D_j(self)


    def __getitem__(self, i):
        """__getitem__(CdwVector2D self, unsigned int i) -> unsigned long"""
        return _pymaxwell5.CdwVector2D___getitem__(self, i)


    def isZero(self):
        """isZero(CdwVector2D self) -> bool"""
        return _pymaxwell5.CdwVector2D_isZero(self)


    def setZero(self):
        """setZero(CdwVector2D self)"""
        return _pymaxwell5.CdwVector2D_setZero(self)


    def assign(self, *args):
        """
        assign(CdwVector2D self, double vx, double vy)
        assign(CdwVector2D self, CdwVector2D v)
        """
        return _pymaxwell5.CdwVector2D_assign(self, *args)


    def __lt__(self, vector):
        """__lt__(CdwVector2D self, CdwVector2D vector) -> bool"""
        return _pymaxwell5.CdwVector2D___lt__(self, vector)


    def __gt__(self, vector):
        """__gt__(CdwVector2D self, CdwVector2D vector) -> bool"""
        return _pymaxwell5.CdwVector2D___gt__(self, vector)


    def __eq__(self, v):
        """__eq__(CdwVector2D self, CdwVector2D v) -> bool"""
        return _pymaxwell5.CdwVector2D___eq__(self, v)


    def isEqual(self, v):
        """isEqual(CdwVector2D self, CdwVector2D v) -> bool"""
        return _pymaxwell5.CdwVector2D_isEqual(self, v)


    def abs(self):
        """abs(CdwVector2D self)"""
        return _pymaxwell5.CdwVector2D_abs(self)


    def negate(self, *args):
        """
        negate(CdwVector2D self)
        negate(CdwVector2D self, CdwVector2D v)
        """
        return _pymaxwell5.CdwVector2D_negate(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(CdwVector2D self, double const value)
        __iadd__(CdwVector2D self, CdwVector2D v)
        """
        return _pymaxwell5.CdwVector2D___iadd__(self, *args)


    def add(self, *args):
        """
        add(CdwVector2D self, double const value)
        add(CdwVector2D self, CdwVector2D v)
        add(CdwVector2D self, CdwVector2D v, double const value)
        add(CdwVector2D self, CdwVector2D v1, CdwVector2D v2)
        add(CdwVector2D self, CdwVector2D v1, CdwVector2D v2, CdwVector2D v3)
        """
        return _pymaxwell5.CdwVector2D_add(self, *args)


    def __isub__(self, *args):
        """
        __isub__(CdwVector2D self, double const value)
        __isub__(CdwVector2D self, CdwVector2D v)
        """
        return _pymaxwell5.CdwVector2D___isub__(self, *args)


    def substract(self, *args):
        """
        substract(CdwVector2D self, double const value)
        substract(CdwVector2D self, CdwVector2D v)
        substract(CdwVector2D self, CdwVector2D v1, CdwVector2D v2)
        """
        return _pymaxwell5.CdwVector2D_substract(self, *args)


    def scale(self, *args):
        """
        scale(CdwVector2D self, double const scale)
        scale(CdwVector2D self, CdwVector2D v, double const scale)
        """
        return _pymaxwell5.CdwVector2D_scale(self, *args)


    def scaleAdd(self, v, scale):
        """scaleAdd(CdwVector2D self, CdwVector2D v, double const scale)"""
        return _pymaxwell5.CdwVector2D_scaleAdd(self, v, scale)


    def scaleSubstract(self, v, scale):
        """scaleSubstract(CdwVector2D self, CdwVector2D v, double const scale)"""
        return _pymaxwell5.CdwVector2D_scaleSubstract(self, v, scale)


    def midPoint(self, *args):
        """
        midPoint(CdwVector2D self, CdwVector2D p1, CdwVector2D p2)
        midPoint(CdwVector2D self, CdwVector2D p1, CdwVector2D p2, CdwVector2D p3)
        """
        return _pymaxwell5.CdwVector2D_midPoint(self, *args)


    def __imul__(self, *args):
        """
        __imul__(CdwVector2D self, double const scale)
        __imul__(CdwVector2D self, CdwVector2D v)
        """
        return _pymaxwell5.CdwVector2D___imul__(self, *args)


    def product(self, v):
        """product(CdwVector2D self, CdwVector2D v)"""
        return _pymaxwell5.CdwVector2D_product(self, v)


    def invert(self, *args):
        """
        invert(CdwVector2D self)
        invert(CdwVector2D self, CdwVector2D v)
        """
        return _pymaxwell5.CdwVector2D_invert(self, *args)


    def dot(self, v):
        """dot(CdwVector2D self, CdwVector2D v) -> double"""
        return _pymaxwell5.CdwVector2D_dot(self, v)


    def norm(self):
        """norm(CdwVector2D self) -> double"""
        return _pymaxwell5.CdwVector2D_norm(self)


    def squareNorm(self):
        """squareNorm(CdwVector2D self) -> double"""
        return _pymaxwell5.CdwVector2D_squareNorm(self)


    def normalize(self):
        """normalize(CdwVector2D self)"""
        return _pymaxwell5.CdwVector2D_normalize(self)


    def __str__(self):
        """__str__(CdwVector2D self) -> char *"""
        return _pymaxwell5.CdwVector2D___str__(self)


    def __init__(self):
        """__init__(Cvector2DT<(dword)> self) -> CdwVector2D"""
        _pymaxwell5.CdwVector2D_swiginit(self, _pymaxwell5.new_CdwVector2D())
    __swig_destroy__ = _pymaxwell5.delete_CdwVector2D
CdwVector2D.x = new_instancemethod(_pymaxwell5.CdwVector2D_x, None, CdwVector2D)
CdwVector2D.y = new_instancemethod(_pymaxwell5.CdwVector2D_y, None, CdwVector2D)
CdwVector2D.u = new_instancemethod(_pymaxwell5.CdwVector2D_u, None, CdwVector2D)
CdwVector2D.v = new_instancemethod(_pymaxwell5.CdwVector2D_v, None, CdwVector2D)
CdwVector2D.i = new_instancemethod(_pymaxwell5.CdwVector2D_i, None, CdwVector2D)
CdwVector2D.j = new_instancemethod(_pymaxwell5.CdwVector2D_j, None, CdwVector2D)
CdwVector2D.__getitem__ = new_instancemethod(_pymaxwell5.CdwVector2D___getitem__, None, CdwVector2D)
CdwVector2D.isZero = new_instancemethod(_pymaxwell5.CdwVector2D_isZero, None, CdwVector2D)
CdwVector2D.setZero = new_instancemethod(_pymaxwell5.CdwVector2D_setZero, None, CdwVector2D)
CdwVector2D.assign = new_instancemethod(_pymaxwell5.CdwVector2D_assign, None, CdwVector2D)
CdwVector2D.__lt__ = new_instancemethod(_pymaxwell5.CdwVector2D___lt__, None, CdwVector2D)
CdwVector2D.__gt__ = new_instancemethod(_pymaxwell5.CdwVector2D___gt__, None, CdwVector2D)
CdwVector2D.__eq__ = new_instancemethod(_pymaxwell5.CdwVector2D___eq__, None, CdwVector2D)
CdwVector2D.isEqual = new_instancemethod(_pymaxwell5.CdwVector2D_isEqual, None, CdwVector2D)
CdwVector2D.abs = new_instancemethod(_pymaxwell5.CdwVector2D_abs, None, CdwVector2D)
CdwVector2D.negate = new_instancemethod(_pymaxwell5.CdwVector2D_negate, None, CdwVector2D)
CdwVector2D.__iadd__ = new_instancemethod(_pymaxwell5.CdwVector2D___iadd__, None, CdwVector2D)
CdwVector2D.add = new_instancemethod(_pymaxwell5.CdwVector2D_add, None, CdwVector2D)
CdwVector2D.__isub__ = new_instancemethod(_pymaxwell5.CdwVector2D___isub__, None, CdwVector2D)
CdwVector2D.substract = new_instancemethod(_pymaxwell5.CdwVector2D_substract, None, CdwVector2D)
CdwVector2D.scale = new_instancemethod(_pymaxwell5.CdwVector2D_scale, None, CdwVector2D)
CdwVector2D.scaleAdd = new_instancemethod(_pymaxwell5.CdwVector2D_scaleAdd, None, CdwVector2D)
CdwVector2D.scaleSubstract = new_instancemethod(_pymaxwell5.CdwVector2D_scaleSubstract, None, CdwVector2D)
CdwVector2D.midPoint = new_instancemethod(_pymaxwell5.CdwVector2D_midPoint, None, CdwVector2D)
CdwVector2D.__imul__ = new_instancemethod(_pymaxwell5.CdwVector2D___imul__, None, CdwVector2D)
CdwVector2D.product = new_instancemethod(_pymaxwell5.CdwVector2D_product, None, CdwVector2D)
CdwVector2D.invert = new_instancemethod(_pymaxwell5.CdwVector2D_invert, None, CdwVector2D)
CdwVector2D.dot = new_instancemethod(_pymaxwell5.CdwVector2D_dot, None, CdwVector2D)
CdwVector2D.norm = new_instancemethod(_pymaxwell5.CdwVector2D_norm, None, CdwVector2D)
CdwVector2D.squareNorm = new_instancemethod(_pymaxwell5.CdwVector2D_squareNorm, None, CdwVector2D)
CdwVector2D.normalize = new_instancemethod(_pymaxwell5.CdwVector2D_normalize, None, CdwVector2D)
CdwVector2D.__str__ = new_instancemethod(_pymaxwell5.CdwVector2D___str__, None, CdwVector2D)
CdwVector2D_swigregister = _pymaxwell5.CdwVector2D_swigregister
CdwVector2D_swigregister(CdwVector2D)

class CuVector2D(CdwVector2D):
    """Proxy of C++ CuVector2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def isZero(self):
        """isZero(CuVector2D self) -> bool"""
        return _pymaxwell5.CuVector2D_isZero(self)


    def __str__(self):
        """__str__(CuVector2D self) -> char *"""
        return _pymaxwell5.CuVector2D___str__(self)


    def __init__(self):
        """__init__(CuVector2D self) -> CuVector2D"""
        _pymaxwell5.CuVector2D_swiginit(self, _pymaxwell5.new_CuVector2D())
    __swig_destroy__ = _pymaxwell5.delete_CuVector2D
CuVector2D.isZero = new_instancemethod(_pymaxwell5.CuVector2D_isZero, None, CuVector2D)
CuVector2D.__str__ = new_instancemethod(_pymaxwell5.CuVector2D___str__, None, CuVector2D)
CuVector2D_swigregister = _pymaxwell5.CuVector2D_swigregister
CuVector2D_swigregister(CuVector2D)

class CwVector2D(object):
    """Proxy of C++ Cvector2DT<(word)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def x(self):
        """x(CwVector2D self) -> unsigned short"""
        return _pymaxwell5.CwVector2D_x(self)


    def y(self):
        """y(CwVector2D self) -> unsigned short"""
        return _pymaxwell5.CwVector2D_y(self)


    def u(self):
        """u(CwVector2D self) -> unsigned short"""
        return _pymaxwell5.CwVector2D_u(self)


    def v(self):
        """v(CwVector2D self) -> unsigned short"""
        return _pymaxwell5.CwVector2D_v(self)


    def i(self):
        """i(CwVector2D self) -> unsigned short"""
        return _pymaxwell5.CwVector2D_i(self)


    def j(self):
        """j(CwVector2D self) -> unsigned short"""
        return _pymaxwell5.CwVector2D_j(self)


    def __getitem__(self, i):
        """__getitem__(CwVector2D self, unsigned int i) -> unsigned short"""
        return _pymaxwell5.CwVector2D___getitem__(self, i)


    def isZero(self):
        """isZero(CwVector2D self) -> bool"""
        return _pymaxwell5.CwVector2D_isZero(self)


    def setZero(self):
        """setZero(CwVector2D self)"""
        return _pymaxwell5.CwVector2D_setZero(self)


    def assign(self, *args):
        """
        assign(CwVector2D self, double vx, double vy)
        assign(CwVector2D self, CwVector2D v)
        """
        return _pymaxwell5.CwVector2D_assign(self, *args)


    def __lt__(self, vector):
        """__lt__(CwVector2D self, CwVector2D vector) -> bool"""
        return _pymaxwell5.CwVector2D___lt__(self, vector)


    def __gt__(self, vector):
        """__gt__(CwVector2D self, CwVector2D vector) -> bool"""
        return _pymaxwell5.CwVector2D___gt__(self, vector)


    def __eq__(self, v):
        """__eq__(CwVector2D self, CwVector2D v) -> bool"""
        return _pymaxwell5.CwVector2D___eq__(self, v)


    def isEqual(self, v):
        """isEqual(CwVector2D self, CwVector2D v) -> bool"""
        return _pymaxwell5.CwVector2D_isEqual(self, v)


    def abs(self):
        """abs(CwVector2D self)"""
        return _pymaxwell5.CwVector2D_abs(self)


    def negate(self, *args):
        """
        negate(CwVector2D self)
        negate(CwVector2D self, CwVector2D v)
        """
        return _pymaxwell5.CwVector2D_negate(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(CwVector2D self, double const value)
        __iadd__(CwVector2D self, CwVector2D v)
        """
        return _pymaxwell5.CwVector2D___iadd__(self, *args)


    def add(self, *args):
        """
        add(CwVector2D self, double const value)
        add(CwVector2D self, CwVector2D v)
        add(CwVector2D self, CwVector2D v, double const value)
        add(CwVector2D self, CwVector2D v1, CwVector2D v2)
        add(CwVector2D self, CwVector2D v1, CwVector2D v2, CwVector2D v3)
        """
        return _pymaxwell5.CwVector2D_add(self, *args)


    def __isub__(self, *args):
        """
        __isub__(CwVector2D self, double const value)
        __isub__(CwVector2D self, CwVector2D v)
        """
        return _pymaxwell5.CwVector2D___isub__(self, *args)


    def substract(self, *args):
        """
        substract(CwVector2D self, double const value)
        substract(CwVector2D self, CwVector2D v)
        substract(CwVector2D self, CwVector2D v1, CwVector2D v2)
        """
        return _pymaxwell5.CwVector2D_substract(self, *args)


    def scale(self, *args):
        """
        scale(CwVector2D self, double const scale)
        scale(CwVector2D self, CwVector2D v, double const scale)
        """
        return _pymaxwell5.CwVector2D_scale(self, *args)


    def scaleAdd(self, v, scale):
        """scaleAdd(CwVector2D self, CwVector2D v, double const scale)"""
        return _pymaxwell5.CwVector2D_scaleAdd(self, v, scale)


    def scaleSubstract(self, v, scale):
        """scaleSubstract(CwVector2D self, CwVector2D v, double const scale)"""
        return _pymaxwell5.CwVector2D_scaleSubstract(self, v, scale)


    def midPoint(self, *args):
        """
        midPoint(CwVector2D self, CwVector2D p1, CwVector2D p2)
        midPoint(CwVector2D self, CwVector2D p1, CwVector2D p2, CwVector2D p3)
        """
        return _pymaxwell5.CwVector2D_midPoint(self, *args)


    def __imul__(self, *args):
        """
        __imul__(CwVector2D self, double const scale)
        __imul__(CwVector2D self, CwVector2D v)
        """
        return _pymaxwell5.CwVector2D___imul__(self, *args)


    def product(self, v):
        """product(CwVector2D self, CwVector2D v)"""
        return _pymaxwell5.CwVector2D_product(self, v)


    def invert(self, *args):
        """
        invert(CwVector2D self)
        invert(CwVector2D self, CwVector2D v)
        """
        return _pymaxwell5.CwVector2D_invert(self, *args)


    def dot(self, v):
        """dot(CwVector2D self, CwVector2D v) -> double"""
        return _pymaxwell5.CwVector2D_dot(self, v)


    def norm(self):
        """norm(CwVector2D self) -> double"""
        return _pymaxwell5.CwVector2D_norm(self)


    def squareNorm(self):
        """squareNorm(CwVector2D self) -> double"""
        return _pymaxwell5.CwVector2D_squareNorm(self)


    def normalize(self):
        """normalize(CwVector2D self)"""
        return _pymaxwell5.CwVector2D_normalize(self)


    def __str__(self):
        """__str__(CwVector2D self) -> char *"""
        return _pymaxwell5.CwVector2D___str__(self)


    def __init__(self):
        """__init__(Cvector2DT<(word)> self) -> CwVector2D"""
        _pymaxwell5.CwVector2D_swiginit(self, _pymaxwell5.new_CwVector2D())
    __swig_destroy__ = _pymaxwell5.delete_CwVector2D
CwVector2D.x = new_instancemethod(_pymaxwell5.CwVector2D_x, None, CwVector2D)
CwVector2D.y = new_instancemethod(_pymaxwell5.CwVector2D_y, None, CwVector2D)
CwVector2D.u = new_instancemethod(_pymaxwell5.CwVector2D_u, None, CwVector2D)
CwVector2D.v = new_instancemethod(_pymaxwell5.CwVector2D_v, None, CwVector2D)
CwVector2D.i = new_instancemethod(_pymaxwell5.CwVector2D_i, None, CwVector2D)
CwVector2D.j = new_instancemethod(_pymaxwell5.CwVector2D_j, None, CwVector2D)
CwVector2D.__getitem__ = new_instancemethod(_pymaxwell5.CwVector2D___getitem__, None, CwVector2D)
CwVector2D.isZero = new_instancemethod(_pymaxwell5.CwVector2D_isZero, None, CwVector2D)
CwVector2D.setZero = new_instancemethod(_pymaxwell5.CwVector2D_setZero, None, CwVector2D)
CwVector2D.assign = new_instancemethod(_pymaxwell5.CwVector2D_assign, None, CwVector2D)
CwVector2D.__lt__ = new_instancemethod(_pymaxwell5.CwVector2D___lt__, None, CwVector2D)
CwVector2D.__gt__ = new_instancemethod(_pymaxwell5.CwVector2D___gt__, None, CwVector2D)
CwVector2D.__eq__ = new_instancemethod(_pymaxwell5.CwVector2D___eq__, None, CwVector2D)
CwVector2D.isEqual = new_instancemethod(_pymaxwell5.CwVector2D_isEqual, None, CwVector2D)
CwVector2D.abs = new_instancemethod(_pymaxwell5.CwVector2D_abs, None, CwVector2D)
CwVector2D.negate = new_instancemethod(_pymaxwell5.CwVector2D_negate, None, CwVector2D)
CwVector2D.__iadd__ = new_instancemethod(_pymaxwell5.CwVector2D___iadd__, None, CwVector2D)
CwVector2D.add = new_instancemethod(_pymaxwell5.CwVector2D_add, None, CwVector2D)
CwVector2D.__isub__ = new_instancemethod(_pymaxwell5.CwVector2D___isub__, None, CwVector2D)
CwVector2D.substract = new_instancemethod(_pymaxwell5.CwVector2D_substract, None, CwVector2D)
CwVector2D.scale = new_instancemethod(_pymaxwell5.CwVector2D_scale, None, CwVector2D)
CwVector2D.scaleAdd = new_instancemethod(_pymaxwell5.CwVector2D_scaleAdd, None, CwVector2D)
CwVector2D.scaleSubstract = new_instancemethod(_pymaxwell5.CwVector2D_scaleSubstract, None, CwVector2D)
CwVector2D.midPoint = new_instancemethod(_pymaxwell5.CwVector2D_midPoint, None, CwVector2D)
CwVector2D.__imul__ = new_instancemethod(_pymaxwell5.CwVector2D___imul__, None, CwVector2D)
CwVector2D.product = new_instancemethod(_pymaxwell5.CwVector2D_product, None, CwVector2D)
CwVector2D.invert = new_instancemethod(_pymaxwell5.CwVector2D_invert, None, CwVector2D)
CwVector2D.dot = new_instancemethod(_pymaxwell5.CwVector2D_dot, None, CwVector2D)
CwVector2D.norm = new_instancemethod(_pymaxwell5.CwVector2D_norm, None, CwVector2D)
CwVector2D.squareNorm = new_instancemethod(_pymaxwell5.CwVector2D_squareNorm, None, CwVector2D)
CwVector2D.normalize = new_instancemethod(_pymaxwell5.CwVector2D_normalize, None, CwVector2D)
CwVector2D.__str__ = new_instancemethod(_pymaxwell5.CwVector2D___str__, None, CwVector2D)
CwVector2D_swigregister = _pymaxwell5.CwVector2D_swigregister
CwVector2D_swigregister(CwVector2D)

class CfVector2D(object):
    """Proxy of C++ Cvector2DT<(float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def x(self):
        """x(CfVector2D self) -> float"""
        return _pymaxwell5.CfVector2D_x(self)


    def y(self):
        """y(CfVector2D self) -> float"""
        return _pymaxwell5.CfVector2D_y(self)


    def u(self):
        """u(CfVector2D self) -> float"""
        return _pymaxwell5.CfVector2D_u(self)


    def v(self):
        """v(CfVector2D self) -> float"""
        return _pymaxwell5.CfVector2D_v(self)


    def i(self):
        """i(CfVector2D self) -> float"""
        return _pymaxwell5.CfVector2D_i(self)


    def j(self):
        """j(CfVector2D self) -> float"""
        return _pymaxwell5.CfVector2D_j(self)


    def __getitem__(self, i):
        """__getitem__(CfVector2D self, unsigned int i) -> float"""
        return _pymaxwell5.CfVector2D___getitem__(self, i)


    def isZero(self):
        """isZero(CfVector2D self) -> bool"""
        return _pymaxwell5.CfVector2D_isZero(self)


    def setZero(self):
        """setZero(CfVector2D self)"""
        return _pymaxwell5.CfVector2D_setZero(self)


    def assign(self, *args):
        """
        assign(CfVector2D self, double vx, double vy)
        assign(CfVector2D self, CfVector2D v)
        """
        return _pymaxwell5.CfVector2D_assign(self, *args)


    def __lt__(self, vector):
        """__lt__(CfVector2D self, CfVector2D vector) -> bool"""
        return _pymaxwell5.CfVector2D___lt__(self, vector)


    def __gt__(self, vector):
        """__gt__(CfVector2D self, CfVector2D vector) -> bool"""
        return _pymaxwell5.CfVector2D___gt__(self, vector)


    def __eq__(self, v):
        """__eq__(CfVector2D self, CfVector2D v) -> bool"""
        return _pymaxwell5.CfVector2D___eq__(self, v)


    def isEqual(self, v):
        """isEqual(CfVector2D self, CfVector2D v) -> bool"""
        return _pymaxwell5.CfVector2D_isEqual(self, v)


    def abs(self):
        """abs(CfVector2D self)"""
        return _pymaxwell5.CfVector2D_abs(self)


    def negate(self, *args):
        """
        negate(CfVector2D self)
        negate(CfVector2D self, CfVector2D v)
        """
        return _pymaxwell5.CfVector2D_negate(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(CfVector2D self, double const value)
        __iadd__(CfVector2D self, CfVector2D v)
        """
        return _pymaxwell5.CfVector2D___iadd__(self, *args)


    def add(self, *args):
        """
        add(CfVector2D self, double const value)
        add(CfVector2D self, CfVector2D v)
        add(CfVector2D self, CfVector2D v, double const value)
        add(CfVector2D self, CfVector2D v1, CfVector2D v2)
        add(CfVector2D self, CfVector2D v1, CfVector2D v2, CfVector2D v3)
        """
        return _pymaxwell5.CfVector2D_add(self, *args)


    def __isub__(self, *args):
        """
        __isub__(CfVector2D self, double const value)
        __isub__(CfVector2D self, CfVector2D v)
        """
        return _pymaxwell5.CfVector2D___isub__(self, *args)


    def substract(self, *args):
        """
        substract(CfVector2D self, double const value)
        substract(CfVector2D self, CfVector2D v)
        substract(CfVector2D self, CfVector2D v1, CfVector2D v2)
        """
        return _pymaxwell5.CfVector2D_substract(self, *args)


    def scale(self, *args):
        """
        scale(CfVector2D self, double const scale)
        scale(CfVector2D self, CfVector2D v, double const scale)
        """
        return _pymaxwell5.CfVector2D_scale(self, *args)


    def scaleAdd(self, v, scale):
        """scaleAdd(CfVector2D self, CfVector2D v, double const scale)"""
        return _pymaxwell5.CfVector2D_scaleAdd(self, v, scale)


    def scaleSubstract(self, v, scale):
        """scaleSubstract(CfVector2D self, CfVector2D v, double const scale)"""
        return _pymaxwell5.CfVector2D_scaleSubstract(self, v, scale)


    def midPoint(self, *args):
        """
        midPoint(CfVector2D self, CfVector2D p1, CfVector2D p2)
        midPoint(CfVector2D self, CfVector2D p1, CfVector2D p2, CfVector2D p3)
        """
        return _pymaxwell5.CfVector2D_midPoint(self, *args)


    def __imul__(self, *args):
        """
        __imul__(CfVector2D self, double const scale)
        __imul__(CfVector2D self, CfVector2D v)
        """
        return _pymaxwell5.CfVector2D___imul__(self, *args)


    def product(self, v):
        """product(CfVector2D self, CfVector2D v)"""
        return _pymaxwell5.CfVector2D_product(self, v)


    def invert(self, *args):
        """
        invert(CfVector2D self)
        invert(CfVector2D self, CfVector2D v)
        """
        return _pymaxwell5.CfVector2D_invert(self, *args)


    def dot(self, v):
        """dot(CfVector2D self, CfVector2D v) -> double"""
        return _pymaxwell5.CfVector2D_dot(self, v)


    def norm(self):
        """norm(CfVector2D self) -> double"""
        return _pymaxwell5.CfVector2D_norm(self)


    def squareNorm(self):
        """squareNorm(CfVector2D self) -> double"""
        return _pymaxwell5.CfVector2D_squareNorm(self)


    def normalize(self):
        """normalize(CfVector2D self)"""
        return _pymaxwell5.CfVector2D_normalize(self)


    def __str__(self):
        """__str__(CfVector2D self) -> char *"""
        return _pymaxwell5.CfVector2D___str__(self)


    def __init__(self):
        """__init__(Cvector2DT<(float)> self) -> CfVector2D"""
        _pymaxwell5.CfVector2D_swiginit(self, _pymaxwell5.new_CfVector2D())
    __swig_destroy__ = _pymaxwell5.delete_CfVector2D
CfVector2D.x = new_instancemethod(_pymaxwell5.CfVector2D_x, None, CfVector2D)
CfVector2D.y = new_instancemethod(_pymaxwell5.CfVector2D_y, None, CfVector2D)
CfVector2D.u = new_instancemethod(_pymaxwell5.CfVector2D_u, None, CfVector2D)
CfVector2D.v = new_instancemethod(_pymaxwell5.CfVector2D_v, None, CfVector2D)
CfVector2D.i = new_instancemethod(_pymaxwell5.CfVector2D_i, None, CfVector2D)
CfVector2D.j = new_instancemethod(_pymaxwell5.CfVector2D_j, None, CfVector2D)
CfVector2D.__getitem__ = new_instancemethod(_pymaxwell5.CfVector2D___getitem__, None, CfVector2D)
CfVector2D.isZero = new_instancemethod(_pymaxwell5.CfVector2D_isZero, None, CfVector2D)
CfVector2D.setZero = new_instancemethod(_pymaxwell5.CfVector2D_setZero, None, CfVector2D)
CfVector2D.assign = new_instancemethod(_pymaxwell5.CfVector2D_assign, None, CfVector2D)
CfVector2D.__lt__ = new_instancemethod(_pymaxwell5.CfVector2D___lt__, None, CfVector2D)
CfVector2D.__gt__ = new_instancemethod(_pymaxwell5.CfVector2D___gt__, None, CfVector2D)
CfVector2D.__eq__ = new_instancemethod(_pymaxwell5.CfVector2D___eq__, None, CfVector2D)
CfVector2D.isEqual = new_instancemethod(_pymaxwell5.CfVector2D_isEqual, None, CfVector2D)
CfVector2D.abs = new_instancemethod(_pymaxwell5.CfVector2D_abs, None, CfVector2D)
CfVector2D.negate = new_instancemethod(_pymaxwell5.CfVector2D_negate, None, CfVector2D)
CfVector2D.__iadd__ = new_instancemethod(_pymaxwell5.CfVector2D___iadd__, None, CfVector2D)
CfVector2D.add = new_instancemethod(_pymaxwell5.CfVector2D_add, None, CfVector2D)
CfVector2D.__isub__ = new_instancemethod(_pymaxwell5.CfVector2D___isub__, None, CfVector2D)
CfVector2D.substract = new_instancemethod(_pymaxwell5.CfVector2D_substract, None, CfVector2D)
CfVector2D.scale = new_instancemethod(_pymaxwell5.CfVector2D_scale, None, CfVector2D)
CfVector2D.scaleAdd = new_instancemethod(_pymaxwell5.CfVector2D_scaleAdd, None, CfVector2D)
CfVector2D.scaleSubstract = new_instancemethod(_pymaxwell5.CfVector2D_scaleSubstract, None, CfVector2D)
CfVector2D.midPoint = new_instancemethod(_pymaxwell5.CfVector2D_midPoint, None, CfVector2D)
CfVector2D.__imul__ = new_instancemethod(_pymaxwell5.CfVector2D___imul__, None, CfVector2D)
CfVector2D.product = new_instancemethod(_pymaxwell5.CfVector2D_product, None, CfVector2D)
CfVector2D.invert = new_instancemethod(_pymaxwell5.CfVector2D_invert, None, CfVector2D)
CfVector2D.dot = new_instancemethod(_pymaxwell5.CfVector2D_dot, None, CfVector2D)
CfVector2D.norm = new_instancemethod(_pymaxwell5.CfVector2D_norm, None, CfVector2D)
CfVector2D.squareNorm = new_instancemethod(_pymaxwell5.CfVector2D_squareNorm, None, CfVector2D)
CfVector2D.normalize = new_instancemethod(_pymaxwell5.CfVector2D_normalize, None, CfVector2D)
CfVector2D.__str__ = new_instancemethod(_pymaxwell5.CfVector2D___str__, None, CfVector2D)
CfVector2D_swigregister = _pymaxwell5.CfVector2D_swigregister
CfVector2D_swigregister(CfVector2D)

class Cvector2D(object):
    """Proxy of C++ Cvector2DT<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def x(self):
        """x(Cvector2D self) -> double"""
        return _pymaxwell5.Cvector2D_x(self)


    def y(self):
        """y(Cvector2D self) -> double"""
        return _pymaxwell5.Cvector2D_y(self)


    def u(self):
        """u(Cvector2D self) -> double"""
        return _pymaxwell5.Cvector2D_u(self)


    def v(self):
        """v(Cvector2D self) -> double"""
        return _pymaxwell5.Cvector2D_v(self)


    def i(self):
        """i(Cvector2D self) -> double"""
        return _pymaxwell5.Cvector2D_i(self)


    def j(self):
        """j(Cvector2D self) -> double"""
        return _pymaxwell5.Cvector2D_j(self)


    def __getitem__(self, i):
        """__getitem__(Cvector2D self, unsigned int i) -> double"""
        return _pymaxwell5.Cvector2D___getitem__(self, i)


    def isZero(self):
        """isZero(Cvector2D self) -> bool"""
        return _pymaxwell5.Cvector2D_isZero(self)


    def setZero(self):
        """setZero(Cvector2D self)"""
        return _pymaxwell5.Cvector2D_setZero(self)


    def assign(self, *args):
        """
        assign(Cvector2D self, double vx, double vy)
        assign(Cvector2D self, Cvector2D v)
        """
        return _pymaxwell5.Cvector2D_assign(self, *args)


    def __lt__(self, vector):
        """__lt__(Cvector2D self, Cvector2D vector) -> bool"""
        return _pymaxwell5.Cvector2D___lt__(self, vector)


    def __gt__(self, vector):
        """__gt__(Cvector2D self, Cvector2D vector) -> bool"""
        return _pymaxwell5.Cvector2D___gt__(self, vector)


    def __eq__(self, v):
        """__eq__(Cvector2D self, Cvector2D v) -> bool"""
        return _pymaxwell5.Cvector2D___eq__(self, v)


    def isEqual(self, v):
        """isEqual(Cvector2D self, Cvector2D v) -> bool"""
        return _pymaxwell5.Cvector2D_isEqual(self, v)


    def abs(self):
        """abs(Cvector2D self)"""
        return _pymaxwell5.Cvector2D_abs(self)


    def negate(self, *args):
        """
        negate(Cvector2D self)
        negate(Cvector2D self, Cvector2D v)
        """
        return _pymaxwell5.Cvector2D_negate(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(Cvector2D self, double const value)
        __iadd__(Cvector2D self, Cvector2D v)
        """
        return _pymaxwell5.Cvector2D___iadd__(self, *args)


    def add(self, *args):
        """
        add(Cvector2D self, double const value)
        add(Cvector2D self, Cvector2D v)
        add(Cvector2D self, Cvector2D v, double const value)
        add(Cvector2D self, Cvector2D v1, Cvector2D v2)
        add(Cvector2D self, Cvector2D v1, Cvector2D v2, Cvector2D v3)
        """
        return _pymaxwell5.Cvector2D_add(self, *args)


    def __isub__(self, *args):
        """
        __isub__(Cvector2D self, double const value)
        __isub__(Cvector2D self, Cvector2D v)
        """
        return _pymaxwell5.Cvector2D___isub__(self, *args)


    def substract(self, *args):
        """
        substract(Cvector2D self, double const value)
        substract(Cvector2D self, Cvector2D v)
        substract(Cvector2D self, Cvector2D v1, Cvector2D v2)
        """
        return _pymaxwell5.Cvector2D_substract(self, *args)


    def scale(self, *args):
        """
        scale(Cvector2D self, double const scale)
        scale(Cvector2D self, Cvector2D v, double const scale)
        """
        return _pymaxwell5.Cvector2D_scale(self, *args)


    def scaleAdd(self, v, scale):
        """scaleAdd(Cvector2D self, Cvector2D v, double const scale)"""
        return _pymaxwell5.Cvector2D_scaleAdd(self, v, scale)


    def scaleSubstract(self, v, scale):
        """scaleSubstract(Cvector2D self, Cvector2D v, double const scale)"""
        return _pymaxwell5.Cvector2D_scaleSubstract(self, v, scale)


    def midPoint(self, *args):
        """
        midPoint(Cvector2D self, Cvector2D p1, Cvector2D p2)
        midPoint(Cvector2D self, Cvector2D p1, Cvector2D p2, Cvector2D p3)
        """
        return _pymaxwell5.Cvector2D_midPoint(self, *args)


    def __imul__(self, *args):
        """
        __imul__(Cvector2D self, double const scale)
        __imul__(Cvector2D self, Cvector2D v)
        """
        return _pymaxwell5.Cvector2D___imul__(self, *args)


    def product(self, v):
        """product(Cvector2D self, Cvector2D v)"""
        return _pymaxwell5.Cvector2D_product(self, v)


    def invert(self, *args):
        """
        invert(Cvector2D self)
        invert(Cvector2D self, Cvector2D v)
        """
        return _pymaxwell5.Cvector2D_invert(self, *args)


    def dot(self, v):
        """dot(Cvector2D self, Cvector2D v) -> double"""
        return _pymaxwell5.Cvector2D_dot(self, v)


    def norm(self):
        """norm(Cvector2D self) -> double"""
        return _pymaxwell5.Cvector2D_norm(self)


    def squareNorm(self):
        """squareNorm(Cvector2D self) -> double"""
        return _pymaxwell5.Cvector2D_squareNorm(self)


    def normalize(self):
        """normalize(Cvector2D self)"""
        return _pymaxwell5.Cvector2D_normalize(self)


    def __str__(self):
        """__str__(Cvector2D self) -> char *"""
        return _pymaxwell5.Cvector2D___str__(self)


    def __init__(self):
        """__init__(Cvector2DT<(double)> self) -> Cvector2D"""
        _pymaxwell5.Cvector2D_swiginit(self, _pymaxwell5.new_Cvector2D())
    __swig_destroy__ = _pymaxwell5.delete_Cvector2D
Cvector2D.x = new_instancemethod(_pymaxwell5.Cvector2D_x, None, Cvector2D)
Cvector2D.y = new_instancemethod(_pymaxwell5.Cvector2D_y, None, Cvector2D)
Cvector2D.u = new_instancemethod(_pymaxwell5.Cvector2D_u, None, Cvector2D)
Cvector2D.v = new_instancemethod(_pymaxwell5.Cvector2D_v, None, Cvector2D)
Cvector2D.i = new_instancemethod(_pymaxwell5.Cvector2D_i, None, Cvector2D)
Cvector2D.j = new_instancemethod(_pymaxwell5.Cvector2D_j, None, Cvector2D)
Cvector2D.__getitem__ = new_instancemethod(_pymaxwell5.Cvector2D___getitem__, None, Cvector2D)
Cvector2D.isZero = new_instancemethod(_pymaxwell5.Cvector2D_isZero, None, Cvector2D)
Cvector2D.setZero = new_instancemethod(_pymaxwell5.Cvector2D_setZero, None, Cvector2D)
Cvector2D.assign = new_instancemethod(_pymaxwell5.Cvector2D_assign, None, Cvector2D)
Cvector2D.__lt__ = new_instancemethod(_pymaxwell5.Cvector2D___lt__, None, Cvector2D)
Cvector2D.__gt__ = new_instancemethod(_pymaxwell5.Cvector2D___gt__, None, Cvector2D)
Cvector2D.__eq__ = new_instancemethod(_pymaxwell5.Cvector2D___eq__, None, Cvector2D)
Cvector2D.isEqual = new_instancemethod(_pymaxwell5.Cvector2D_isEqual, None, Cvector2D)
Cvector2D.abs = new_instancemethod(_pymaxwell5.Cvector2D_abs, None, Cvector2D)
Cvector2D.negate = new_instancemethod(_pymaxwell5.Cvector2D_negate, None, Cvector2D)
Cvector2D.__iadd__ = new_instancemethod(_pymaxwell5.Cvector2D___iadd__, None, Cvector2D)
Cvector2D.add = new_instancemethod(_pymaxwell5.Cvector2D_add, None, Cvector2D)
Cvector2D.__isub__ = new_instancemethod(_pymaxwell5.Cvector2D___isub__, None, Cvector2D)
Cvector2D.substract = new_instancemethod(_pymaxwell5.Cvector2D_substract, None, Cvector2D)
Cvector2D.scale = new_instancemethod(_pymaxwell5.Cvector2D_scale, None, Cvector2D)
Cvector2D.scaleAdd = new_instancemethod(_pymaxwell5.Cvector2D_scaleAdd, None, Cvector2D)
Cvector2D.scaleSubstract = new_instancemethod(_pymaxwell5.Cvector2D_scaleSubstract, None, Cvector2D)
Cvector2D.midPoint = new_instancemethod(_pymaxwell5.Cvector2D_midPoint, None, Cvector2D)
Cvector2D.__imul__ = new_instancemethod(_pymaxwell5.Cvector2D___imul__, None, Cvector2D)
Cvector2D.product = new_instancemethod(_pymaxwell5.Cvector2D_product, None, Cvector2D)
Cvector2D.invert = new_instancemethod(_pymaxwell5.Cvector2D_invert, None, Cvector2D)
Cvector2D.dot = new_instancemethod(_pymaxwell5.Cvector2D_dot, None, Cvector2D)
Cvector2D.norm = new_instancemethod(_pymaxwell5.Cvector2D_norm, None, Cvector2D)
Cvector2D.squareNorm = new_instancemethod(_pymaxwell5.Cvector2D_squareNorm, None, Cvector2D)
Cvector2D.normalize = new_instancemethod(_pymaxwell5.Cvector2D_normalize, None, Cvector2D)
Cvector2D.__str__ = new_instancemethod(_pymaxwell5.Cvector2D___str__, None, Cvector2D)
Cvector2D_swigregister = _pymaxwell5.Cvector2D_swigregister
Cvector2D_swigregister(Cvector2D)

class CfVector(object):
    """Proxy of C++ Cvector3DT<(float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def x(self):
        """x(CfVector self) -> float"""
        return _pymaxwell5.CfVector_x(self)


    def y(self):
        """y(CfVector self) -> float"""
        return _pymaxwell5.CfVector_y(self)


    def z(self):
        """z(CfVector self) -> float"""
        return _pymaxwell5.CfVector_z(self)


    def r(self):
        """r(CfVector self) -> float"""
        return _pymaxwell5.CfVector_r(self)


    def g(self):
        """g(CfVector self) -> float"""
        return _pymaxwell5.CfVector_g(self)


    def b(self):
        """b(CfVector self) -> float"""
        return _pymaxwell5.CfVector_b(self)


    def u(self):
        """u(CfVector self) -> float"""
        return _pymaxwell5.CfVector_u(self)


    def v(self):
        """v(CfVector self) -> float"""
        return _pymaxwell5.CfVector_v(self)


    def w(self):
        """w(CfVector self) -> float"""
        return _pymaxwell5.CfVector_w(self)


    def __getitem__(self, i):
        """__getitem__(CfVector self, unsigned int i) -> float"""
        return _pymaxwell5.CfVector___getitem__(self, i)


    def __init__(self, *args):
        """
        __init__(Cvector3DT<(float)> self) -> CfVector
        __init__(Cvector3DT<(float)> self, float _x, float _y, float _z) -> CfVector
        """
        _pymaxwell5.CfVector_swiginit(self, _pymaxwell5.new_CfVector(*args))

    def isZero(self):
        """isZero(CfVector self) -> bool"""
        return _pymaxwell5.CfVector_isZero(self)


    def setZero(self):
        """setZero(CfVector self)"""
        return _pymaxwell5.CfVector_setZero(self)


    def getSummatory(self):
        """getSummatory(CfVector self) -> float"""
        return _pymaxwell5.CfVector_getSummatory(self)


    def director(self, v1, v2):
        """director(CfVector self, CfVector v1, CfVector v2)"""
        return _pymaxwell5.CfVector_director(self, v1, v2)


    def assign(self, *args):
        """
        assign(CfVector self, double vx, double vy, double vz)
        assign(CfVector self, CfVector v)
        """
        return _pymaxwell5.CfVector_assign(self, *args)


    def __lt__(self, vector):
        """__lt__(CfVector self, CfVector vector) -> bool"""
        return _pymaxwell5.CfVector___lt__(self, vector)


    def __gt__(self, vector):
        """__gt__(CfVector self, CfVector vector) -> bool"""
        return _pymaxwell5.CfVector___gt__(self, vector)


    def __eq__(self, v):
        """__eq__(CfVector self, CfVector v) -> bool"""
        return _pymaxwell5.CfVector___eq__(self, v)


    def isEqual(self, v):
        """isEqual(CfVector self, CfVector v) -> bool"""
        return _pymaxwell5.CfVector_isEqual(self, v)


    def negate(self, *args):
        """
        negate(CfVector self)
        negate(CfVector self, CfVector v)
        """
        return _pymaxwell5.CfVector_negate(self, *args)


    def absolute(self, *args):
        """
        absolute(CfVector self)
        absolute(CfVector self, CfVector v)
        """
        return _pymaxwell5.CfVector_absolute(self, *args)


    def __add__(self, *args):
        """
        __add__(CfVector self, double const value) -> CfVector
        __add__(CfVector self, CfVector v) -> CfVector
        """
        return _pymaxwell5.CfVector___add__(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(CfVector self, double const value)
        __iadd__(CfVector self, CfVector v)
        """
        return _pymaxwell5.CfVector___iadd__(self, *args)


    def add(self, *args):
        """
        add(CfVector self, double const value)
        add(CfVector self, CfVector v)
        add(CfVector self, CfVector v, double const value)
        add(CfVector self, CfVector v1, CfVector v2)
        add(CfVector self, CfVector v1, CfVector v2, CfVector v3)
        """
        return _pymaxwell5.CfVector_add(self, *args)


    def __sub__(self, *args):
        """
        __sub__(CfVector self, double const value) -> CfVector
        __sub__(CfVector self, CfVector v) -> CfVector
        """
        return _pymaxwell5.CfVector___sub__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(CfVector self, double const value)
        __isub__(CfVector self, CfVector v)
        """
        return _pymaxwell5.CfVector___isub__(self, *args)


    def substract(self, *args):
        """
        substract(CfVector self, double const value)
        substract(CfVector self, CfVector v)
        substract(CfVector self, CfVector v1, CfVector v2)
        """
        return _pymaxwell5.CfVector_substract(self, *args)


    def __mul__(self, *args):
        """
        __mul__(CfVector self, double const value) -> CfVector
        __mul__(CfVector self, CfVector v) -> CfVector
        """
        return _pymaxwell5.CfVector___mul__(self, *args)


    def scale(self, *args):
        """
        scale(CfVector self, double const scale)
        scale(CfVector self, CfVector v, double const scale)
        """
        return _pymaxwell5.CfVector_scale(self, *args)


    def scaleAdd(self, v, scale):
        """scaleAdd(CfVector self, CfVector v, double const scale)"""
        return _pymaxwell5.CfVector_scaleAdd(self, v, scale)


    def scaleSubstract(self, v, scale):
        """scaleSubstract(CfVector self, CfVector v, double const scale)"""
        return _pymaxwell5.CfVector_scaleSubstract(self, v, scale)


    def midPoint(self, *args):
        """
        midPoint(CfVector self, CfVector p1, CfVector p2)
        midPoint(CfVector self, CfVector p1, CfVector p2, CfVector p3)
        """
        return _pymaxwell5.CfVector_midPoint(self, *args)


    def __imul__(self, *args):
        """
        __imul__(CfVector self, double const scale)
        __imul__(CfVector self, CfVector v)
        """
        return _pymaxwell5.CfVector___imul__(self, *args)


    def multiply(self, v):
        """multiply(CfVector self, CfVector v)"""
        return _pymaxwell5.CfVector_multiply(self, v)


    def invert(self, *args):
        """
        invert(CfVector self)
        invert(CfVector self, CfVector v)
        """
        return _pymaxwell5.CfVector_invert(self, *args)


    def dot(self, v):
        """dot(CfVector self, CfVector v) -> double"""
        return _pymaxwell5.CfVector_dot(self, v)


    def cross(self, v1, v2):
        """cross(CfVector self, CfVector v1, CfVector v2)"""
        return _pymaxwell5.CfVector_cross(self, v1, v2)


    def norm(self):
        """norm(CfVector self) -> double"""
        return _pymaxwell5.CfVector_norm(self)


    def squareNorm(self):
        """squareNorm(CfVector self) -> double"""
        return _pymaxwell5.CfVector_squareNorm(self)


    def normalize(self):
        """normalize(CfVector self)"""
        return _pymaxwell5.CfVector_normalize(self)


    def __str__(self):
        """__str__(CfVector self) -> char *"""
        return _pymaxwell5.CfVector___str__(self)

    __swig_destroy__ = _pymaxwell5.delete_CfVector
CfVector.x = new_instancemethod(_pymaxwell5.CfVector_x, None, CfVector)
CfVector.y = new_instancemethod(_pymaxwell5.CfVector_y, None, CfVector)
CfVector.z = new_instancemethod(_pymaxwell5.CfVector_z, None, CfVector)
CfVector.r = new_instancemethod(_pymaxwell5.CfVector_r, None, CfVector)
CfVector.g = new_instancemethod(_pymaxwell5.CfVector_g, None, CfVector)
CfVector.b = new_instancemethod(_pymaxwell5.CfVector_b, None, CfVector)
CfVector.u = new_instancemethod(_pymaxwell5.CfVector_u, None, CfVector)
CfVector.v = new_instancemethod(_pymaxwell5.CfVector_v, None, CfVector)
CfVector.w = new_instancemethod(_pymaxwell5.CfVector_w, None, CfVector)
CfVector.__getitem__ = new_instancemethod(_pymaxwell5.CfVector___getitem__, None, CfVector)
CfVector.isZero = new_instancemethod(_pymaxwell5.CfVector_isZero, None, CfVector)
CfVector.setZero = new_instancemethod(_pymaxwell5.CfVector_setZero, None, CfVector)
CfVector.getSummatory = new_instancemethod(_pymaxwell5.CfVector_getSummatory, None, CfVector)
CfVector.director = new_instancemethod(_pymaxwell5.CfVector_director, None, CfVector)
CfVector.assign = new_instancemethod(_pymaxwell5.CfVector_assign, None, CfVector)
CfVector.__lt__ = new_instancemethod(_pymaxwell5.CfVector___lt__, None, CfVector)
CfVector.__gt__ = new_instancemethod(_pymaxwell5.CfVector___gt__, None, CfVector)
CfVector.__eq__ = new_instancemethod(_pymaxwell5.CfVector___eq__, None, CfVector)
CfVector.isEqual = new_instancemethod(_pymaxwell5.CfVector_isEqual, None, CfVector)
CfVector.negate = new_instancemethod(_pymaxwell5.CfVector_negate, None, CfVector)
CfVector.absolute = new_instancemethod(_pymaxwell5.CfVector_absolute, None, CfVector)
CfVector.__add__ = new_instancemethod(_pymaxwell5.CfVector___add__, None, CfVector)
CfVector.__iadd__ = new_instancemethod(_pymaxwell5.CfVector___iadd__, None, CfVector)
CfVector.add = new_instancemethod(_pymaxwell5.CfVector_add, None, CfVector)
CfVector.__sub__ = new_instancemethod(_pymaxwell5.CfVector___sub__, None, CfVector)
CfVector.__isub__ = new_instancemethod(_pymaxwell5.CfVector___isub__, None, CfVector)
CfVector.substract = new_instancemethod(_pymaxwell5.CfVector_substract, None, CfVector)
CfVector.__mul__ = new_instancemethod(_pymaxwell5.CfVector___mul__, None, CfVector)
CfVector.scale = new_instancemethod(_pymaxwell5.CfVector_scale, None, CfVector)
CfVector.scaleAdd = new_instancemethod(_pymaxwell5.CfVector_scaleAdd, None, CfVector)
CfVector.scaleSubstract = new_instancemethod(_pymaxwell5.CfVector_scaleSubstract, None, CfVector)
CfVector.midPoint = new_instancemethod(_pymaxwell5.CfVector_midPoint, None, CfVector)
CfVector.__imul__ = new_instancemethod(_pymaxwell5.CfVector___imul__, None, CfVector)
CfVector.multiply = new_instancemethod(_pymaxwell5.CfVector_multiply, None, CfVector)
CfVector.invert = new_instancemethod(_pymaxwell5.CfVector_invert, None, CfVector)
CfVector.dot = new_instancemethod(_pymaxwell5.CfVector_dot, None, CfVector)
CfVector.cross = new_instancemethod(_pymaxwell5.CfVector_cross, None, CfVector)
CfVector.norm = new_instancemethod(_pymaxwell5.CfVector_norm, None, CfVector)
CfVector.squareNorm = new_instancemethod(_pymaxwell5.CfVector_squareNorm, None, CfVector)
CfVector.normalize = new_instancemethod(_pymaxwell5.CfVector_normalize, None, CfVector)
CfVector.__str__ = new_instancemethod(_pymaxwell5.CfVector___str__, None, CfVector)
CfVector_swigregister = _pymaxwell5.CfVector_swigregister
CfVector_swigregister(CfVector)

class Cvector(object):
    """Proxy of C++ Cvector3DT<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def x(self):
        """x(Cvector self) -> double"""
        return _pymaxwell5.Cvector_x(self)


    def y(self):
        """y(Cvector self) -> double"""
        return _pymaxwell5.Cvector_y(self)


    def z(self):
        """z(Cvector self) -> double"""
        return _pymaxwell5.Cvector_z(self)


    def r(self):
        """r(Cvector self) -> double"""
        return _pymaxwell5.Cvector_r(self)


    def g(self):
        """g(Cvector self) -> double"""
        return _pymaxwell5.Cvector_g(self)


    def b(self):
        """b(Cvector self) -> double"""
        return _pymaxwell5.Cvector_b(self)


    def u(self):
        """u(Cvector self) -> double"""
        return _pymaxwell5.Cvector_u(self)


    def v(self):
        """v(Cvector self) -> double"""
        return _pymaxwell5.Cvector_v(self)


    def w(self):
        """w(Cvector self) -> double"""
        return _pymaxwell5.Cvector_w(self)


    def __getitem__(self, i):
        """__getitem__(Cvector self, unsigned int i) -> double"""
        return _pymaxwell5.Cvector___getitem__(self, i)


    def __init__(self, *args):
        """
        __init__(Cvector3DT<(double)> self) -> Cvector
        __init__(Cvector3DT<(double)> self, double _x, double _y, double _z) -> Cvector
        """
        _pymaxwell5.Cvector_swiginit(self, _pymaxwell5.new_Cvector(*args))

    def isZero(self):
        """isZero(Cvector self) -> bool"""
        return _pymaxwell5.Cvector_isZero(self)


    def setZero(self):
        """setZero(Cvector self)"""
        return _pymaxwell5.Cvector_setZero(self)


    def getSummatory(self):
        """getSummatory(Cvector self) -> double"""
        return _pymaxwell5.Cvector_getSummatory(self)


    def director(self, v1, v2):
        """director(Cvector self, Cvector v1, Cvector v2)"""
        return _pymaxwell5.Cvector_director(self, v1, v2)


    def assign(self, *args):
        """
        assign(Cvector self, double vx, double vy, double vz)
        assign(Cvector self, Cvector v)
        """
        return _pymaxwell5.Cvector_assign(self, *args)


    def __lt__(self, vector):
        """__lt__(Cvector self, Cvector vector) -> bool"""
        return _pymaxwell5.Cvector___lt__(self, vector)


    def __gt__(self, vector):
        """__gt__(Cvector self, Cvector vector) -> bool"""
        return _pymaxwell5.Cvector___gt__(self, vector)


    def __eq__(self, v):
        """__eq__(Cvector self, Cvector v) -> bool"""
        return _pymaxwell5.Cvector___eq__(self, v)


    def isEqual(self, v):
        """isEqual(Cvector self, Cvector v) -> bool"""
        return _pymaxwell5.Cvector_isEqual(self, v)


    def negate(self, *args):
        """
        negate(Cvector self)
        negate(Cvector self, Cvector v)
        """
        return _pymaxwell5.Cvector_negate(self, *args)


    def absolute(self, *args):
        """
        absolute(Cvector self)
        absolute(Cvector self, Cvector v)
        """
        return _pymaxwell5.Cvector_absolute(self, *args)


    def __add__(self, *args):
        """
        __add__(Cvector self, double const value) -> Cvector
        __add__(Cvector self, Cvector v) -> Cvector
        """
        return _pymaxwell5.Cvector___add__(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(Cvector self, double const value)
        __iadd__(Cvector self, Cvector v)
        """
        return _pymaxwell5.Cvector___iadd__(self, *args)


    def add(self, *args):
        """
        add(Cvector self, double const value)
        add(Cvector self, Cvector v)
        add(Cvector self, Cvector v, double const value)
        add(Cvector self, Cvector v1, Cvector v2)
        add(Cvector self, Cvector v1, Cvector v2, Cvector v3)
        """
        return _pymaxwell5.Cvector_add(self, *args)


    def __sub__(self, *args):
        """
        __sub__(Cvector self, double const value) -> Cvector
        __sub__(Cvector self, Cvector v) -> Cvector
        """
        return _pymaxwell5.Cvector___sub__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(Cvector self, double const value)
        __isub__(Cvector self, Cvector v)
        """
        return _pymaxwell5.Cvector___isub__(self, *args)


    def substract(self, *args):
        """
        substract(Cvector self, double const value)
        substract(Cvector self, Cvector v)
        substract(Cvector self, Cvector v1, Cvector v2)
        """
        return _pymaxwell5.Cvector_substract(self, *args)


    def __mul__(self, *args):
        """
        __mul__(Cvector self, double const value) -> Cvector
        __mul__(Cvector self, Cvector v) -> Cvector
        """
        return _pymaxwell5.Cvector___mul__(self, *args)


    def scale(self, *args):
        """
        scale(Cvector self, double const scale)
        scale(Cvector self, Cvector v, double const scale)
        """
        return _pymaxwell5.Cvector_scale(self, *args)


    def scaleAdd(self, v, scale):
        """scaleAdd(Cvector self, Cvector v, double const scale)"""
        return _pymaxwell5.Cvector_scaleAdd(self, v, scale)


    def scaleSubstract(self, v, scale):
        """scaleSubstract(Cvector self, Cvector v, double const scale)"""
        return _pymaxwell5.Cvector_scaleSubstract(self, v, scale)


    def midPoint(self, *args):
        """
        midPoint(Cvector self, Cvector p1, Cvector p2)
        midPoint(Cvector self, Cvector p1, Cvector p2, Cvector p3)
        """
        return _pymaxwell5.Cvector_midPoint(self, *args)


    def __imul__(self, *args):
        """
        __imul__(Cvector self, double const scale)
        __imul__(Cvector self, Cvector v)
        """
        return _pymaxwell5.Cvector___imul__(self, *args)


    def multiply(self, v):
        """multiply(Cvector self, Cvector v)"""
        return _pymaxwell5.Cvector_multiply(self, v)


    def invert(self, *args):
        """
        invert(Cvector self)
        invert(Cvector self, Cvector v)
        """
        return _pymaxwell5.Cvector_invert(self, *args)


    def dot(self, v):
        """dot(Cvector self, Cvector v) -> double"""
        return _pymaxwell5.Cvector_dot(self, v)


    def cross(self, v1, v2):
        """cross(Cvector self, Cvector v1, Cvector v2)"""
        return _pymaxwell5.Cvector_cross(self, v1, v2)


    def norm(self):
        """norm(Cvector self) -> double"""
        return _pymaxwell5.Cvector_norm(self)


    def squareNorm(self):
        """squareNorm(Cvector self) -> double"""
        return _pymaxwell5.Cvector_squareNorm(self)


    def normalize(self):
        """normalize(Cvector self)"""
        return _pymaxwell5.Cvector_normalize(self)


    def __str__(self):
        """__str__(Cvector self) -> char *"""
        return _pymaxwell5.Cvector___str__(self)

    __swig_destroy__ = _pymaxwell5.delete_Cvector
Cvector.x = new_instancemethod(_pymaxwell5.Cvector_x, None, Cvector)
Cvector.y = new_instancemethod(_pymaxwell5.Cvector_y, None, Cvector)
Cvector.z = new_instancemethod(_pymaxwell5.Cvector_z, None, Cvector)
Cvector.r = new_instancemethod(_pymaxwell5.Cvector_r, None, Cvector)
Cvector.g = new_instancemethod(_pymaxwell5.Cvector_g, None, Cvector)
Cvector.b = new_instancemethod(_pymaxwell5.Cvector_b, None, Cvector)
Cvector.u = new_instancemethod(_pymaxwell5.Cvector_u, None, Cvector)
Cvector.v = new_instancemethod(_pymaxwell5.Cvector_v, None, Cvector)
Cvector.w = new_instancemethod(_pymaxwell5.Cvector_w, None, Cvector)
Cvector.__getitem__ = new_instancemethod(_pymaxwell5.Cvector___getitem__, None, Cvector)
Cvector.isZero = new_instancemethod(_pymaxwell5.Cvector_isZero, None, Cvector)
Cvector.setZero = new_instancemethod(_pymaxwell5.Cvector_setZero, None, Cvector)
Cvector.getSummatory = new_instancemethod(_pymaxwell5.Cvector_getSummatory, None, Cvector)
Cvector.director = new_instancemethod(_pymaxwell5.Cvector_director, None, Cvector)
Cvector.assign = new_instancemethod(_pymaxwell5.Cvector_assign, None, Cvector)
Cvector.__lt__ = new_instancemethod(_pymaxwell5.Cvector___lt__, None, Cvector)
Cvector.__gt__ = new_instancemethod(_pymaxwell5.Cvector___gt__, None, Cvector)
Cvector.__eq__ = new_instancemethod(_pymaxwell5.Cvector___eq__, None, Cvector)
Cvector.isEqual = new_instancemethod(_pymaxwell5.Cvector_isEqual, None, Cvector)
Cvector.negate = new_instancemethod(_pymaxwell5.Cvector_negate, None, Cvector)
Cvector.absolute = new_instancemethod(_pymaxwell5.Cvector_absolute, None, Cvector)
Cvector.__add__ = new_instancemethod(_pymaxwell5.Cvector___add__, None, Cvector)
Cvector.__iadd__ = new_instancemethod(_pymaxwell5.Cvector___iadd__, None, Cvector)
Cvector.add = new_instancemethod(_pymaxwell5.Cvector_add, None, Cvector)
Cvector.__sub__ = new_instancemethod(_pymaxwell5.Cvector___sub__, None, Cvector)
Cvector.__isub__ = new_instancemethod(_pymaxwell5.Cvector___isub__, None, Cvector)
Cvector.substract = new_instancemethod(_pymaxwell5.Cvector_substract, None, Cvector)
Cvector.__mul__ = new_instancemethod(_pymaxwell5.Cvector___mul__, None, Cvector)
Cvector.scale = new_instancemethod(_pymaxwell5.Cvector_scale, None, Cvector)
Cvector.scaleAdd = new_instancemethod(_pymaxwell5.Cvector_scaleAdd, None, Cvector)
Cvector.scaleSubstract = new_instancemethod(_pymaxwell5.Cvector_scaleSubstract, None, Cvector)
Cvector.midPoint = new_instancemethod(_pymaxwell5.Cvector_midPoint, None, Cvector)
Cvector.__imul__ = new_instancemethod(_pymaxwell5.Cvector___imul__, None, Cvector)
Cvector.multiply = new_instancemethod(_pymaxwell5.Cvector_multiply, None, Cvector)
Cvector.invert = new_instancemethod(_pymaxwell5.Cvector_invert, None, Cvector)
Cvector.dot = new_instancemethod(_pymaxwell5.Cvector_dot, None, Cvector)
Cvector.cross = new_instancemethod(_pymaxwell5.Cvector_cross, None, Cvector)
Cvector.norm = new_instancemethod(_pymaxwell5.Cvector_norm, None, Cvector)
Cvector.squareNorm = new_instancemethod(_pymaxwell5.Cvector_squareNorm, None, Cvector)
Cvector.normalize = new_instancemethod(_pymaxwell5.Cvector_normalize, None, Cvector)
Cvector.__str__ = new_instancemethod(_pymaxwell5.Cvector___str__, None, Cvector)
Cvector_swigregister = _pymaxwell5.Cvector_swigregister
Cvector_swigregister(Cvector)

class Cbase(object):
    """Proxy of C++ CbaseT<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    origin = _swig_property(_pymaxwell5.Cbase_origin_get, _pymaxwell5.Cbase_origin_set)
    xAxis = _swig_property(_pymaxwell5.Cbase_xAxis_get, _pymaxwell5.Cbase_xAxis_set)
    yAxis = _swig_property(_pymaxwell5.Cbase_yAxis_get, _pymaxwell5.Cbase_yAxis_set)
    zAxis = _swig_property(_pymaxwell5.Cbase_zAxis_get, _pymaxwell5.Cbase_zAxis_set)

    def __init__(self, *args):
        """
        __init__(CbaseT<(double)> self) -> Cbase
        __init__(CbaseT<(double)> self, Cvector _origin, Cvector _xAxis, Cvector _yAxis, Cvector _zAxis) -> Cbase
        """
        _pymaxwell5.Cbase_swiginit(self, _pymaxwell5.new_Cbase(*args))

    def initCanonical(self):
        """initCanonical(Cbase self)"""
        return _pymaxwell5.Cbase_initCanonical(self)


    def __str__(self):
        """__str__(Cbase self) -> char *"""
        return _pymaxwell5.Cbase___str__(self)

    __swig_destroy__ = _pymaxwell5.delete_Cbase
Cbase.initCanonical = new_instancemethod(_pymaxwell5.Cbase_initCanonical, None, Cbase)
Cbase.__str__ = new_instancemethod(_pymaxwell5.Cbase___str__, None, Cbase)
Cbase_swigregister = _pymaxwell5.Cbase_swigregister
Cbase_swigregister(Cbase)

class CfBase(object):
    """Proxy of C++ CbaseT<(float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    origin = _swig_property(_pymaxwell5.CfBase_origin_get, _pymaxwell5.CfBase_origin_set)
    xAxis = _swig_property(_pymaxwell5.CfBase_xAxis_get, _pymaxwell5.CfBase_xAxis_set)
    yAxis = _swig_property(_pymaxwell5.CfBase_yAxis_get, _pymaxwell5.CfBase_yAxis_set)
    zAxis = _swig_property(_pymaxwell5.CfBase_zAxis_get, _pymaxwell5.CfBase_zAxis_set)

    def __init__(self, *args):
        """
        __init__(CbaseT<(float)> self) -> CfBase
        __init__(CbaseT<(float)> self, CfVector _origin, CfVector _xAxis, CfVector _yAxis, CfVector _zAxis) -> CfBase
        """
        _pymaxwell5.CfBase_swiginit(self, _pymaxwell5.new_CfBase(*args))

    def initCanonical(self):
        """initCanonical(CfBase self)"""
        return _pymaxwell5.CfBase_initCanonical(self)


    def __str__(self):
        """__str__(CfBase self) -> char *"""
        return _pymaxwell5.CfBase___str__(self)

    __swig_destroy__ = _pymaxwell5.delete_CfBase
CfBase.initCanonical = new_instancemethod(_pymaxwell5.CfBase_initCanonical, None, CfBase)
CfBase.__str__ = new_instancemethod(_pymaxwell5.CfBase___str__, None, CfBase)
CfBase_swigregister = _pymaxwell5.CfBase_swigregister
CfBase_swigregister(CfBase)

class Crgb8Tbyte(object):
    """Proxy of C++ Crgb8T<(byte)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def r(self):
        """r(Crgb8Tbyte self) -> unsigned char"""
        return _pymaxwell5.Crgb8Tbyte_r(self)


    def g(self):
        """g(Crgb8Tbyte self) -> unsigned char"""
        return _pymaxwell5.Crgb8Tbyte_g(self)


    def b(self):
        """b(Crgb8Tbyte self) -> unsigned char"""
        return _pymaxwell5.Crgb8Tbyte_b(self)


    def __getitem__(self, i):
        """__getitem__(Crgb8Tbyte self, unsigned int i) -> unsigned char"""
        return _pymaxwell5.Crgb8Tbyte___getitem__(self, i)


    def assign(self, cr, cg, cb):
        """assign(Crgb8Tbyte self, unsigned char cr, unsigned char cg, unsigned char cb)"""
        return _pymaxwell5.Crgb8Tbyte_assign(self, cr, cg, cb)


    def __init__(self):
        """__init__(Crgb8T<(byte)> self) -> Crgb8Tbyte"""
        _pymaxwell5.Crgb8Tbyte_swiginit(self, _pymaxwell5.new_Crgb8Tbyte())
    __swig_destroy__ = _pymaxwell5.delete_Crgb8Tbyte
Crgb8Tbyte.r = new_instancemethod(_pymaxwell5.Crgb8Tbyte_r, None, Crgb8Tbyte)
Crgb8Tbyte.g = new_instancemethod(_pymaxwell5.Crgb8Tbyte_g, None, Crgb8Tbyte)
Crgb8Tbyte.b = new_instancemethod(_pymaxwell5.Crgb8Tbyte_b, None, Crgb8Tbyte)
Crgb8Tbyte.__getitem__ = new_instancemethod(_pymaxwell5.Crgb8Tbyte___getitem__, None, Crgb8Tbyte)
Crgb8Tbyte.assign = new_instancemethod(_pymaxwell5.Crgb8Tbyte_assign, None, Crgb8Tbyte)
Crgb8Tbyte_swigregister = _pymaxwell5.Crgb8Tbyte_swigregister
Crgb8Tbyte_swigregister(Crgb8Tbyte)

class Crgb8(Crgb8Tbyte):
    """Proxy of C++ Crgb8 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def toRGB(self):
        """toRGB(Crgb8 self) -> Crgb"""
        return _pymaxwell5.Crgb8_toRGB(self)


    def setZero(self):
        """setZero(Crgb8 self)"""
        return _pymaxwell5.Crgb8_setZero(self)


    def getSummatory(self):
        """getSummatory(Crgb8 self) -> dword"""
        return _pymaxwell5.Crgb8_getSummatory(self)


    def isZero(self):
        """isZero(Crgb8 self) -> bool"""
        return _pymaxwell5.Crgb8_isZero(self)


    def __str__(self):
        """__str__(Crgb8 self) -> char *"""
        return _pymaxwell5.Crgb8___str__(self)


    def __init__(self):
        """__init__(Crgb8 self) -> Crgb8"""
        _pymaxwell5.Crgb8_swiginit(self, _pymaxwell5.new_Crgb8())
    __swig_destroy__ = _pymaxwell5.delete_Crgb8
Crgb8.toRGB = new_instancemethod(_pymaxwell5.Crgb8_toRGB, None, Crgb8)
Crgb8.setZero = new_instancemethod(_pymaxwell5.Crgb8_setZero, None, Crgb8)
Crgb8.getSummatory = new_instancemethod(_pymaxwell5.Crgb8_getSummatory, None, Crgb8)
Crgb8.isZero = new_instancemethod(_pymaxwell5.Crgb8_isZero, None, Crgb8)
Crgb8.__str__ = new_instancemethod(_pymaxwell5.Crgb8___str__, None, Crgb8)
Crgb8_swigregister = _pymaxwell5.Crgb8_swigregister
Crgb8_swigregister(Crgb8)

class Crgb8Tword(object):
    """Proxy of C++ Crgb8T<(word)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def r(self):
        """r(Crgb8Tword self) -> unsigned short"""
        return _pymaxwell5.Crgb8Tword_r(self)


    def g(self):
        """g(Crgb8Tword self) -> unsigned short"""
        return _pymaxwell5.Crgb8Tword_g(self)


    def b(self):
        """b(Crgb8Tword self) -> unsigned short"""
        return _pymaxwell5.Crgb8Tword_b(self)


    def __getitem__(self, i):
        """__getitem__(Crgb8Tword self, unsigned int i) -> unsigned short"""
        return _pymaxwell5.Crgb8Tword___getitem__(self, i)


    def assign(self, cr, cg, cb):
        """assign(Crgb8Tword self, unsigned short cr, unsigned short cg, unsigned short cb)"""
        return _pymaxwell5.Crgb8Tword_assign(self, cr, cg, cb)


    def __init__(self):
        """__init__(Crgb8T<(word)> self) -> Crgb8Tword"""
        _pymaxwell5.Crgb8Tword_swiginit(self, _pymaxwell5.new_Crgb8Tword())
    __swig_destroy__ = _pymaxwell5.delete_Crgb8Tword
Crgb8Tword.r = new_instancemethod(_pymaxwell5.Crgb8Tword_r, None, Crgb8Tword)
Crgb8Tword.g = new_instancemethod(_pymaxwell5.Crgb8Tword_g, None, Crgb8Tword)
Crgb8Tword.b = new_instancemethod(_pymaxwell5.Crgb8Tword_b, None, Crgb8Tword)
Crgb8Tword.__getitem__ = new_instancemethod(_pymaxwell5.Crgb8Tword___getitem__, None, Crgb8Tword)
Crgb8Tword.assign = new_instancemethod(_pymaxwell5.Crgb8Tword_assign, None, Crgb8Tword)
Crgb8Tword_swigregister = _pymaxwell5.Crgb8Tword_swigregister
Crgb8Tword_swigregister(Crgb8Tword)

class Crgb16(Crgb8Tword):
    """Proxy of C++ Crgb16 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def toRGB(self):
        """toRGB(Crgb16 self) -> Crgb"""
        return _pymaxwell5.Crgb16_toRGB(self)


    def toRGB8(self):
        """toRGB8(Crgb16 self) -> Crgb8"""
        return _pymaxwell5.Crgb16_toRGB8(self)


    def getSummatory(self):
        """getSummatory(Crgb16 self) -> dword"""
        return _pymaxwell5.Crgb16_getSummatory(self)


    def __str__(self):
        """__str__(Crgb16 self) -> char *"""
        return _pymaxwell5.Crgb16___str__(self)


    def __init__(self):
        """__init__(Crgb16 self) -> Crgb16"""
        _pymaxwell5.Crgb16_swiginit(self, _pymaxwell5.new_Crgb16())
    __swig_destroy__ = _pymaxwell5.delete_Crgb16
Crgb16.toRGB = new_instancemethod(_pymaxwell5.Crgb16_toRGB, None, Crgb16)
Crgb16.toRGB8 = new_instancemethod(_pymaxwell5.Crgb16_toRGB8, None, Crgb16)
Crgb16.getSummatory = new_instancemethod(_pymaxwell5.Crgb16_getSummatory, None, Crgb16)
Crgb16.__str__ = new_instancemethod(_pymaxwell5.Crgb16___str__, None, Crgb16)
Crgb16_swigregister = _pymaxwell5.Crgb16_swigregister
Crgb16_swigregister(Crgb16)

class Crgba8Tbyte(object):
    """Proxy of C++ Crgba8T<(byte)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def r(self):
        """r(Crgba8Tbyte self) -> unsigned char"""
        return _pymaxwell5.Crgba8Tbyte_r(self)


    def g(self):
        """g(Crgba8Tbyte self) -> unsigned char"""
        return _pymaxwell5.Crgba8Tbyte_g(self)


    def b(self):
        """b(Crgba8Tbyte self) -> unsigned char"""
        return _pymaxwell5.Crgba8Tbyte_b(self)


    def a(self):
        """a(Crgba8Tbyte self) -> unsigned char"""
        return _pymaxwell5.Crgba8Tbyte_a(self)


    def __getitem__(self, i):
        """__getitem__(Crgba8Tbyte self, unsigned int i) -> unsigned char"""
        return _pymaxwell5.Crgba8Tbyte___getitem__(self, i)


    def assign(self, cr, cg, cb, ca):
        """assign(Crgba8Tbyte self, unsigned char cr, unsigned char cg, unsigned char cb, unsigned char ca)"""
        return _pymaxwell5.Crgba8Tbyte_assign(self, cr, cg, cb, ca)


    def __init__(self):
        """__init__(Crgba8T<(byte)> self) -> Crgba8Tbyte"""
        _pymaxwell5.Crgba8Tbyte_swiginit(self, _pymaxwell5.new_Crgba8Tbyte())
    __swig_destroy__ = _pymaxwell5.delete_Crgba8Tbyte
Crgba8Tbyte.r = new_instancemethod(_pymaxwell5.Crgba8Tbyte_r, None, Crgba8Tbyte)
Crgba8Tbyte.g = new_instancemethod(_pymaxwell5.Crgba8Tbyte_g, None, Crgba8Tbyte)
Crgba8Tbyte.b = new_instancemethod(_pymaxwell5.Crgba8Tbyte_b, None, Crgba8Tbyte)
Crgba8Tbyte.a = new_instancemethod(_pymaxwell5.Crgba8Tbyte_a, None, Crgba8Tbyte)
Crgba8Tbyte.__getitem__ = new_instancemethod(_pymaxwell5.Crgba8Tbyte___getitem__, None, Crgba8Tbyte)
Crgba8Tbyte.assign = new_instancemethod(_pymaxwell5.Crgba8Tbyte_assign, None, Crgba8Tbyte)
Crgba8Tbyte_swigregister = _pymaxwell5.Crgba8Tbyte_swigregister
Crgba8Tbyte_swigregister(Crgba8Tbyte)

class Crgba8(Crgba8Tbyte):
    """Proxy of C++ Crgba8 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __str__(self):
        """__str__(Crgba8 self) -> char *"""
        return _pymaxwell5.Crgba8___str__(self)


    def __init__(self):
        """__init__(Crgba8 self) -> Crgba8"""
        _pymaxwell5.Crgba8_swiginit(self, _pymaxwell5.new_Crgba8())
    __swig_destroy__ = _pymaxwell5.delete_Crgba8
Crgba8.__str__ = new_instancemethod(_pymaxwell5.Crgba8___str__, None, Crgba8)
Crgba8_swigregister = _pymaxwell5.Crgba8_swigregister
Crgba8_swigregister(Crgba8)

class Crgba8Tword(object):
    """Proxy of C++ Crgba8T<(word)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def r(self):
        """r(Crgba8Tword self) -> unsigned short"""
        return _pymaxwell5.Crgba8Tword_r(self)


    def g(self):
        """g(Crgba8Tword self) -> unsigned short"""
        return _pymaxwell5.Crgba8Tword_g(self)


    def b(self):
        """b(Crgba8Tword self) -> unsigned short"""
        return _pymaxwell5.Crgba8Tword_b(self)


    def a(self):
        """a(Crgba8Tword self) -> unsigned short"""
        return _pymaxwell5.Crgba8Tword_a(self)


    def __getitem__(self, i):
        """__getitem__(Crgba8Tword self, unsigned int i) -> unsigned short"""
        return _pymaxwell5.Crgba8Tword___getitem__(self, i)


    def assign(self, cr, cg, cb, ca):
        """assign(Crgba8Tword self, unsigned short cr, unsigned short cg, unsigned short cb, unsigned short ca)"""
        return _pymaxwell5.Crgba8Tword_assign(self, cr, cg, cb, ca)


    def __init__(self):
        """__init__(Crgba8T<(word)> self) -> Crgba8Tword"""
        _pymaxwell5.Crgba8Tword_swiginit(self, _pymaxwell5.new_Crgba8Tword())
    __swig_destroy__ = _pymaxwell5.delete_Crgba8Tword
Crgba8Tword.r = new_instancemethod(_pymaxwell5.Crgba8Tword_r, None, Crgba8Tword)
Crgba8Tword.g = new_instancemethod(_pymaxwell5.Crgba8Tword_g, None, Crgba8Tword)
Crgba8Tword.b = new_instancemethod(_pymaxwell5.Crgba8Tword_b, None, Crgba8Tword)
Crgba8Tword.a = new_instancemethod(_pymaxwell5.Crgba8Tword_a, None, Crgba8Tword)
Crgba8Tword.__getitem__ = new_instancemethod(_pymaxwell5.Crgba8Tword___getitem__, None, Crgba8Tword)
Crgba8Tword.assign = new_instancemethod(_pymaxwell5.Crgba8Tword_assign, None, Crgba8Tword)
Crgba8Tword_swigregister = _pymaxwell5.Crgba8Tword_swigregister
Crgba8Tword_swigregister(Crgba8Tword)

class Crgba16(Crgba8Tword):
    """Proxy of C++ Crgba16 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def setZero(self):
        """setZero(Crgba16 self)"""
        return _pymaxwell5.Crgba16_setZero(self)


    def __str__(self):
        """__str__(Crgba16 self) -> char *"""
        return _pymaxwell5.Crgba16___str__(self)


    def __init__(self):
        """__init__(Crgba16 self) -> Crgba16"""
        _pymaxwell5.Crgba16_swiginit(self, _pymaxwell5.new_Crgba16())
    __swig_destroy__ = _pymaxwell5.delete_Crgba16
Crgba16.setZero = new_instancemethod(_pymaxwell5.Crgba16_setZero, None, Crgba16)
Crgba16.__str__ = new_instancemethod(_pymaxwell5.Crgba16___str__, None, Crgba16)
Crgba16_swigregister = _pymaxwell5.Crgba16_swigregister
Crgba16_swigregister(Crgba16)

class Crgb(CfVector):
    """Proxy of C++ Crgb class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def get(self):
        """get(Crgb self) -> dword"""
        return _pymaxwell5.Crgb_get(self)


    def gammaCorrectionRec709(self, gamma):
        """gammaCorrectionRec709(Crgb self, real gamma)"""
        return _pymaxwell5.Crgb_gammaCorrectionRec709(self, gamma)


    def invGammaCorrectionRec709(self, gamma):
        """invGammaCorrectionRec709(Crgb self, real gamma)"""
        return _pymaxwell5.Crgb_invGammaCorrectionRec709(self, gamma)


    def toRGB8(self):
        """toRGB8(Crgb self) -> Crgb8"""
        return _pymaxwell5.Crgb_toRGB8(self)


    def toRGB16(self):
        """toRGB16(Crgb self) -> Crgb16"""
        return _pymaxwell5.Crgb_toRGB16(self)


    def toXYZ(self):
        """toXYZ(Crgb self) -> Cxyz"""
        return _pymaxwell5.Crgb_toXYZ(self)


    def toHSV(self):
        """toHSV(Crgb self) -> Chsv"""
        return _pymaxwell5.Crgb_toHSV(self)


    def toLowRange(self):
        """toLowRange(Crgb self)"""
        return _pymaxwell5.Crgb_toLowRange(self)


    def clip(self):
        """clip(Crgb self)"""
        return _pymaxwell5.Crgb_clip(self)


    def constrain(self):
        """constrain(Crgb self) -> bool"""
        return _pymaxwell5.Crgb_constrain(self)


    def __str__(self):
        """__str__(Crgb self) -> char *"""
        return _pymaxwell5.Crgb___str__(self)


    def __init__(self):
        """__init__(Crgb self) -> Crgb"""
        _pymaxwell5.Crgb_swiginit(self, _pymaxwell5.new_Crgb())
    __swig_destroy__ = _pymaxwell5.delete_Crgb
Crgb.get = new_instancemethod(_pymaxwell5.Crgb_get, None, Crgb)
Crgb.gammaCorrectionRec709 = new_instancemethod(_pymaxwell5.Crgb_gammaCorrectionRec709, None, Crgb)
Crgb.invGammaCorrectionRec709 = new_instancemethod(_pymaxwell5.Crgb_invGammaCorrectionRec709, None, Crgb)
Crgb.toRGB8 = new_instancemethod(_pymaxwell5.Crgb_toRGB8, None, Crgb)
Crgb.toRGB16 = new_instancemethod(_pymaxwell5.Crgb_toRGB16, None, Crgb)
Crgb.toXYZ = new_instancemethod(_pymaxwell5.Crgb_toXYZ, None, Crgb)
Crgb.toHSV = new_instancemethod(_pymaxwell5.Crgb_toHSV, None, Crgb)
Crgb.toLowRange = new_instancemethod(_pymaxwell5.Crgb_toLowRange, None, Crgb)
Crgb.clip = new_instancemethod(_pymaxwell5.Crgb_clip, None, Crgb)
Crgb.constrain = new_instancemethod(_pymaxwell5.Crgb_constrain, None, Crgb)
Crgb.__str__ = new_instancemethod(_pymaxwell5.Crgb___str__, None, Crgb)
Crgb_swigregister = _pymaxwell5.Crgb_swigregister
Crgb_swigregister(Crgb)

class Chsv(object):
    """Proxy of C++ Chsv class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    h = _swig_property(_pymaxwell5.Chsv_h_get, _pymaxwell5.Chsv_h_set)
    s = _swig_property(_pymaxwell5.Chsv_s_get, _pymaxwell5.Chsv_s_set)
    v = _swig_property(_pymaxwell5.Chsv_v_get, _pymaxwell5.Chsv_v_set)

    def toRgb(self):
        """toRgb(Chsv self) -> Crgb"""
        return _pymaxwell5.Chsv_toRgb(self)


    def assign(self, _h, _s, _v):
        """assign(Chsv self, float const _h, float const _s, float const _v)"""
        return _pymaxwell5.Chsv_assign(self, _h, _s, _v)


    def __init__(self):
        """__init__(Chsv self) -> Chsv"""
        _pymaxwell5.Chsv_swiginit(self, _pymaxwell5.new_Chsv())
    __swig_destroy__ = _pymaxwell5.delete_Chsv
Chsv.toRgb = new_instancemethod(_pymaxwell5.Chsv_toRgb, None, Chsv)
Chsv.assign = new_instancemethod(_pymaxwell5.Chsv_assign, None, Chsv)
Chsv_swigregister = _pymaxwell5.Chsv_swigregister
Chsv_swigregister(Chsv)

class Cxyz(Cvector):
    """Proxy of C++ Cxyz class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def toRGB(self):
        """toRGB(Cxyz self) -> Crgb"""
        return _pymaxwell5.Cxyz_toRGB(self)


    def __str__(self):
        """__str__(Cxyz self) -> char *"""
        return _pymaxwell5.Cxyz___str__(self)


    def __init__(self):
        """__init__(Cxyz self) -> Cxyz"""
        _pymaxwell5.Cxyz_swiginit(self, _pymaxwell5.new_Cxyz())
    __swig_destroy__ = _pymaxwell5.delete_Cxyz
Cxyz.toRGB = new_instancemethod(_pymaxwell5.Cxyz_toRGB, None, Cxyz)
Cxyz.__str__ = new_instancemethod(_pymaxwell5.Cxyz___str__, None, Cxyz)
Cxyz_swigregister = _pymaxwell5.Cxyz_swigregister
Cxyz_swigregister(Cxyz)

class Cfxyz(CfVector):
    """Proxy of C++ Cfxyz class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def toRGB(self):
        """toRGB(Cfxyz self) -> Crgb"""
        return _pymaxwell5.Cfxyz_toRGB(self)


    def __str__(self):
        """__str__(Cfxyz self) -> char *"""
        return _pymaxwell5.Cfxyz___str__(self)


    def __init__(self):
        """__init__(Cfxyz self) -> Cfxyz"""
        _pymaxwell5.Cfxyz_swiginit(self, _pymaxwell5.new_Cfxyz())
    __swig_destroy__ = _pymaxwell5.delete_Cfxyz
Cfxyz.toRGB = new_instancemethod(_pymaxwell5.Cfxyz_toRGB, None, Cfxyz)
Cfxyz.__str__ = new_instancemethod(_pymaxwell5.Cfxyz___str__, None, Cfxyz)
Cfxyz_swigregister = _pymaxwell5.Cfxyz_swigregister
Cfxyz_swigregister(Cfxyz)

class Cerror(object):
    """Proxy of C++ Cerror class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MAXWELL_OK = _pymaxwell5.Cerror_MAXWELL_OK
    MAXWELL_ENVIRONMENT_NOT_FOUND = _pymaxwell5.Cerror_MAXWELL_ENVIRONMENT_NOT_FOUND
    MAXWELL_NOT_INITIALIZED = _pymaxwell5.Cerror_MAXWELL_NOT_INITIALIZED
    NO_MEMORY_AVAILABLE = _pymaxwell5.Cerror_NO_MEMORY_AVAILABLE
    FILE_NOT_EXISTS = _pymaxwell5.Cerror_FILE_NOT_EXISTS
    FILE_CANNOT_BE_CREATED = _pymaxwell5.Cerror_FILE_CANNOT_BE_CREATED
    FILE_CANNOT_BE_CLOSED = _pymaxwell5.Cerror_FILE_CANNOT_BE_CLOSED
    FILE_REMOVE_FAILED = _pymaxwell5.Cerror_FILE_REMOVE_FAILED
    FILE_RENAME_FAILED = _pymaxwell5.Cerror_FILE_RENAME_FAILED
    FILE_OPEN_FAILED = _pymaxwell5.Cerror_FILE_OPEN_FAILED
    FILE_READ_FAILED = _pymaxwell5.Cerror_FILE_READ_FAILED
    FILE_WRITE_FAILED = _pymaxwell5.Cerror_FILE_WRITE_FAILED
    FILE_SEEK_FAILED = _pymaxwell5.Cerror_FILE_SEEK_FAILED
    FILE_NOT_SPACE_AVAILABLE = _pymaxwell5.Cerror_FILE_NOT_SPACE_AVAILABLE
    NAME_NOT_SPECIFIED = _pymaxwell5.Cerror_NAME_NOT_SPECIFIED
    INVALID_PARAMETER = _pymaxwell5.Cerror_INVALID_PARAMETER
    NOT_ALLOWED_METHOD = _pymaxwell5.Cerror_NOT_ALLOWED_METHOD
    OBSOLETE_VERSION = _pymaxwell5.Cerror_OBSOLETE_VERSION
    VERSION_HIGHER_THAN_CURRENT = _pymaxwell5.Cerror_VERSION_HIGHER_THAN_CURRENT
    OBJECT_WITHOUT_MATERIAL = _pymaxwell5.Cerror_OBJECT_WITHOUT_MATERIAL
    BITMAP_WITHOUT_DATA = _pymaxwell5.Cerror_BITMAP_WITHOUT_DATA
    INVALID_UVW_CHANNELS = _pymaxwell5.Cerror_INVALID_UVW_CHANNELS
    MXI_INVALID_FORMAT = _pymaxwell5.Cerror_MXI_INVALID_FORMAT
    MXI_INVALID_DATA = _pymaxwell5.Cerror_MXI_INVALID_DATA
    MXI_INVALID_CAMERA = _pymaxwell5.Cerror_MXI_INVALID_CAMERA
    MXI_INVALID_GAMMA = _pymaxwell5.Cerror_MXI_INVALID_GAMMA
    MXI_INVALID_FICTITIOUS_EXPOSURE = _pymaxwell5.Cerror_MXI_INVALID_FICTITIOUS_EXPOSURE
    MXI_INVALID_RESOLUTION = _pymaxwell5.Cerror_MXI_INVALID_RESOLUTION
    MXI_INVALID_EXPOSURE = _pymaxwell5.Cerror_MXI_INVALID_EXPOSURE
    MXI_NAME_NOT_DEFINED = _pymaxwell5.Cerror_MXI_NAME_NOT_DEFINED
    MXI_BUCKETS_DO_NOT_MATCH = _pymaxwell5.Cerror_MXI_BUCKETS_DO_NOT_MATCH
    MXI_INVALID_VERSION = _pymaxwell5.Cerror_MXI_INVALID_VERSION
    MXI_NO_RERENDERING_CAPABILITIES = _pymaxwell5.Cerror_MXI_NO_RERENDERING_CAPABILITIES
    MXI_RERENDERING_CAPABILITIES = _pymaxwell5.Cerror_MXI_RERENDERING_CAPABILITIES
    MXI_NOT_MATCH = _pymaxwell5.Cerror_MXI_NOT_MATCH
    MXI_CPU_OVERLAPPING = _pymaxwell5.Cerror_MXI_CPU_OVERLAPPING
    MXI_IMAGE_DATA_ONLY = _pymaxwell5.Cerror_MXI_IMAGE_DATA_ONLY
    OTHER = _pymaxwell5.Cerror_OTHER

    def __init__(self, *args):
        """
        __init__(Cerror self) -> Cerror
        __init__(Cerror self, dword errorID) -> Cerror
        """
        _pymaxwell5.Cerror_swiginit(self, _pymaxwell5.new_Cerror(*args))

    def clear(self):
        """clear(Cerror self)"""
        return _pymaxwell5.Cerror_clear(self)


    def getID(self):
        """getID(Cerror self) -> dword"""
        return _pymaxwell5.Cerror_getID(self)


    def setID(self, errorID):
        """setID(Cerror self, dword errorID)"""
        return _pymaxwell5.Cerror_setID(self, errorID)


    def failed(self):
        """failed(Cerror self) -> bool"""
        return _pymaxwell5.Cerror_failed(self)

    __swig_destroy__ = _pymaxwell5.delete_Cerror
Cerror.clear = new_instancemethod(_pymaxwell5.Cerror_clear, None, Cerror)
Cerror.getID = new_instancemethod(_pymaxwell5.Cerror_getID, None, Cerror)
Cerror.setID = new_instancemethod(_pymaxwell5.Cerror_setID, None, Cerror)
Cerror.failed = new_instancemethod(_pymaxwell5.Cerror_failed, None, Cerror)
Cerror_swigregister = _pymaxwell5.Cerror_swigregister
Cerror_swigregister(Cerror)

class CtextureMap(object):
    """Proxy of C++ CtextureMap class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NO_INTERPOLATION = _pymaxwell5.CtextureMap_NO_INTERPOLATION
    INTERPOLATION_CUADRATIC = _pymaxwell5.CtextureMap_INTERPOLATION_CUADRATIC
    scale = _swig_property(_pymaxwell5.CtextureMap_scale_get, _pymaxwell5.CtextureMap_scale_set)
    offset = _swig_property(_pymaxwell5.CtextureMap_offset_get, _pymaxwell5.CtextureMap_offset_set)
    rotation = _swig_property(_pymaxwell5.CtextureMap_rotation_get, _pymaxwell5.CtextureMap_rotation_set)
    uvwChannelID = _swig_property(_pymaxwell5.CtextureMap_uvwChannelID_get, _pymaxwell5.CtextureMap_uvwChannelID_set)
    uIsTiled = _swig_property(_pymaxwell5.CtextureMap_uIsTiled_get, _pymaxwell5.CtextureMap_uIsTiled_set)
    vIsTiled = _swig_property(_pymaxwell5.CtextureMap_vIsTiled_get, _pymaxwell5.CtextureMap_vIsTiled_set)
    uIsMirrored = _swig_property(_pymaxwell5.CtextureMap_uIsMirrored_get, _pymaxwell5.CtextureMap_uIsMirrored_set)
    vIsMirrored = _swig_property(_pymaxwell5.CtextureMap_vIsMirrored_get, _pymaxwell5.CtextureMap_vIsMirrored_set)
    invert = _swig_property(_pymaxwell5.CtextureMap_invert_get, _pymaxwell5.CtextureMap_invert_set)
    doGammaCorrection = _swig_property(_pymaxwell5.CtextureMap_doGammaCorrection_get, _pymaxwell5.CtextureMap_doGammaCorrection_set)
    useAbsoluteUnits = _swig_property(_pymaxwell5.CtextureMap_useAbsoluteUnits_get, _pymaxwell5.CtextureMap_useAbsoluteUnits_set)
    normalMappingFlipRed = _swig_property(_pymaxwell5.CtextureMap_normalMappingFlipRed_get, _pymaxwell5.CtextureMap_normalMappingFlipRed_set)
    normalMappingFlipGreen = _swig_property(_pymaxwell5.CtextureMap_normalMappingFlipGreen_get, _pymaxwell5.CtextureMap_normalMappingFlipGreen_set)
    normalMappingFullRangeBlue = _swig_property(_pymaxwell5.CtextureMap_normalMappingFullRangeBlue_get, _pymaxwell5.CtextureMap_normalMappingFullRangeBlue_set)
    useAlpha = _swig_property(_pymaxwell5.CtextureMap_useAlpha_get, _pymaxwell5.CtextureMap_useAlpha_set)
    useGlobalMap = _swig_property(_pymaxwell5.CtextureMap_useGlobalMap_get, _pymaxwell5.CtextureMap_useGlobalMap_set)
    typeInterpolation = _swig_property(_pymaxwell5.CtextureMap_typeInterpolation_get, _pymaxwell5.CtextureMap_typeInterpolation_set)
    saturation = _swig_property(_pymaxwell5.CtextureMap_saturation_get, _pymaxwell5.CtextureMap_saturation_set)
    contrast = _swig_property(_pymaxwell5.CtextureMap_contrast_get, _pymaxwell5.CtextureMap_contrast_set)
    brightness = _swig_property(_pymaxwell5.CtextureMap_brightness_get, _pymaxwell5.CtextureMap_brightness_set)
    hue = _swig_property(_pymaxwell5.CtextureMap_hue_get, _pymaxwell5.CtextureMap_hue_set)
    clampMin = _swig_property(_pymaxwell5.CtextureMap_clampMin_get, _pymaxwell5.CtextureMap_clampMin_set)
    clampMax = _swig_property(_pymaxwell5.CtextureMap_clampMax_get, _pymaxwell5.CtextureMap_clampMax_set)
    cosA = _swig_property(_pymaxwell5.CtextureMap_cosA_get, _pymaxwell5.CtextureMap_cosA_set)
    sinA = _swig_property(_pymaxwell5.CtextureMap_sinA_get, _pymaxwell5.CtextureMap_sinA_set)
    theTextureExtensions = _swig_property(_pymaxwell5.CtextureMap_theTextureExtensions_get, _pymaxwell5.CtextureMap_theTextureExtensions_set)

    def __init__(self):
        """__init__(CtextureMap self) -> CtextureMap"""
        if self.__class__ == CtextureMap:
            _self = None
        else:
            _self = self
        _pymaxwell5.CtextureMap_swiginit(self, _pymaxwell5.new_CtextureMap(_self, ))
    __swig_destroy__ = _pymaxwell5.delete_CtextureMap

    def setPath(self, path):
        """setPath(CtextureMap self, char const * path)"""
        return _pymaxwell5.CtextureMap_setPath(self, path)


    def getPath(self):
        """getPath(CtextureMap self) -> char const *"""
        return _pymaxwell5.CtextureMap_getPath(self)


    def isEmpty(self):
        """isEmpty(CtextureMap self) -> bool"""
        return _pymaxwell5.CtextureMap_isEmpty(self)


    def hasProceduralTextures(self):
        """hasProceduralTextures(CtextureMap self) -> bool"""
        return _pymaxwell5.CtextureMap_hasProceduralTextures(self)


    def hasActiveProceduralTexturesInRenderTime(self):
        """hasActiveProceduralTexturesInRenderTime(CtextureMap self) -> bool"""
        return _pymaxwell5.CtextureMap_hasActiveProceduralTexturesInRenderTime(self)


    def addProceduralTexture(self, parameters):
        """addProceduralTexture(CtextureMap self, MXparamList parameters)"""
        return _pymaxwell5.CtextureMap_addProceduralTexture(self, parameters)


    def removeProceduralTexture(self, parameters):
        """removeProceduralTexture(CtextureMap self, MXparamList parameters)"""
        return _pymaxwell5.CtextureMap_removeProceduralTexture(self, parameters)


    def clearProceduralTextures(self):
        """clearProceduralTextures(CtextureMap self)"""
        return _pymaxwell5.CtextureMap_clearProceduralTextures(self)


    def getProceduralTexturesCount(self):
        """getProceduralTexturesCount(CtextureMap self) -> dword"""
        return _pymaxwell5.CtextureMap_getProceduralTexturesCount(self)


    def getProceduralTexture(self, index):
        """getProceduralTexture(CtextureMap self, dword const & index) -> MXparamList"""
        return _pymaxwell5.CtextureMap_getProceduralTexture(self, index)


    def getProceduralTextureIndex(self, parameters):
        """getProceduralTextureIndex(CtextureMap self, MXparamList parameters) -> dword"""
        return _pymaxwell5.CtextureMap_getProceduralTextureIndex(self, parameters)


    def write(self, file):
        """write(CtextureMap self, Cfile & file)"""
        return _pymaxwell5.CtextureMap_write(self, file)


    def read(self, file):
        """read(CtextureMap self, mw::sources::Cfile & file)"""
        return _pymaxwell5.CtextureMap_read(self, file)


    def read_LEGACY(self, file, mxmFileVersion):
        """read_LEGACY(CtextureMap self, mw::sources::Cfile & file, float const mxmFileVersion)"""
        return _pymaxwell5.CtextureMap_read_LEGACY(self, file, mxmFileVersion)


    def precomputeValues(self, pMaxwell, parentMaterial):
        """precomputeValues(CtextureMap self, Cmaxwell pMaxwell, Cmaterial * parentMaterial)"""
        return _pymaxwell5.CtextureMap_precomputeValues(self, pMaxwell, parentMaterial)


    def hasCachedBitmapVir(self):
        """hasCachedBitmapVir(CtextureMap self) -> bool"""
        return _pymaxwell5.CtextureMap_hasCachedBitmapVir(self)


    def getCachedBitmapVir(self):
        """getCachedBitmapVir(CtextureMap self) -> mw::sources::Cbitmap *"""
        return _pymaxwell5.CtextureMap_getCachedBitmapVir(self)


    def setCachedBitmap(self, pBitmap, uId):
        """setCachedBitmap(CtextureMap self, mw::sources::Cbitmap * pBitmap, unsigned int uId)"""
        return _pymaxwell5.CtextureMap_setCachedBitmap(self, pBitmap, uId)


    def hasCachedBitmap(self):
        """hasCachedBitmap(CtextureMap self) -> bool"""
        return _pymaxwell5.CtextureMap_hasCachedBitmap(self)


    def getCachedBitmap(self):
        """getCachedBitmap(CtextureMap self) -> mw::sources::Cbitmap *"""
        return _pymaxwell5.CtextureMap_getCachedBitmap(self)


    def getCachedId(self):
        """getCachedId(CtextureMap self) -> mw::String &"""
        return _pymaxwell5.CtextureMap_getCachedId(self)


    def __str__(self):
        """__str__(CtextureMap self) -> char *"""
        return _pymaxwell5.CtextureMap___str__(self)

    def __disown__(self):
        self.this.disown()
        _pymaxwell5.disown_CtextureMap(self)
        return weakref_proxy(self)
CtextureMap.setPath = new_instancemethod(_pymaxwell5.CtextureMap_setPath, None, CtextureMap)
CtextureMap.getPath = new_instancemethod(_pymaxwell5.CtextureMap_getPath, None, CtextureMap)
CtextureMap.isEmpty = new_instancemethod(_pymaxwell5.CtextureMap_isEmpty, None, CtextureMap)
CtextureMap.hasProceduralTextures = new_instancemethod(_pymaxwell5.CtextureMap_hasProceduralTextures, None, CtextureMap)
CtextureMap.hasActiveProceduralTexturesInRenderTime = new_instancemethod(_pymaxwell5.CtextureMap_hasActiveProceduralTexturesInRenderTime, None, CtextureMap)
CtextureMap.addProceduralTexture = new_instancemethod(_pymaxwell5.CtextureMap_addProceduralTexture, None, CtextureMap)
CtextureMap.removeProceduralTexture = new_instancemethod(_pymaxwell5.CtextureMap_removeProceduralTexture, None, CtextureMap)
CtextureMap.clearProceduralTextures = new_instancemethod(_pymaxwell5.CtextureMap_clearProceduralTextures, None, CtextureMap)
CtextureMap.getProceduralTexturesCount = new_instancemethod(_pymaxwell5.CtextureMap_getProceduralTexturesCount, None, CtextureMap)
CtextureMap.getProceduralTexture = new_instancemethod(_pymaxwell5.CtextureMap_getProceduralTexture, None, CtextureMap)
CtextureMap.getProceduralTextureIndex = new_instancemethod(_pymaxwell5.CtextureMap_getProceduralTextureIndex, None, CtextureMap)
CtextureMap.write = new_instancemethod(_pymaxwell5.CtextureMap_write, None, CtextureMap)
CtextureMap.read = new_instancemethod(_pymaxwell5.CtextureMap_read, None, CtextureMap)
CtextureMap.read_LEGACY = new_instancemethod(_pymaxwell5.CtextureMap_read_LEGACY, None, CtextureMap)
CtextureMap.precomputeValues = new_instancemethod(_pymaxwell5.CtextureMap_precomputeValues, None, CtextureMap)
CtextureMap.hasCachedBitmapVir = new_instancemethod(_pymaxwell5.CtextureMap_hasCachedBitmapVir, None, CtextureMap)
CtextureMap.getCachedBitmapVir = new_instancemethod(_pymaxwell5.CtextureMap_getCachedBitmapVir, None, CtextureMap)
CtextureMap.setCachedBitmap = new_instancemethod(_pymaxwell5.CtextureMap_setCachedBitmap, None, CtextureMap)
CtextureMap.hasCachedBitmap = new_instancemethod(_pymaxwell5.CtextureMap_hasCachedBitmap, None, CtextureMap)
CtextureMap.getCachedBitmap = new_instancemethod(_pymaxwell5.CtextureMap_getCachedBitmap, None, CtextureMap)
CtextureMap.getCachedId = new_instancemethod(_pymaxwell5.CtextureMap_getCachedId, None, CtextureMap)
CtextureMap.__str__ = new_instancemethod(_pymaxwell5.CtextureMap___str__, None, CtextureMap)
CtextureMap_swigregister = _pymaxwell5.CtextureMap_swigregister
CtextureMap_swigregister(CtextureMap)

class CtextureMapRef(object):
    """Proxy of C++ CtextureMapRef class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setPath(self, path):
        """
        Method:      setPath( filename )
        Description: sets the map's texture path
        Parameter:   filename.

        """
        return _pymaxwell5.CtextureMapRef_setPath(self, path)


    def getPath(self):
        """
        Method:      getPath( )->path
        Description: gets the map's texture path

        """
        return _pymaxwell5.CtextureMapRef_getPath(self)


    def setInterpolationType(self, type):
        """
        Method:      setInterpolationType( type )
        Description: sets the map's interpolation type
        Parameter:   type = CtextureMap.NO_INTERPOLATION or
                            CtextureMap.INTERPOLATION_CUADRATIC 
        """
        return _pymaxwell5.CtextureMapRef_setInterpolationType(self, type)


    def getInterpolationType(self):
        """
        Method:      getInterpolationType( )-> CtextureMap.InterpolationType type 
        Description: gets the map's texture interpolation type

        """
        return _pymaxwell5.CtextureMapRef_getInterpolationType(self)


    def setScale(self, p):
        """
        Method:      setScale( Cvector2D scale )
        Description: sets the map's texture scale
        Parameter:   scale.

        """
        return _pymaxwell5.CtextureMapRef_setScale(self, p)


    def getScale(self):
        """
        Method:      getScale( )->Cvector2D scale 
        Description: gets the map's texture scale

        """
        return _pymaxwell5.CtextureMapRef_getScale(self)


    def setOffset(self, p):
        """
        Method:      setScale( Cvector2D offset )
        Description: sets the map's texture offset
        Parameter:   offset.

        """
        return _pymaxwell5.CtextureMapRef_setOffset(self, p)


    def getOffset(self):
        """
        Method:      getOffset( )->Cvector2D offset 
        Description: gets the map's texture offset

        """
        return _pymaxwell5.CtextureMapRef_getOffset(self)


    def setRotation(self, r):
        """
        Method:      setRotation( float rotation )
        Description: sets the map's texture rotation (0 <= r <= 360)
        Parameter:   rotation.

        """
        return _pymaxwell5.CtextureMapRef_setRotation(self, r)


    def getRotation(self):
        """
        Method:      getRotation( )->float rotation 
        Description: gets the map's texture rotation

        """
        return _pymaxwell5.CtextureMapRef_getRotation(self)


    def setUVWChannelID(self, id):
        """
        Method:      setUVWChannelID( id )
        Description: sets the map's UVWChannelID
        Parameter:   id.

        """
        return _pymaxwell5.CtextureMapRef_setUVWChannelID(self, id)


    def getUVWChannelID(self):
        """
        Method:      getUVWChannelID( )-> id 
        Description: gets the map's texture UVWChannelID

        """
        return _pymaxwell5.CtextureMapRef_getUVWChannelID(self)


    def setSaturation(self, r):
        """
        Method:      setSaturation( float saturation )
        Description: sets the map's texture saturation ( -1 >= s >= 1 )
        Parameter:   saturation

        """
        return _pymaxwell5.CtextureMapRef_setSaturation(self, r)


    def getSaturation(self):
        """
        Method:      getSaturation( )->float saturation 
        Description: gets the map's texture saturation value

        """
        return _pymaxwell5.CtextureMapRef_getSaturation(self)


    def setContrast(self, r):
        """
        Method:      setContrast( float contrast )
        Description: sets the map's texture contrast ( -1 >= c >= 1 )
        Parameter:   contrast

        """
        return _pymaxwell5.CtextureMapRef_setContrast(self, r)


    def getContrast(self):
        """
        Method:      getContrast( )->float contrast 
        Description: gets the map's texture contrast value

        """
        return _pymaxwell5.CtextureMapRef_getContrast(self)


    def setBrightness(self, r):
        """
        Method:      setBrightness( float brightness )
        Description: sets the map's texture brightness ( -1 >= b >= 1 )
        Parameter:   brightness

        """
        return _pymaxwell5.CtextureMapRef_setBrightness(self, r)


    def getBrightness(self):
        """
        Method:      getBrightness( )->float brightness 
        Description: gets the map's texture brightness

        """
        return _pymaxwell5.CtextureMapRef_getBrightness(self)


    def setHue(self, r):
        """
        Method:      setHue( float hue )
        Description: sets the map's texture hue ( -180 >= h >= 180 )
        Parameter:   hue

        """
        return _pymaxwell5.CtextureMapRef_setHue(self, r)


    def getHue(self):
        """
        Method:      getHue( )->float hue 
        Description: gets the map's texture hue

        """
        return _pymaxwell5.CtextureMapRef_getHue(self)


    def setClampMin(self, r):
        """
        Method:      setClampMin( float clampMin )
        Description: sets the map's texture rgb clampMin value ( 0 >= c >= 255 )
        Parameter:   clampMin

        """
        return _pymaxwell5.CtextureMapRef_setClampMin(self, r)


    def getClampMin(self):
        """
        Method:      getClampMin( )->float clampMin 
        Description: gets the map's texture clampMin value

        """
        return _pymaxwell5.CtextureMapRef_getClampMin(self)


    def setClampMax(self, r):
        """
        Method:      setClampMax( float clampMax )
        Description: sets the map's texture clampMax value ( 0 >= c >= 255 )
        Parameter:   clampMax

        """
        return _pymaxwell5.CtextureMapRef_setClampMax(self, r)


    def getClampMax(self):
        """
        Method:      getClampMax( )->float clampMax 
        Description: gets the map's texture clampMax value

        """
        return _pymaxwell5.CtextureMapRef_getClampMax(self)


    def setUIsTiled(self, r):
        """
        Method:      setUIsTiled( bool uIsTiled )
        Description: sets if the map's texture is tiled in th U direction
        Parameter:   uIsTiled

        """
        return _pymaxwell5.CtextureMapRef_setUIsTiled(self, r)


    def getUIsTiled(self):
        """
        Method:      getUIsTiled( )->bool uIsTiled 
        Description: gets the map's texture uIsTiled value

        """
        return _pymaxwell5.CtextureMapRef_getUIsTiled(self)


    def setVIsTiled(self, r):
        """
        Method:      setVIsTiled( bool vIsTiled )
        Description: sets if the map's texture is tiled in th V direction
        Parameter:   vIsTiled

        """
        return _pymaxwell5.CtextureMapRef_setVIsTiled(self, r)


    def getVIsTiled(self):
        """
        Method:      getVIsTiled( )->bool vIsTiled 
        Description: gets the map's texture vIsTiled value

        """
        return _pymaxwell5.CtextureMapRef_getVIsTiled(self)


    def setUIsMirrored(self, r):
        """
        Method:      setUIsMirrored( bool uIsMirrored )
        Description: sets if the map's texture is mirrored in th U direction
        Parameter:   uIsMirrored

        """
        return _pymaxwell5.CtextureMapRef_setUIsMirrored(self, r)


    def getUIsMirrored(self):
        """
        Method:      getUIsMirrored( )->bool uIsMirrored 
        Description: gets the map's texture uIsMirrored value

        """
        return _pymaxwell5.CtextureMapRef_getUIsMirrored(self)


    def setVIsMirrored(self, r):
        """
        Method:      setVIsMirrored( bool vIsMirrored )
        Description: sets if the map's texture is mirrored in th V direction
        Parameter:   vIsMirrored

        """
        return _pymaxwell5.CtextureMapRef_setVIsMirrored(self, r)


    def getVIsMirrored(self):
        """
        Method:      getVIsMirrored( )->bool vIsMirrored 
        Description: gets the map's texture vIsMirrored value

        """
        return _pymaxwell5.CtextureMapRef_getVIsMirrored(self)


    def setInvert(self, r):
        """
        Method:      setInvert( bool inverted )
        Description: sets if the map's texture is inverted
        Parameter:   inverted

        """
        return _pymaxwell5.CtextureMapRef_setInvert(self, r)


    def getInvert(self):
        """
        Method:      getInvert( )->bool inverted 
        Description: gets the map's texture inverted value

        """
        return _pymaxwell5.CtextureMapRef_getInvert(self)


    def setDoGammaCorrection(self, r):
        """
        Method:      setDoGammaCorrection( bool doGammaCorrection )
        Description: sets if the map's texture is gammacorrected
        Parameter:   doGammaCorrection

        """
        return _pymaxwell5.CtextureMapRef_setDoGammaCorrection(self, r)


    def getDoGammaCorrection(self):
        """
        Method:      getDoGammaCorrection( )->bool doGammaCorrection 
        Description: gets the map's texture doGammaCorrection value

        """
        return _pymaxwell5.CtextureMapRef_getDoGammaCorrection(self)


    def setUseAbsoluteUnits(self, r):
        """
        Method:      setUseAbsoluteUnits( bool useAbsoluteUnits )
        Description: sets if the map's texture uses absolute units
        Parameter:   useAbsoluteUnits

        """
        return _pymaxwell5.CtextureMapRef_setUseAbsoluteUnits(self, r)


    def getUseAbsoluteUnits(self):
        """
        Method:      getUseAbsoluteUnits( )->bool useAbsoluteUnits 
        Description: gets the map's texture useAbsoluteUnits value

        """
        return _pymaxwell5.CtextureMapRef_getUseAbsoluteUnits(self)


    def setNormalMappingFlipRed(self, r):
        """
        Method:      setNormalMappingFlipRed( bool normalMappingFlipRed )
        Description: sets if the map's texture flips the red value of normal mapping
        Parameter:   normalMappingFlipRed

        """
        return _pymaxwell5.CtextureMapRef_setNormalMappingFlipRed(self, r)


    def getNormalMappingFlipRed(self):
        """
        Method:      getNormalMappingFlipRed( )->bool normalMappingFlipRed 
        Description: gets the map's texture normalMappingFlipRed value

        """
        return _pymaxwell5.CtextureMapRef_getNormalMappingFlipRed(self)


    def setNormalMappingFlipGreen(self, r):
        """
        Method:      setNormalMappingFlipGreen( bool normalMappingFlipGreen )
        Description: sets if the map's texture flips the green value of normal mapping
        Parameter:   normalMappingFlipGreen

        """
        return _pymaxwell5.CtextureMapRef_setNormalMappingFlipGreen(self, r)


    def getNormalMappingFlipGreen(self):
        """
        Method:      getNormalMappingFlipGreen( )->bool normalMappingFlipGreen 
        Description: gets the map's texture normalMappingFlipGreen value

        """
        return _pymaxwell5.CtextureMapRef_getNormalMappingFlipGreen(self)


    def setNormalMappingFullRangeBlue(self, r):
        """
        Method:      setNormalMappingFullRangeBlue( bool normalMappingFullRangeBlue )
        Description: sets if the map's texture flips the blue value of normal mapping
        Parameter:   normalMappingFullRangeBlue

        """
        return _pymaxwell5.CtextureMapRef_setNormalMappingFullRangeBlue(self, r)


    def getNormalMappingFullRangeBlue(self):
        """
        Method:      getNormalMappingFullRangeBlue( )->bool normalMappingFullRangeBlue 
        Description: gets the map's texture normalMappingFullRangeBlue value

        """
        return _pymaxwell5.CtextureMapRef_getNormalMappingFullRangeBlue(self)


    def setUseAlpha(self, r):
        """
        Method:      setUseAlpha( bool useAlpha )
        Description: sets if the map's texture uses the alpha channel
        Parameter:   useAlpha

        """
        return _pymaxwell5.CtextureMapRef_setUseAlpha(self, r)


    def getUseAlpha(self):
        """
        Method:      getUseAlpha( )->bool useAlpha 
        Description: gets the map's texture useAlpha value

        """
        return _pymaxwell5.CtextureMapRef_getUseAlpha(self)


    def __str__(self):
        """
        Method:      getUseAlpha( )->bool useAlpha 
        Description: gets the map's texture useAlpha value

        """
        return _pymaxwell5.CtextureMapRef___str__(self)

    __swig_destroy__ = _pymaxwell5.delete_CtextureMapRef
CtextureMapRef.setPath = new_instancemethod(_pymaxwell5.CtextureMapRef_setPath, None, CtextureMapRef)
CtextureMapRef.getPath = new_instancemethod(_pymaxwell5.CtextureMapRef_getPath, None, CtextureMapRef)
CtextureMapRef.setInterpolationType = new_instancemethod(_pymaxwell5.CtextureMapRef_setInterpolationType, None, CtextureMapRef)
CtextureMapRef.getInterpolationType = new_instancemethod(_pymaxwell5.CtextureMapRef_getInterpolationType, None, CtextureMapRef)
CtextureMapRef.setScale = new_instancemethod(_pymaxwell5.CtextureMapRef_setScale, None, CtextureMapRef)
CtextureMapRef.getScale = new_instancemethod(_pymaxwell5.CtextureMapRef_getScale, None, CtextureMapRef)
CtextureMapRef.setOffset = new_instancemethod(_pymaxwell5.CtextureMapRef_setOffset, None, CtextureMapRef)
CtextureMapRef.getOffset = new_instancemethod(_pymaxwell5.CtextureMapRef_getOffset, None, CtextureMapRef)
CtextureMapRef.setRotation = new_instancemethod(_pymaxwell5.CtextureMapRef_setRotation, None, CtextureMapRef)
CtextureMapRef.getRotation = new_instancemethod(_pymaxwell5.CtextureMapRef_getRotation, None, CtextureMapRef)
CtextureMapRef.setUVWChannelID = new_instancemethod(_pymaxwell5.CtextureMapRef_setUVWChannelID, None, CtextureMapRef)
CtextureMapRef.getUVWChannelID = new_instancemethod(_pymaxwell5.CtextureMapRef_getUVWChannelID, None, CtextureMapRef)
CtextureMapRef.setSaturation = new_instancemethod(_pymaxwell5.CtextureMapRef_setSaturation, None, CtextureMapRef)
CtextureMapRef.getSaturation = new_instancemethod(_pymaxwell5.CtextureMapRef_getSaturation, None, CtextureMapRef)
CtextureMapRef.setContrast = new_instancemethod(_pymaxwell5.CtextureMapRef_setContrast, None, CtextureMapRef)
CtextureMapRef.getContrast = new_instancemethod(_pymaxwell5.CtextureMapRef_getContrast, None, CtextureMapRef)
CtextureMapRef.setBrightness = new_instancemethod(_pymaxwell5.CtextureMapRef_setBrightness, None, CtextureMapRef)
CtextureMapRef.getBrightness = new_instancemethod(_pymaxwell5.CtextureMapRef_getBrightness, None, CtextureMapRef)
CtextureMapRef.setHue = new_instancemethod(_pymaxwell5.CtextureMapRef_setHue, None, CtextureMapRef)
CtextureMapRef.getHue = new_instancemethod(_pymaxwell5.CtextureMapRef_getHue, None, CtextureMapRef)
CtextureMapRef.setClampMin = new_instancemethod(_pymaxwell5.CtextureMapRef_setClampMin, None, CtextureMapRef)
CtextureMapRef.getClampMin = new_instancemethod(_pymaxwell5.CtextureMapRef_getClampMin, None, CtextureMapRef)
CtextureMapRef.setClampMax = new_instancemethod(_pymaxwell5.CtextureMapRef_setClampMax, None, CtextureMapRef)
CtextureMapRef.getClampMax = new_instancemethod(_pymaxwell5.CtextureMapRef_getClampMax, None, CtextureMapRef)
CtextureMapRef.setUIsTiled = new_instancemethod(_pymaxwell5.CtextureMapRef_setUIsTiled, None, CtextureMapRef)
CtextureMapRef.getUIsTiled = new_instancemethod(_pymaxwell5.CtextureMapRef_getUIsTiled, None, CtextureMapRef)
CtextureMapRef.setVIsTiled = new_instancemethod(_pymaxwell5.CtextureMapRef_setVIsTiled, None, CtextureMapRef)
CtextureMapRef.getVIsTiled = new_instancemethod(_pymaxwell5.CtextureMapRef_getVIsTiled, None, CtextureMapRef)
CtextureMapRef.setUIsMirrored = new_instancemethod(_pymaxwell5.CtextureMapRef_setUIsMirrored, None, CtextureMapRef)
CtextureMapRef.getUIsMirrored = new_instancemethod(_pymaxwell5.CtextureMapRef_getUIsMirrored, None, CtextureMapRef)
CtextureMapRef.setVIsMirrored = new_instancemethod(_pymaxwell5.CtextureMapRef_setVIsMirrored, None, CtextureMapRef)
CtextureMapRef.getVIsMirrored = new_instancemethod(_pymaxwell5.CtextureMapRef_getVIsMirrored, None, CtextureMapRef)
CtextureMapRef.setInvert = new_instancemethod(_pymaxwell5.CtextureMapRef_setInvert, None, CtextureMapRef)
CtextureMapRef.getInvert = new_instancemethod(_pymaxwell5.CtextureMapRef_getInvert, None, CtextureMapRef)
CtextureMapRef.setDoGammaCorrection = new_instancemethod(_pymaxwell5.CtextureMapRef_setDoGammaCorrection, None, CtextureMapRef)
CtextureMapRef.getDoGammaCorrection = new_instancemethod(_pymaxwell5.CtextureMapRef_getDoGammaCorrection, None, CtextureMapRef)
CtextureMapRef.setUseAbsoluteUnits = new_instancemethod(_pymaxwell5.CtextureMapRef_setUseAbsoluteUnits, None, CtextureMapRef)
CtextureMapRef.getUseAbsoluteUnits = new_instancemethod(_pymaxwell5.CtextureMapRef_getUseAbsoluteUnits, None, CtextureMapRef)
CtextureMapRef.setNormalMappingFlipRed = new_instancemethod(_pymaxwell5.CtextureMapRef_setNormalMappingFlipRed, None, CtextureMapRef)
CtextureMapRef.getNormalMappingFlipRed = new_instancemethod(_pymaxwell5.CtextureMapRef_getNormalMappingFlipRed, None, CtextureMapRef)
CtextureMapRef.setNormalMappingFlipGreen = new_instancemethod(_pymaxwell5.CtextureMapRef_setNormalMappingFlipGreen, None, CtextureMapRef)
CtextureMapRef.getNormalMappingFlipGreen = new_instancemethod(_pymaxwell5.CtextureMapRef_getNormalMappingFlipGreen, None, CtextureMapRef)
CtextureMapRef.setNormalMappingFullRangeBlue = new_instancemethod(_pymaxwell5.CtextureMapRef_setNormalMappingFullRangeBlue, None, CtextureMapRef)
CtextureMapRef.getNormalMappingFullRangeBlue = new_instancemethod(_pymaxwell5.CtextureMapRef_getNormalMappingFullRangeBlue, None, CtextureMapRef)
CtextureMapRef.setUseAlpha = new_instancemethod(_pymaxwell5.CtextureMapRef_setUseAlpha, None, CtextureMapRef)
CtextureMapRef.getUseAlpha = new_instancemethod(_pymaxwell5.CtextureMapRef_getUseAlpha, None, CtextureMapRef)
CtextureMapRef.__str__ = new_instancemethod(_pymaxwell5.CtextureMapRef___str__, None, CtextureMapRef)
CtextureMapRef_swigregister = _pymaxwell5.CtextureMapRef_swigregister
CtextureMapRef_swigregister(CtextureMapRef)

class CoverlayTextOptions(object):
    """Proxy of C++ CoverlayTextOptions class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    OVERLAY_BOTTOM = _pymaxwell5.CoverlayTextOptions_OVERLAY_BOTTOM
    OVERLAY_TOP = _pymaxwell5.CoverlayTextOptions_OVERLAY_TOP
    FONT_ARIAL = _pymaxwell5.CoverlayTextOptions_FONT_ARIAL
    FONT_COURIER = _pymaxwell5.CoverlayTextOptions_FONT_COURIER
    FONT_NORMAL = _pymaxwell5.CoverlayTextOptions_FONT_NORMAL
    FONT_BOLD = _pymaxwell5.CoverlayTextOptions_FONT_BOLD
    SIZE_12 = _pymaxwell5.CoverlayTextOptions_SIZE_12

    def __init__(self):
        """__init__(CoverlayTextOptions self) -> CoverlayTextOptions"""
        _pymaxwell5.CoverlayTextOptions_swiginit(self, _pymaxwell5.new_CoverlayTextOptions())
    enabled_ = _swig_property(_pymaxwell5.CoverlayTextOptions_enabled__get, _pymaxwell5.CoverlayTextOptions_enabled__set)
    backgroundEnabled_ = _swig_property(_pymaxwell5.CoverlayTextOptions_backgroundEnabled__get, _pymaxwell5.CoverlayTextOptions_backgroundEnabled__set)
    color_ = _swig_property(_pymaxwell5.CoverlayTextOptions_color__get, _pymaxwell5.CoverlayTextOptions_color__set)
    backgroundColor_ = _swig_property(_pymaxwell5.CoverlayTextOptions_backgroundColor__get, _pymaxwell5.CoverlayTextOptions_backgroundColor__set)
    position_ = _swig_property(_pymaxwell5.CoverlayTextOptions_position__get, _pymaxwell5.CoverlayTextOptions_position__set)
    fontName_ = _swig_property(_pymaxwell5.CoverlayTextOptions_fontName__get, _pymaxwell5.CoverlayTextOptions_fontName__set)
    fontType_ = _swig_property(_pymaxwell5.CoverlayTextOptions_fontType__get, _pymaxwell5.CoverlayTextOptions_fontType__set)
    fontSize_ = _swig_property(_pymaxwell5.CoverlayTextOptions_fontSize__get, _pymaxwell5.CoverlayTextOptions_fontSize__set)
    text_ = _swig_property(_pymaxwell5.CoverlayTextOptions_text__get, _pymaxwell5.CoverlayTextOptions_text__set)

    def __str__(self):
        """__str__(CoverlayTextOptions self) -> char *"""
        return _pymaxwell5.CoverlayTextOptions___str__(self)

    __swig_destroy__ = _pymaxwell5.delete_CoverlayTextOptions
CoverlayTextOptions.__str__ = new_instancemethod(_pymaxwell5.CoverlayTextOptions___str__, None, CoverlayTextOptions)
CoverlayTextOptions_swigregister = _pymaxwell5.CoverlayTextOptions_swigregister
CoverlayTextOptions_swigregister(CoverlayTextOptions)

class MXparamList(object):
    """Proxy of C++ MXparamList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    UCHAR = _pymaxwell5.MXparamList_UCHAR
    UINT = _pymaxwell5.MXparamList_UINT
    INT = _pymaxwell5.MXparamList_INT
    FLOAT = _pymaxwell5.MXparamList_FLOAT
    DOUBLE = _pymaxwell5.MXparamList_DOUBLE
    STRING = _pymaxwell5.MXparamList_STRING
    FLOATARRAY = _pymaxwell5.MXparamList_FLOATARRAY
    DOUBLEARRAY = _pymaxwell5.MXparamList_DOUBLEARRAY
    BYTEARRAY = _pymaxwell5.MXparamList_BYTEARRAY
    INTARRAY = _pymaxwell5.MXparamList_INTARRAY
    MXPARAMLIST = _pymaxwell5.MXparamList_MXPARAMLIST
    MXPARAMLISTARRAY = _pymaxwell5.MXparamList_MXPARAMLISTARRAY
    RGB = _pymaxwell5.MXparamList_RGB

    def __init__(self, *args):
        """
        __init__(MXparamList self, CbaseExtensionUIE * parentExtension=None) -> MXparamList
        __init__(MXparamList self) -> MXparamList
        __init__(MXparamList self, char const * extensionName) -> MXparamList
        """
        _pymaxwell5.MXparamList_swiginit(self, _pymaxwell5.new_MXparamList(*args))
    __swig_destroy__ = _pymaxwell5.delete_MXparamList

    def clear(self):
        """clear(MXparamList self)"""
        return _pymaxwell5.MXparamList_clear(self)


    def free(self):
        """free(MXparamList self)"""
        return _pymaxwell5.MXparamList_free(self)


    def copyFrom(self, pL, extensionUIE=None):
        """
        copyFrom(MXparamList self, MXparamList pL, CbaseExtensionUIE * extensionUIE=None) -> bool
        copyFrom(MXparamList self, MXparamList pL) -> bool
        """
        return _pymaxwell5.MXparamList_copyFrom(self, pL, extensionUIE)


    def updateFrom(self, pL):
        """updateFrom(MXparamList self, MXparamList pL) -> bool"""
        return _pymaxwell5.MXparamList_updateFrom(self, pL)


    def equals(self, p):
        """equals(MXparamList self, MXparamList p) -> bool"""
        return _pymaxwell5.MXparamList_equals(self, p)


    def createByte(self, name, initialValue, minValue, maxValue):
        """createByte(MXparamList self, char const * name, unsigned char initialValue, unsigned char minValue, unsigned char maxValue) -> bool"""
        return _pymaxwell5.MXparamList_createByte(self, name, initialValue, minValue, maxValue)


    def createUInt(self, name, initialValue, minValue, maxValue):
        """createUInt(MXparamList self, char const * name, unsigned int initialValue, unsigned int minValue, unsigned int maxValue) -> bool"""
        return _pymaxwell5.MXparamList_createUInt(self, name, initialValue, minValue, maxValue)


    def createInt(self, name, initialValue, minValue, maxValue):
        """createInt(MXparamList self, char const * name, int initialValue, int minValue, int maxValue) -> bool"""
        return _pymaxwell5.MXparamList_createInt(self, name, initialValue, minValue, maxValue)


    def createFloat(self, name, initialValue, minValue, maxValue):
        """createFloat(MXparamList self, char const * name, float initialValue, float minValue, float maxValue) -> bool"""
        return _pymaxwell5.MXparamList_createFloat(self, name, initialValue, minValue, maxValue)


    def createDouble(self, name, initialValue, minValue, maxValue):
        """createDouble(MXparamList self, char const * name, double initialValue, double minValue, double maxValue) -> bool"""
        return _pymaxwell5.MXparamList_createDouble(self, name, initialValue, minValue, maxValue)


    def createIntArray(self, name, data):
        """createIntArray(MXparamList self, char const * name, PyObject * data) -> bool"""
        return _pymaxwell5.MXparamList_createIntArray(self, name, data)


    def createFloatArray(self, name, data):
        """createFloatArray(MXparamList self, char const * name, PyObject * data) -> bool"""
        return _pymaxwell5.MXparamList_createFloatArray(self, name, data)


    def createDoubleArray(self, name, data):
        """createDoubleArray(MXparamList self, char const * name, PyObject * data) -> bool"""
        return _pymaxwell5.MXparamList_createDoubleArray(self, name, data)


    def createByteArray(self, name, data):
        """createByteArray(MXparamList self, char const * name, PyObject * data) -> bool"""
        return _pymaxwell5.MXparamList_createByteArray(self, name, data)


    def createString(self, name, str):
        """createString(MXparamList self, char const * name, char const * str) -> bool"""
        return _pymaxwell5.MXparamList_createString(self, name, str)


    def createMXparamList(self, name, mx):
        """createMXparamList(MXparamList self, char const * name, MXparamList mx) -> bool"""
        return _pymaxwell5.MXparamList_createMXparamList(self, name, mx)


    def createMXparamListArray(self, name, mxList):
        """createMXparamListArray(MXparamList self, char const * name, PyObject * mxList) -> bool"""
        return _pymaxwell5.MXparamList_createMXparamListArray(self, name, mxList)


    def createRgb(self, name, rgb):
        """createRgb(MXparamList self, char const * name, Crgb rgb) -> bool"""
        return _pymaxwell5.MXparamList_createRgb(self, name, rgb)


    def createTextureMap(self, name, map):
        """createTextureMap(MXparamList self, char const * name, CtextureMap map) -> bool"""
        return _pymaxwell5.MXparamList_createTextureMap(self, name, map)


    def setByte(self, name, value):
        """setByte(MXparamList self, char const * name, unsigned char value) -> bool"""
        return _pymaxwell5.MXparamList_setByte(self, name, value)


    def setUInt(self, name, value):
        """setUInt(MXparamList self, char const * name, unsigned int value) -> bool"""
        return _pymaxwell5.MXparamList_setUInt(self, name, value)


    def setInt(self, name, value):
        """setInt(MXparamList self, char const * name, int value) -> bool"""
        return _pymaxwell5.MXparamList_setInt(self, name, value)


    def setFloat(self, name, value):
        """setFloat(MXparamList self, char const * name, float value) -> bool"""
        return _pymaxwell5.MXparamList_setFloat(self, name, value)


    def setDouble(self, name, value):
        """setDouble(MXparamList self, char const * name, double value) -> bool"""
        return _pymaxwell5.MXparamList_setDouble(self, name, value)


    def setIntArray(self, name, data):
        """setIntArray(MXparamList self, char const * name, PyObject * data) -> bool"""
        return _pymaxwell5.MXparamList_setIntArray(self, name, data)


    def setFloatArray(self, name, data, base):
        """setFloatArray(MXparamList self, char const * name, PyObject * data, Cbase base) -> bool"""
        return _pymaxwell5.MXparamList_setFloatArray(self, name, data, base)


    def setDoubleArray(self, name, data, base):
        """setDoubleArray(MXparamList self, char const * name, PyObject * data, Cbase base) -> bool"""
        return _pymaxwell5.MXparamList_setDoubleArray(self, name, data, base)


    def setByteArray(self, name, data):
        """setByteArray(MXparamList self, char const * name, PyObject * data) -> bool"""
        return _pymaxwell5.MXparamList_setByteArray(self, name, data)


    def setString(self, name, str):
        """setString(MXparamList self, char const * name, char const * str) -> bool"""
        return _pymaxwell5.MXparamList_setString(self, name, str)


    def setMXparamList(self, name, mx):
        """setMXparamList(MXparamList self, char const * name, MXparamList mx) -> bool"""
        return _pymaxwell5.MXparamList_setMXparamList(self, name, mx)


    def setMXparamListArray(self, name, mxList):
        """setMXparamListArray(MXparamList self, char const * name, PyObject * mxList) -> bool"""
        return _pymaxwell5.MXparamList_setMXparamListArray(self, name, mxList)


    def setRgb(self, name, rgb):
        """setRgb(MXparamList self, char const * name, Crgb rgb) -> bool"""
        return _pymaxwell5.MXparamList_setRgb(self, name, rgb)


    def setTextureMap(self, name, map):
        """setTextureMap(MXparamList self, char const * name, CtextureMap map) -> bool"""
        return _pymaxwell5.MXparamList_setTextureMap(self, name, map)


    def getByte(self, name):
        """getByte(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getByte(self, name)


    def getUInt(self, name):
        """getUInt(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getUInt(self, name)


    def getInt(self, name):
        """getInt(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getInt(self, name)


    def getFloat(self, name):
        """getFloat(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getFloat(self, name)


    def getDouble(self, name):
        """getDouble(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getDouble(self, name)


    def getIntArray(self, name):
        """getIntArray(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getIntArray(self, name)


    def getFloatArray(self, name):
        """getFloatArray(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getFloatArray(self, name)


    def getDoubleArray(self, name):
        """getDoubleArray(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getDoubleArray(self, name)


    def getByteArray(self, name):
        """getByteArray(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getByteArray(self, name)


    def getString(self, name):
        """getString(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getString(self, name)


    def getMXparamList(self, name):
        """getMXparamList(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getMXparamList(self, name)


    def getMXparamListArray(self, name):
        """getMXparamListArray(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getMXparamListArray(self, name)


    def getRgb(self, name):
        """getRgb(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getRgb(self, name)


    def getTextureMap(self, name):
        """getTextureMap(MXparamList self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamList_getTextureMap(self, name)


    def isStringEmpty(self, name):
        """isStringEmpty(MXparamList self, char const * name) -> bool"""
        return _pymaxwell5.MXparamList_isStringEmpty(self, name)


    def removeItem(self, name):
        """removeItem(MXparamList self, char const * name) -> bool"""
        return _pymaxwell5.MXparamList_removeItem(self, name)


    def getNumItems(self):
        """getNumItems(MXparamList self) -> unsigned int"""
        return _pymaxwell5.MXparamList_getNumItems(self)


    def getByIndex(self, index):
        """
        Method:      getByIndex( index ) -> ( name, data, dataMin, dataMax, dataType, dataTypeSize, dataCount, success )
        Description: Get a parameter by index. Returns a tuple with all the parameter data.
                     name = Name of the parameter.
                     data = Parameter data. It could be one of the following:
                     int, float, str, MXparamList or a list of any of them, Crgb.
                     dataMin = minimum value allowed for the parameter requested.
                     dataMax = maximum value allowed for the paramater requested.
                     dataType = type of the data, not useful for Python. These are the possible values:
                       UCHAR, UINT, INT, FLOAT, DOUBLE, STRING, FLOATARRAY, DOUBLEARRAY, BYTEARRAY,
                       INTARRAY, MXPARAMLIST and MXPARAMLISTARRAY
                     dataTypeSize = size in bytes of dataType. Not useful for Python:
                       UCHAR = 1, UINT = 4, INT = 4, FLOAT = 4, DOUBLE = 8, STRING = 1,
                       FLOATARRAY = 4, DOUBLEARRAY = 8, BYTEARRAY = 1, INTARRAY = 4, MXPARAMLIST = 0,
                       MXPARAMLISTARRAY = 0, RGB = 12.
                     dataCount = number of elements in 'data':
                       UCHAR = 1, UINT = 1, INT = 1, FLOAT = 1, DOUBLE = 1, STRING = len(data),
                       FLOATARRAY = arbitrary, DOUBLEARRAY = arbitrary, BYTEARRAY = arbitrary,
                       INTARRAY = arbitrary, MXPARAMLIST = 1, MXPARAMLISTARRAY = arbitrary, RGB = 1.
        """
        return _pymaxwell5.MXparamList_getByIndex(self, index)


    def getByName(self, name):
        """
        Method:      getByName( name ) -> ( data, dataMin, dataMax, dataType, dataTypeSize, dataCount, success )
        Description: Get a parameter by name. Returns a tuple with all the parameter data.
                     data = Parameter data. It could be one of the following:
                            int, float, str, MXparamList or a list of any of them.
                     dataMin = minimum value allowed for the parameter requested.
                     dataMax = maximum value allowed for the paramater requested.
                     dataType = type of the data, not useful for Python. These are the possible values:
                       UCHAR, UINT, INT, FLOAT, DOUBLE, STRING, FLOATARRAY, DOUBLEARRAY, BYTEARRAY,
                       INTARRAY, MXPARAMLIST and MXPARAMLISTARRAY
                     dataTypeSize = size in bytes of dataType. Not useful for Python:
                       UCHAR = 1, UINT = 4, INT = 4, FLOAT = 4, DOUBLE = 8, STRING = 1,
                       FLOATARRAY = 4, DOUBLEARRAY = 8, BYTEARRAY = 1, INTARRAY = 4, MXPARAMLIST = 0,
                       MXPARAMLISTARRAY = 0, RGB = 12.
                     dataCount = number of elements in 'data':
                       UCHAR = 1, UINT = 1, INT = 1, FLOAT = 1, DOUBLE = 1, STRING = len(data),
                       FLOATARRAY = arbitrary, DOUBLEARRAY = arbitrary, BYTEARRAY = arbitrary,
                       INTARRAY = arbitrary, MXPARAMLIST = 1, MXPARAMLISTARRAY = arbitrary, RGB = 1.
        """
        return _pymaxwell5.MXparamList_getByName(self, name)


    def write(self, f):
        """write(MXparamList self, mw::sources::Cfile * f) -> bool"""
        return _pymaxwell5.MXparamList_write(self, f)


    def read(self, f):
        """read(MXparamList self, mw::sources::Cfile * f) -> bool"""
        return _pymaxwell5.MXparamList_read(self, f)


    def read_LEGACY(self, f):
        """read_LEGACY(MXparamList self, mw::sources::Cfile * f) -> bool"""
        return _pymaxwell5.MXparamList_read_LEGACY(self, f)


    def __str__(self):
        """__str__(MXparamList self) -> char *"""
        return _pymaxwell5.MXparamList___str__(self)

MXparamList.clear = new_instancemethod(_pymaxwell5.MXparamList_clear, None, MXparamList)
MXparamList.free = new_instancemethod(_pymaxwell5.MXparamList_free, None, MXparamList)
MXparamList.copyFrom = new_instancemethod(_pymaxwell5.MXparamList_copyFrom, None, MXparamList)
MXparamList.updateFrom = new_instancemethod(_pymaxwell5.MXparamList_updateFrom, None, MXparamList)
MXparamList.equals = new_instancemethod(_pymaxwell5.MXparamList_equals, None, MXparamList)
MXparamList.createByte = new_instancemethod(_pymaxwell5.MXparamList_createByte, None, MXparamList)
MXparamList.createUInt = new_instancemethod(_pymaxwell5.MXparamList_createUInt, None, MXparamList)
MXparamList.createInt = new_instancemethod(_pymaxwell5.MXparamList_createInt, None, MXparamList)
MXparamList.createFloat = new_instancemethod(_pymaxwell5.MXparamList_createFloat, None, MXparamList)
MXparamList.createDouble = new_instancemethod(_pymaxwell5.MXparamList_createDouble, None, MXparamList)
MXparamList.createIntArray = new_instancemethod(_pymaxwell5.MXparamList_createIntArray, None, MXparamList)
MXparamList.createFloatArray = new_instancemethod(_pymaxwell5.MXparamList_createFloatArray, None, MXparamList)
MXparamList.createDoubleArray = new_instancemethod(_pymaxwell5.MXparamList_createDoubleArray, None, MXparamList)
MXparamList.createByteArray = new_instancemethod(_pymaxwell5.MXparamList_createByteArray, None, MXparamList)
MXparamList.createString = new_instancemethod(_pymaxwell5.MXparamList_createString, None, MXparamList)
MXparamList.createMXparamList = new_instancemethod(_pymaxwell5.MXparamList_createMXparamList, None, MXparamList)
MXparamList.createMXparamListArray = new_instancemethod(_pymaxwell5.MXparamList_createMXparamListArray, None, MXparamList)
MXparamList.createRgb = new_instancemethod(_pymaxwell5.MXparamList_createRgb, None, MXparamList)
MXparamList.createTextureMap = new_instancemethod(_pymaxwell5.MXparamList_createTextureMap, None, MXparamList)
MXparamList.setByte = new_instancemethod(_pymaxwell5.MXparamList_setByte, None, MXparamList)
MXparamList.setUInt = new_instancemethod(_pymaxwell5.MXparamList_setUInt, None, MXparamList)
MXparamList.setInt = new_instancemethod(_pymaxwell5.MXparamList_setInt, None, MXparamList)
MXparamList.setFloat = new_instancemethod(_pymaxwell5.MXparamList_setFloat, None, MXparamList)
MXparamList.setDouble = new_instancemethod(_pymaxwell5.MXparamList_setDouble, None, MXparamList)
MXparamList.setIntArray = new_instancemethod(_pymaxwell5.MXparamList_setIntArray, None, MXparamList)
MXparamList.setFloatArray = new_instancemethod(_pymaxwell5.MXparamList_setFloatArray, None, MXparamList)
MXparamList.setDoubleArray = new_instancemethod(_pymaxwell5.MXparamList_setDoubleArray, None, MXparamList)
MXparamList.setByteArray = new_instancemethod(_pymaxwell5.MXparamList_setByteArray, None, MXparamList)
MXparamList.setString = new_instancemethod(_pymaxwell5.MXparamList_setString, None, MXparamList)
MXparamList.setMXparamList = new_instancemethod(_pymaxwell5.MXparamList_setMXparamList, None, MXparamList)
MXparamList.setMXparamListArray = new_instancemethod(_pymaxwell5.MXparamList_setMXparamListArray, None, MXparamList)
MXparamList.setRgb = new_instancemethod(_pymaxwell5.MXparamList_setRgb, None, MXparamList)
MXparamList.setTextureMap = new_instancemethod(_pymaxwell5.MXparamList_setTextureMap, None, MXparamList)
MXparamList.getByte = new_instancemethod(_pymaxwell5.MXparamList_getByte, None, MXparamList)
MXparamList.getUInt = new_instancemethod(_pymaxwell5.MXparamList_getUInt, None, MXparamList)
MXparamList.getInt = new_instancemethod(_pymaxwell5.MXparamList_getInt, None, MXparamList)
MXparamList.getFloat = new_instancemethod(_pymaxwell5.MXparamList_getFloat, None, MXparamList)
MXparamList.getDouble = new_instancemethod(_pymaxwell5.MXparamList_getDouble, None, MXparamList)
MXparamList.getIntArray = new_instancemethod(_pymaxwell5.MXparamList_getIntArray, None, MXparamList)
MXparamList.getFloatArray = new_instancemethod(_pymaxwell5.MXparamList_getFloatArray, None, MXparamList)
MXparamList.getDoubleArray = new_instancemethod(_pymaxwell5.MXparamList_getDoubleArray, None, MXparamList)
MXparamList.getByteArray = new_instancemethod(_pymaxwell5.MXparamList_getByteArray, None, MXparamList)
MXparamList.getString = new_instancemethod(_pymaxwell5.MXparamList_getString, None, MXparamList)
MXparamList.getMXparamList = new_instancemethod(_pymaxwell5.MXparamList_getMXparamList, None, MXparamList)
MXparamList.getMXparamListArray = new_instancemethod(_pymaxwell5.MXparamList_getMXparamListArray, None, MXparamList)
MXparamList.getRgb = new_instancemethod(_pymaxwell5.MXparamList_getRgb, None, MXparamList)
MXparamList.getTextureMap = new_instancemethod(_pymaxwell5.MXparamList_getTextureMap, None, MXparamList)
MXparamList.isStringEmpty = new_instancemethod(_pymaxwell5.MXparamList_isStringEmpty, None, MXparamList)
MXparamList.removeItem = new_instancemethod(_pymaxwell5.MXparamList_removeItem, None, MXparamList)
MXparamList.getNumItems = new_instancemethod(_pymaxwell5.MXparamList_getNumItems, None, MXparamList)
MXparamList.getByIndex = new_instancemethod(_pymaxwell5.MXparamList_getByIndex, None, MXparamList)
MXparamList.getByName = new_instancemethod(_pymaxwell5.MXparamList_getByName, None, MXparamList)
MXparamList.write = new_instancemethod(_pymaxwell5.MXparamList_write, None, MXparamList)
MXparamList.read = new_instancemethod(_pymaxwell5.MXparamList_read, None, MXparamList)
MXparamList.read_LEGACY = new_instancemethod(_pymaxwell5.MXparamList_read_LEGACY, None, MXparamList)
MXparamList.__str__ = new_instancemethod(_pymaxwell5.MXparamList___str__, None, MXparamList)
MXparamList_swigregister = _pymaxwell5.MXparamList_swigregister
MXparamList_swigregister(MXparamList)

class MXparamListRef(object):
    """Proxy of C++ MXparamListRef class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def clear(self):
        """clear(MXparamListRef self)"""
        return _pymaxwell5.MXparamListRef_clear(self)


    def free(self):
        """free(MXparamListRef self)"""
        return _pymaxwell5.MXparamListRef_free(self)


    def createByte(self, name, initialValue, minValue, maxValue):
        """createByte(MXparamListRef self, char const * name, unsigned char initialValue, unsigned char minValue, unsigned char maxValue) -> bool"""
        return _pymaxwell5.MXparamListRef_createByte(self, name, initialValue, minValue, maxValue)


    def createUInt(self, name, initialValue, minValue, maxValue):
        """createUInt(MXparamListRef self, char const * name, unsigned int initialValue, unsigned int minValue, unsigned int maxValue) -> bool"""
        return _pymaxwell5.MXparamListRef_createUInt(self, name, initialValue, minValue, maxValue)


    def createInt(self, name, initialValue, minValue, maxValue):
        """createInt(MXparamListRef self, char const * name, int initialValue, int minValue, int maxValue) -> bool"""
        return _pymaxwell5.MXparamListRef_createInt(self, name, initialValue, minValue, maxValue)


    def createFloat(self, name, initialValue, minValue, maxValue):
        """createFloat(MXparamListRef self, char const * name, float initialValue, float minValue, float maxValue) -> bool"""
        return _pymaxwell5.MXparamListRef_createFloat(self, name, initialValue, minValue, maxValue)


    def createDouble(self, name, initialValue, minValue, maxValue):
        """createDouble(MXparamListRef self, char const * name, double initialValue, double minValue, double maxValue) -> bool"""
        return _pymaxwell5.MXparamListRef_createDouble(self, name, initialValue, minValue, maxValue)


    def createIntArray(self, name, data):
        """createIntArray(MXparamListRef self, char const * name, PyObject * data) -> bool"""
        return _pymaxwell5.MXparamListRef_createIntArray(self, name, data)


    def createFloatArray(self, name, data):
        """createFloatArray(MXparamListRef self, char const * name, PyObject * data) -> bool"""
        return _pymaxwell5.MXparamListRef_createFloatArray(self, name, data)


    def createDoubleArray(self, name, data):
        """createDoubleArray(MXparamListRef self, char const * name, PyObject * data) -> bool"""
        return _pymaxwell5.MXparamListRef_createDoubleArray(self, name, data)


    def createByteArray(self, name, data):
        """createByteArray(MXparamListRef self, char const * name, PyObject * data) -> bool"""
        return _pymaxwell5.MXparamListRef_createByteArray(self, name, data)


    def createString(self, name, str):
        """createString(MXparamListRef self, char const * name, char * str) -> bool"""
        return _pymaxwell5.MXparamListRef_createString(self, name, str)


    def createMXparamList(self, name, mx):
        """createMXparamList(MXparamListRef self, char const * name, MXparamList mx) -> bool"""
        return _pymaxwell5.MXparamListRef_createMXparamList(self, name, mx)


    def createMXparamListArray(self, name, mxList):
        """createMXparamListArray(MXparamListRef self, char const * name, PyObject * mxList) -> bool"""
        return _pymaxwell5.MXparamListRef_createMXparamListArray(self, name, mxList)


    def createRgb(self, name, rgb):
        """createRgb(MXparamListRef self, char const * name, Crgb rgb) -> bool"""
        return _pymaxwell5.MXparamListRef_createRgb(self, name, rgb)


    def createTextureMap(self, name, map):
        """createTextureMap(MXparamListRef self, char const * name, CtextureMap map) -> bool"""
        return _pymaxwell5.MXparamListRef_createTextureMap(self, name, map)


    def setByte(self, name, value):
        """setByte(MXparamListRef self, char const * name, unsigned char value) -> bool"""
        return _pymaxwell5.MXparamListRef_setByte(self, name, value)


    def setUInt(self, name, value):
        """setUInt(MXparamListRef self, char const * name, unsigned int value) -> bool"""
        return _pymaxwell5.MXparamListRef_setUInt(self, name, value)


    def setInt(self, name, value):
        """setInt(MXparamListRef self, char const * name, int value) -> bool"""
        return _pymaxwell5.MXparamListRef_setInt(self, name, value)


    def setFloat(self, name, value):
        """setFloat(MXparamListRef self, char const * name, float value) -> bool"""
        return _pymaxwell5.MXparamListRef_setFloat(self, name, value)


    def setDouble(self, name, value):
        """setDouble(MXparamListRef self, char const * name, double value) -> bool"""
        return _pymaxwell5.MXparamListRef_setDouble(self, name, value)


    def setIntArray(self, name, data):
        """setIntArray(MXparamListRef self, char const * name, PyObject * data) -> bool"""
        return _pymaxwell5.MXparamListRef_setIntArray(self, name, data)


    def setFloatArray(self, name, data, base):
        """setFloatArray(MXparamListRef self, char const * name, PyObject * data, Cbase base) -> bool"""
        return _pymaxwell5.MXparamListRef_setFloatArray(self, name, data, base)


    def setDoubleArray(self, name, data, base):
        """setDoubleArray(MXparamListRef self, char const * name, PyObject * data, Cbase base) -> bool"""
        return _pymaxwell5.MXparamListRef_setDoubleArray(self, name, data, base)


    def setByteArray(self, name, data):
        """setByteArray(MXparamListRef self, char const * name, PyObject * data) -> bool"""
        return _pymaxwell5.MXparamListRef_setByteArray(self, name, data)


    def setString(self, name, str):
        """setString(MXparamListRef self, char const * name, char * str) -> bool"""
        return _pymaxwell5.MXparamListRef_setString(self, name, str)


    def setMXparamList(self, name, mx):
        """setMXparamList(MXparamListRef self, char const * name, MXparamList mx) -> bool"""
        return _pymaxwell5.MXparamListRef_setMXparamList(self, name, mx)


    def setMXparamListArray(self, name, mxList):
        """setMXparamListArray(MXparamListRef self, char const * name, PyObject * mxList) -> bool"""
        return _pymaxwell5.MXparamListRef_setMXparamListArray(self, name, mxList)


    def setRgb(self, name, rgb):
        """setRgb(MXparamListRef self, char const * name, Crgb rgb) -> bool"""
        return _pymaxwell5.MXparamListRef_setRgb(self, name, rgb)


    def setTextureMap(self, name, map):
        """setTextureMap(MXparamListRef self, char const * name, CtextureMap map) -> bool"""
        return _pymaxwell5.MXparamListRef_setTextureMap(self, name, map)


    def getByte(self, name):
        """getByte(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getByte(self, name)


    def getUInt(self, name):
        """getUInt(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getUInt(self, name)


    def getInt(self, name):
        """getInt(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getInt(self, name)


    def getFloat(self, name):
        """getFloat(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getFloat(self, name)


    def getDouble(self, name):
        """getDouble(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getDouble(self, name)


    def getIntArray(self, name):
        """getIntArray(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getIntArray(self, name)


    def getFloatArray(self, name):
        """getFloatArray(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getFloatArray(self, name)


    def getDoubleArray(self, name):
        """getDoubleArray(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getDoubleArray(self, name)


    def getByteArray(self, name):
        """getByteArray(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getByteArray(self, name)


    def getString(self, name):
        """getString(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getString(self, name)


    def getMXparamList(self, name):
        """getMXparamList(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getMXparamList(self, name)


    def getMXparamListArray(self, name):
        """getMXparamListArray(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getMXparamListArray(self, name)


    def getRgb(self, name):
        """getRgb(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getRgb(self, name)


    def getTextureMap(self, name):
        """getTextureMap(MXparamListRef self, char const * name) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getTextureMap(self, name)


    def isStringEmpty(self, name):
        """isStringEmpty(MXparamListRef self, char const * name) -> bool"""
        return _pymaxwell5.MXparamListRef_isStringEmpty(self, name)


    def removeItem(self, name):
        """removeItem(MXparamListRef self, char const * name) -> bool"""
        return _pymaxwell5.MXparamListRef_removeItem(self, name)


    def getNumItems(self):
        """getNumItems(MXparamListRef self) -> unsigned int"""
        return _pymaxwell5.MXparamListRef_getNumItems(self)


    def getByIndex(self, index):
        """
        Method:      getByIndex( index ) -> ( name, data, dataMin, dataMax, dataType, dataTypeSize, dataCount, success )
        Description: Get a parameter by index. Returns a tuple with all the parameter data.
                     name = Name of the parameter.
                     data = Parameter data. It could be one of the following:
                     int, float, str, MXparamList or a list of any of them, Crgb.
                     dataMin = minimum value allowed for the parameter requested.
                     dataMax = maximum value allowed for the paramater requested.
                     dataType = type of the data, not useful for Python. These are the possible values:
                       UCHAR, UINT, INT, FLOAT, DOUBLE, STRING, FLOATARRAY, DOUBLEARRAY, BYTEARRAY,
                       INTARRAY, MXPARAMLIST and MXPARAMLISTARRAY
                     dataTypeSize = size in bytes of dataType. Not useful for Python:
                       UCHAR = 1, UINT = 4, INT = 4, FLOAT = 4, DOUBLE = 8, STRING = 1,
                       FLOATARRAY = 4, DOUBLEARRAY = 8, BYTEARRAY = 1, INTARRAY = 4, MXPARAMLIST = 0,
                       MXPARAMLISTARRAY = 0, RGB = 12.
                     dataCount = number of elements in 'data':
                       UCHAR = 1, UINT = 1, INT = 1, FLOAT = 1, DOUBLE = 1, STRING = len(data),
                       FLOATARRAY = arbitrary, DOUBLEARRAY = arbitrary, BYTEARRAY = arbitrary,
                       INTARRAY = arbitrary, MXPARAMLIST = 1, MXPARAMLISTARRAY = arbitrary, RGB = 1.
        """
        return _pymaxwell5.MXparamListRef_getByIndex(self, index)


    def getByName(self, name):
        """
        Method:      getByName( name ) -> ( data, dataMin, dataMax, dataType, dataTypeSize, dataCount, success )
        Description: Get a parameter by name. Returns a tuple with all the parameter data.
                     data = Parameter data. It could be one of the following:
                            int, float, str, MXparamList or a list of any of them.
                     dataMin = minimum value allowed for the parameter requested.
                     dataMax = maximum value allowed for the paramater requested.
                     dataType = type of the data, not useful for Python. These are the possible values:
                       UCHAR, UINT, INT, FLOAT, DOUBLE, STRING, FLOATARRAY, DOUBLEARRAY, BYTEARRAY,
                       INTARRAY, MXPARAMLIST and MXPARAMLISTARRAY
                     dataTypeSize = size in bytes of dataType. Not useful for Python:
                       UCHAR = 1, UINT = 4, INT = 4, FLOAT = 4, DOUBLE = 8, STRING = 1,
                       FLOATARRAY = 4, DOUBLEARRAY = 8, BYTEARRAY = 1, INTARRAY = 4, MXPARAMLIST = 0,
                       MXPARAMLISTARRAY = 0, RGB = 12.
                     dataCount = number of elements in 'data':
                       UCHAR = 1, UINT = 1, INT = 1, FLOAT = 1, DOUBLE = 1, STRING = len(data),
                       FLOATARRAY = arbitrary, DOUBLEARRAY = arbitrary, BYTEARRAY = arbitrary,
                       INTARRAY = arbitrary, MXPARAMLIST = 1, MXPARAMLISTARRAY = arbitrary, RGB = 1.
        """
        return _pymaxwell5.MXparamListRef_getByName(self, name)


    def getCopy(self):
        """getCopy(MXparamListRef self) -> PyObject *"""
        return _pymaxwell5.MXparamListRef_getCopy(self)


    def __str__(self):
        """__str__(MXparamListRef self) -> char *"""
        return _pymaxwell5.MXparamListRef___str__(self)

    __swig_destroy__ = _pymaxwell5.delete_MXparamListRef
MXparamListRef.clear = new_instancemethod(_pymaxwell5.MXparamListRef_clear, None, MXparamListRef)
MXparamListRef.free = new_instancemethod(_pymaxwell5.MXparamListRef_free, None, MXparamListRef)
MXparamListRef.createByte = new_instancemethod(_pymaxwell5.MXparamListRef_createByte, None, MXparamListRef)
MXparamListRef.createUInt = new_instancemethod(_pymaxwell5.MXparamListRef_createUInt, None, MXparamListRef)
MXparamListRef.createInt = new_instancemethod(_pymaxwell5.MXparamListRef_createInt, None, MXparamListRef)
MXparamListRef.createFloat = new_instancemethod(_pymaxwell5.MXparamListRef_createFloat, None, MXparamListRef)
MXparamListRef.createDouble = new_instancemethod(_pymaxwell5.MXparamListRef_createDouble, None, MXparamListRef)
MXparamListRef.createIntArray = new_instancemethod(_pymaxwell5.MXparamListRef_createIntArray, None, MXparamListRef)
MXparamListRef.createFloatArray = new_instancemethod(_pymaxwell5.MXparamListRef_createFloatArray, None, MXparamListRef)
MXparamListRef.createDoubleArray = new_instancemethod(_pymaxwell5.MXparamListRef_createDoubleArray, None, MXparamListRef)
MXparamListRef.createByteArray = new_instancemethod(_pymaxwell5.MXparamListRef_createByteArray, None, MXparamListRef)
MXparamListRef.createString = new_instancemethod(_pymaxwell5.MXparamListRef_createString, None, MXparamListRef)
MXparamListRef.createMXparamList = new_instancemethod(_pymaxwell5.MXparamListRef_createMXparamList, None, MXparamListRef)
MXparamListRef.createMXparamListArray = new_instancemethod(_pymaxwell5.MXparamListRef_createMXparamListArray, None, MXparamListRef)
MXparamListRef.createRgb = new_instancemethod(_pymaxwell5.MXparamListRef_createRgb, None, MXparamListRef)
MXparamListRef.createTextureMap = new_instancemethod(_pymaxwell5.MXparamListRef_createTextureMap, None, MXparamListRef)
MXparamListRef.setByte = new_instancemethod(_pymaxwell5.MXparamListRef_setByte, None, MXparamListRef)
MXparamListRef.setUInt = new_instancemethod(_pymaxwell5.MXparamListRef_setUInt, None, MXparamListRef)
MXparamListRef.setInt = new_instancemethod(_pymaxwell5.MXparamListRef_setInt, None, MXparamListRef)
MXparamListRef.setFloat = new_instancemethod(_pymaxwell5.MXparamListRef_setFloat, None, MXparamListRef)
MXparamListRef.setDouble = new_instancemethod(_pymaxwell5.MXparamListRef_setDouble, None, MXparamListRef)
MXparamListRef.setIntArray = new_instancemethod(_pymaxwell5.MXparamListRef_setIntArray, None, MXparamListRef)
MXparamListRef.setFloatArray = new_instancemethod(_pymaxwell5.MXparamListRef_setFloatArray, None, MXparamListRef)
MXparamListRef.setDoubleArray = new_instancemethod(_pymaxwell5.MXparamListRef_setDoubleArray, None, MXparamListRef)
MXparamListRef.setByteArray = new_instancemethod(_pymaxwell5.MXparamListRef_setByteArray, None, MXparamListRef)
MXparamListRef.setString = new_instancemethod(_pymaxwell5.MXparamListRef_setString, None, MXparamListRef)
MXparamListRef.setMXparamList = new_instancemethod(_pymaxwell5.MXparamListRef_setMXparamList, None, MXparamListRef)
MXparamListRef.setMXparamListArray = new_instancemethod(_pymaxwell5.MXparamListRef_setMXparamListArray, None, MXparamListRef)
MXparamListRef.setRgb = new_instancemethod(_pymaxwell5.MXparamListRef_setRgb, None, MXparamListRef)
MXparamListRef.setTextureMap = new_instancemethod(_pymaxwell5.MXparamListRef_setTextureMap, None, MXparamListRef)
MXparamListRef.getByte = new_instancemethod(_pymaxwell5.MXparamListRef_getByte, None, MXparamListRef)
MXparamListRef.getUInt = new_instancemethod(_pymaxwell5.MXparamListRef_getUInt, None, MXparamListRef)
MXparamListRef.getInt = new_instancemethod(_pymaxwell5.MXparamListRef_getInt, None, MXparamListRef)
MXparamListRef.getFloat = new_instancemethod(_pymaxwell5.MXparamListRef_getFloat, None, MXparamListRef)
MXparamListRef.getDouble = new_instancemethod(_pymaxwell5.MXparamListRef_getDouble, None, MXparamListRef)
MXparamListRef.getIntArray = new_instancemethod(_pymaxwell5.MXparamListRef_getIntArray, None, MXparamListRef)
MXparamListRef.getFloatArray = new_instancemethod(_pymaxwell5.MXparamListRef_getFloatArray, None, MXparamListRef)
MXparamListRef.getDoubleArray = new_instancemethod(_pymaxwell5.MXparamListRef_getDoubleArray, None, MXparamListRef)
MXparamListRef.getByteArray = new_instancemethod(_pymaxwell5.MXparamListRef_getByteArray, None, MXparamListRef)
MXparamListRef.getString = new_instancemethod(_pymaxwell5.MXparamListRef_getString, None, MXparamListRef)
MXparamListRef.getMXparamList = new_instancemethod(_pymaxwell5.MXparamListRef_getMXparamList, None, MXparamListRef)
MXparamListRef.getMXparamListArray = new_instancemethod(_pymaxwell5.MXparamListRef_getMXparamListArray, None, MXparamListRef)
MXparamListRef.getRgb = new_instancemethod(_pymaxwell5.MXparamListRef_getRgb, None, MXparamListRef)
MXparamListRef.getTextureMap = new_instancemethod(_pymaxwell5.MXparamListRef_getTextureMap, None, MXparamListRef)
MXparamListRef.isStringEmpty = new_instancemethod(_pymaxwell5.MXparamListRef_isStringEmpty, None, MXparamListRef)
MXparamListRef.removeItem = new_instancemethod(_pymaxwell5.MXparamListRef_removeItem, None, MXparamListRef)
MXparamListRef.getNumItems = new_instancemethod(_pymaxwell5.MXparamListRef_getNumItems, None, MXparamListRef)
MXparamListRef.getByIndex = new_instancemethod(_pymaxwell5.MXparamListRef_getByIndex, None, MXparamListRef)
MXparamListRef.getByName = new_instancemethod(_pymaxwell5.MXparamListRef_getByName, None, MXparamListRef)
MXparamListRef.getCopy = new_instancemethod(_pymaxwell5.MXparamListRef_getCopy, None, MXparamListRef)
MXparamListRef.__str__ = new_instancemethod(_pymaxwell5.MXparamListRef___str__, None, MXparamListRef)
MXparamListRef_swigregister = _pymaxwell5.MXparamListRef_swigregister
MXparamListRef_swigregister(MXparamListRef)

class CbaseExtension(object):
    """Proxy of C++ CbaseExtension class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CbaseExtension self) -> CbaseExtension
        __init__(CbaseExtension self, CbaseExtension orig) -> CbaseExtension
        """
        if self.__class__ == CbaseExtension:
            _self = None
        else:
            _self = self
        _pymaxwell5.CbaseExtension_swiginit(self, _pymaxwell5.new_CbaseExtension(_self, *args))

    def internalCreation(self):
        """internalCreation(CbaseExtension self)"""
        return _pymaxwell5.CbaseExtension_internalCreation(self)

    __swig_destroy__ = _pymaxwell5.delete_CbaseExtension

    def clone(self):
        """clone(CbaseExtension self) -> CbaseExtension"""
        return _pymaxwell5.CbaseExtension_clone(self)


    def getName(self):
        """getName(CbaseExtension self) -> char const *"""
        return _pymaxwell5.CbaseExtension_getName(self)


    def getVersion(self):
        """getVersion(CbaseExtension self) -> unsigned int"""
        return _pymaxwell5.CbaseExtension_getVersion(self)


    def setExtensionData(self, p):
        """setExtensionData(CbaseExtension self, MXparamList p)"""
        return _pymaxwell5.CbaseExtension_setExtensionData(self, p)


    def getFileDependencies(self, pMaxwell, numDependencies, paths):
        """getFileDependencies(CbaseExtension self, Cmaxwell pMaxwell, dword & numDependencies, char **& paths)"""
        return _pymaxwell5.CbaseExtension_getFileDependencies(self, pMaxwell, numDependencies, paths)


    def handleEvent(self, event, param):
        """handleEvent(CbaseExtension self, char const * event, void * param)"""
        return _pymaxwell5.CbaseExtension_handleEvent(self, event, param)


    def cleanup(self, pMaxwell):
        """cleanup(CbaseExtension self, Cmaxwell pMaxwell)"""
        return _pymaxwell5.CbaseExtension_cleanup(self, pMaxwell)


    def freePreview(self):
        """freePreview(CbaseExtension self)"""
        return _pymaxwell5.CbaseExtension_freePreview(self)


    def getExtensionData(self):
        """getExtensionData(CbaseExtension self) -> MXparamList"""
        return _pymaxwell5.CbaseExtension_getExtensionData(self)


    def setEnabled(self, enable):
        """setEnabled(CbaseExtension self, bool const enable)"""
        return _pymaxwell5.CbaseExtension_setEnabled(self, enable)


    def isEnabled(self):
        """isEnabled(CbaseExtension self) -> bool"""
        return _pymaxwell5.CbaseExtension_isEnabled(self)


    def hasCustomUIE(self):
        """hasCustomUIE(CbaseExtension self) -> bool"""
        return _pymaxwell5.CbaseExtension_hasCustomUIE(self)


    def registerCustomUIE(self, extensionManager):
        """registerCustomUIE(CbaseExtension self, CextensionManager extensionManager)"""
        return _pymaxwell5.CbaseExtension_registerCustomUIE(self, extensionManager)

    def __disown__(self):
        self.this.disown()
        _pymaxwell5.disown_CbaseExtension(self)
        return weakref_proxy(self)
CbaseExtension.internalCreation = new_instancemethod(_pymaxwell5.CbaseExtension_internalCreation, None, CbaseExtension)
CbaseExtension.clone = new_instancemethod(_pymaxwell5.CbaseExtension_clone, None, CbaseExtension)
CbaseExtension.getName = new_instancemethod(_pymaxwell5.CbaseExtension_getName, None, CbaseExtension)
CbaseExtension.getVersion = new_instancemethod(_pymaxwell5.CbaseExtension_getVersion, None, CbaseExtension)
CbaseExtension.setExtensionData = new_instancemethod(_pymaxwell5.CbaseExtension_setExtensionData, None, CbaseExtension)
CbaseExtension.getFileDependencies = new_instancemethod(_pymaxwell5.CbaseExtension_getFileDependencies, None, CbaseExtension)
CbaseExtension.handleEvent = new_instancemethod(_pymaxwell5.CbaseExtension_handleEvent, None, CbaseExtension)
CbaseExtension.cleanup = new_instancemethod(_pymaxwell5.CbaseExtension_cleanup, None, CbaseExtension)
CbaseExtension.freePreview = new_instancemethod(_pymaxwell5.CbaseExtension_freePreview, None, CbaseExtension)
CbaseExtension.getExtensionData = new_instancemethod(_pymaxwell5.CbaseExtension_getExtensionData, None, CbaseExtension)
CbaseExtension.setEnabled = new_instancemethod(_pymaxwell5.CbaseExtension_setEnabled, None, CbaseExtension)
CbaseExtension.isEnabled = new_instancemethod(_pymaxwell5.CbaseExtension_isEnabled, None, CbaseExtension)
CbaseExtension.hasCustomUIE = new_instancemethod(_pymaxwell5.CbaseExtension_hasCustomUIE, None, CbaseExtension)
CbaseExtension.registerCustomUIE = new_instancemethod(_pymaxwell5.CbaseExtension_registerCustomUIE, None, CbaseExtension)
CbaseExtension_swigregister = _pymaxwell5.CbaseExtension_swigregister
CbaseExtension_swigregister(CbaseExtension)

class CextensionManager(object):
    """Proxy of C++ CextensionManager class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def instance():
        """instance() -> CextensionManager"""
        return _pymaxwell5.CextensionManager_instance()

    instance = staticmethod(instance)

    def getExtension(self, name):
        """getExtension(CextensionManager self, char const * name) -> CextensionContainer *"""
        return _pymaxwell5.CextensionManager_getExtension(self, name)


    def loadAllExtensions(self):
        """loadAllExtensions(CextensionManager self)"""
        return _pymaxwell5.CextensionManager_loadAllExtensions(self)


    def getExtensionsDirectory(self):
        """getExtensionsDirectory(CextensionManager self) -> char const *"""
        return _pymaxwell5.CextensionManager_getExtensionsDirectory(self)


    def InitializeAllExtensions(self):
        """InitializeAllExtensions(CextensionManager self)"""
        return _pymaxwell5.CextensionManager_InitializeAllExtensions(self)


    def setMaxwellRoot(self, path):
        """setMaxwellRoot(CextensionManager self, char const * path)"""
        return _pymaxwell5.CextensionManager_setMaxwellRoot(self, path)


    def setMaxwellHome(self, path):
        """setMaxwellHome(CextensionManager self, char const * path)"""
        return _pymaxwell5.CextensionManager_setMaxwellHome(self, path)


    def addGeometryModifierExtension(self, geometryExtension):
        """addGeometryModifierExtension(CextensionManager self, CgeometryModifierExtension geometryExtension)"""
        return _pymaxwell5.CextensionManager_addGeometryModifierExtension(self, geometryExtension)


    def createDefaultGeometryModifierExtension(self, extensionName):
        """createDefaultGeometryModifierExtension(CextensionManager self, char const * extensionName) -> CgeometryModifierExtension"""
        return _pymaxwell5.CextensionManager_createDefaultGeometryModifierExtension(self, extensionName)


    def createGeometryModifierExtension(self, extensionParameters):
        """createGeometryModifierExtension(CextensionManager self, MXparamList extensionParameters) -> CgeometryModifierExtension"""
        return _pymaxwell5.CextensionManager_createGeometryModifierExtension(self, extensionParameters)


    def getGeometryModifierExtensionsCount(self):
        """getGeometryModifierExtensionsCount(CextensionManager self) -> size_t"""
        return _pymaxwell5.CextensionManager_getGeometryModifierExtensionsCount(self)


    def getGeometryModifierExtensionAtIndex(self, index):
        """getGeometryModifierExtensionAtIndex(CextensionManager self, size_t index) -> CgeometryModifierExtension"""
        return _pymaxwell5.CextensionManager_getGeometryModifierExtensionAtIndex(self, index)


    def addGeometryLoaderExtension(self, geometryExtension):
        """addGeometryLoaderExtension(CextensionManager self, CgeometryLoaderExtension geometryExtension)"""
        return _pymaxwell5.CextensionManager_addGeometryLoaderExtension(self, geometryExtension)


    def createDefaultGeometryLoaderExtension(self, extensionNames):
        """createDefaultGeometryLoaderExtension(CextensionManager self, char const * extensionNames) -> CgeometryLoaderExtension"""
        return _pymaxwell5.CextensionManager_createDefaultGeometryLoaderExtension(self, extensionNames)


    def createGeometryLoaderExtension(self, extensionParameters):
        """createGeometryLoaderExtension(CextensionManager self, MXparamList extensionParameters) -> CgeometryLoaderExtension"""
        return _pymaxwell5.CextensionManager_createGeometryLoaderExtension(self, extensionParameters)


    def getGeometryLoaderExtensionsCount(self):
        """getGeometryLoaderExtensionsCount(CextensionManager self) -> size_t"""
        return _pymaxwell5.CextensionManager_getGeometryLoaderExtensionsCount(self)


    def getGeometryLoaderExtensionAtIndex(self, index):
        """getGeometryLoaderExtensionAtIndex(CextensionManager self, size_t index) -> CgeometryLoaderExtension"""
        return _pymaxwell5.CextensionManager_getGeometryLoaderExtensionAtIndex(self, index)


    def addGeometryProceduralExtension(self, geometryExtension):
        """addGeometryProceduralExtension(CextensionManager self, CgeometryProceduralExtension geometryExtension)"""
        return _pymaxwell5.CextensionManager_addGeometryProceduralExtension(self, geometryExtension)


    def createDefaultGeometryProceduralExtension(self, extensionName):
        """createDefaultGeometryProceduralExtension(CextensionManager self, char const * extensionName) -> CgeometryProceduralExtension"""
        return _pymaxwell5.CextensionManager_createDefaultGeometryProceduralExtension(self, extensionName)


    def createGeometryProceduralExtension(self, extensionParameters):
        """createGeometryProceduralExtension(CextensionManager self, MXparamList extensionParameters) -> CgeometryProceduralExtension"""
        return _pymaxwell5.CextensionManager_createGeometryProceduralExtension(self, extensionParameters)


    def getGeometryProceduralExtensionsCount(self):
        """getGeometryProceduralExtensionsCount(CextensionManager self) -> size_t"""
        return _pymaxwell5.CextensionManager_getGeometryProceduralExtensionsCount(self)


    def getGeometryProceduralExtensionAtIndex(self, index):
        """getGeometryProceduralExtensionAtIndex(CextensionManager self, size_t index) -> CgeometryProceduralExtension"""
        return _pymaxwell5.CextensionManager_getGeometryProceduralExtensionAtIndex(self, index)


    def addMaterialModifierExtension(self, materialModifierExtension):
        """addMaterialModifierExtension(CextensionManager self, CmaterialModifierExtension materialModifierExtension)"""
        return _pymaxwell5.CextensionManager_addMaterialModifierExtension(self, materialModifierExtension)


    def createDefaultMaterialModifierExtension(self, extensionName):
        """createDefaultMaterialModifierExtension(CextensionManager self, char const * extensionName) -> CmaterialModifierExtension"""
        return _pymaxwell5.CextensionManager_createDefaultMaterialModifierExtension(self, extensionName)


    def createMaterialModifierExtension(self, extensionParameters):
        """createMaterialModifierExtension(CextensionManager self, MXparamList extensionParameters) -> CmaterialModifierExtension"""
        return _pymaxwell5.CextensionManager_createMaterialModifierExtension(self, extensionParameters)


    def getMaterialModifierExtensionsCount(self):
        """getMaterialModifierExtensionsCount(CextensionManager self) -> size_t"""
        return _pymaxwell5.CextensionManager_getMaterialModifierExtensionsCount(self)


    def getMaterialModifierExtensionAtIndex(self, index):
        """getMaterialModifierExtensionAtIndex(CextensionManager self, size_t index) -> CmaterialModifierExtension"""
        return _pymaxwell5.CextensionManager_getMaterialModifierExtensionAtIndex(self, index)


    def addCameraLensExtension(self, cameraLensExtension):
        """addCameraLensExtension(CextensionManager self, CcameraLensExtension cameraLensExtension)"""
        return _pymaxwell5.CextensionManager_addCameraLensExtension(self, cameraLensExtension)


    def createDefaultCameraLensExtension(self, extensionName):
        """createDefaultCameraLensExtension(CextensionManager self, char const * extensionName) -> CcameraLensExtension"""
        return _pymaxwell5.CextensionManager_createDefaultCameraLensExtension(self, extensionName)


    def createCameraLensExtension(self, extensionParameters):
        """createCameraLensExtension(CextensionManager self, MXparamList extensionParameters) -> CcameraLensExtension"""
        return _pymaxwell5.CextensionManager_createCameraLensExtension(self, extensionParameters)


    def getCameraLensExtensionsCount(self):
        """getCameraLensExtensionsCount(CextensionManager self) -> size_t"""
        return _pymaxwell5.CextensionManager_getCameraLensExtensionsCount(self)


    def getCameraLensExtensionAtIndex(self, index):
        """getCameraLensExtensionAtIndex(CextensionManager self, size_t index) -> CcameraLensExtension"""
        return _pymaxwell5.CextensionManager_getCameraLensExtensionAtIndex(self, index)


    def addSceneModifierExtension(self, sceneModifierExtension):
        """addSceneModifierExtension(CextensionManager self, CsceneModifierExtension sceneModifierExtension)"""
        return _pymaxwell5.CextensionManager_addSceneModifierExtension(self, sceneModifierExtension)


    def createDefaultSceneModifierExtension(self, extensionName):
        """createDefaultSceneModifierExtension(CextensionManager self, char const * extensionName) -> CsceneModifierExtension"""
        return _pymaxwell5.CextensionManager_createDefaultSceneModifierExtension(self, extensionName)


    def createSceneModifierExtension(self, extensionParameters):
        """createSceneModifierExtension(CextensionManager self, MXparamList extensionParameters) -> CsceneModifierExtension"""
        return _pymaxwell5.CextensionManager_createSceneModifierExtension(self, extensionParameters)


    def getSceneModifierExtensionsCount(self):
        """getSceneModifierExtensionsCount(CextensionManager self) -> size_t"""
        return _pymaxwell5.CextensionManager_getSceneModifierExtensionsCount(self)


    def getSceneModifierExtensionAtIndex(self, index):
        """getSceneModifierExtensionAtIndex(CextensionManager self, size_t index) -> CsceneModifierExtension"""
        return _pymaxwell5.CextensionManager_getSceneModifierExtensionAtIndex(self, index)


    def addSkyExtension(self, skyExtension):
        """addSkyExtension(CextensionManager self, CskyExtension skyExtension)"""
        return _pymaxwell5.CextensionManager_addSkyExtension(self, skyExtension)


    def createDefaultSkyExtension(self, extensionName):
        """createDefaultSkyExtension(CextensionManager self, char const * extensionName) -> CskyExtension"""
        return _pymaxwell5.CextensionManager_createDefaultSkyExtension(self, extensionName)


    def createSkyExtension(self, extensionParameters):
        """createSkyExtension(CextensionManager self, MXparamList extensionParameters) -> CskyExtension"""
        return _pymaxwell5.CextensionManager_createSkyExtension(self, extensionParameters)


    def getSkyExtensionsCount(self):
        """getSkyExtensionsCount(CextensionManager self) -> size_t"""
        return _pymaxwell5.CextensionManager_getSkyExtensionsCount(self)


    def getSkyExtensionAtIndex(self, index):
        """getSkyExtensionAtIndex(CextensionManager self, size_t index) -> CskyExtension"""
        return _pymaxwell5.CextensionManager_getSkyExtensionAtIndex(self, index)


    def addTextureExtension(self, textExtension):
        """addTextureExtension(CextensionManager self, CtextureExtension textExtension)"""
        return _pymaxwell5.CextensionManager_addTextureExtension(self, textExtension)


    def createDefaultTextureExtension(self, name):
        """createDefaultTextureExtension(CextensionManager self, char const * name) -> CtextureExtension"""
        return _pymaxwell5.CextensionManager_createDefaultTextureExtension(self, name)


    def createTextureExtension(self, extensionParameters):
        """createTextureExtension(CextensionManager self, MXparamList extensionParameters) -> CtextureExtension"""
        return _pymaxwell5.CextensionManager_createTextureExtension(self, extensionParameters)


    def getTextureExtensionsCount(self):
        """getTextureExtensionsCount(CextensionManager self) -> size_t"""
        return _pymaxwell5.CextensionManager_getTextureExtensionsCount(self)


    def getTextureExtensionAtIndex(self, index):
        """getTextureExtensionAtIndex(CextensionManager self, size_t index) -> CtextureExtension"""
        return _pymaxwell5.CextensionManager_getTextureExtensionAtIndex(self, index)


    def addEventExtension(self, eventExtension):
        """addEventExtension(CextensionManager self, CbaseExtension eventExtension)"""
        return _pymaxwell5.CextensionManager_addEventExtension(self, eventExtension)


    def registerExtensionForEvent(self, theExtension, eventName):
        """registerExtensionForEvent(CextensionManager self, CbaseExtension theExtension, char const * eventName)"""
        return _pymaxwell5.CextensionManager_registerExtensionForEvent(self, theExtension, eventName)


    def unregisterExtensionForEvent(self, theExtension, eventName):
        """unregisterExtensionForEvent(CextensionManager self, CbaseExtension theExtension, char const * eventName)"""
        return _pymaxwell5.CextensionManager_unregisterExtensionForEvent(self, theExtension, eventName)


    def sendExtensionEvent(self, eventName, param=None):
        """
        sendExtensionEvent(CextensionManager self, char const * eventName, void * param=None)
        sendExtensionEvent(CextensionManager self, char const * eventName)
        """
        return _pymaxwell5.CextensionManager_sendExtensionEvent(self, eventName, param)


    def registerGeometryModifierExtension(self, geometryExtension):
        """registerGeometryModifierExtension(CextensionManager self, CgeometryModifierExtension geometryExtension) -> bool"""
        return _pymaxwell5.CextensionManager_registerGeometryModifierExtension(self, geometryExtension)


    def registerTextureExtension(self, textExtension):
        """registerTextureExtension(CextensionManager self, CtextureExtension textExtension) -> bool"""
        return _pymaxwell5.CextensionManager_registerTextureExtension(self, textExtension)


    def registerSkyExtension(self, skyExtension):
        """registerSkyExtension(CextensionManager self, CskyExtension skyExtension) -> bool"""
        return _pymaxwell5.CextensionManager_registerSkyExtension(self, skyExtension)


    def registerSceneModifierExtension(self, sceneModifierExtension):
        """registerSceneModifierExtension(CextensionManager self, CsceneModifierExtension sceneModifierExtension) -> bool"""
        return _pymaxwell5.CextensionManager_registerSceneModifierExtension(self, sceneModifierExtension)


    def registerMaterialModifierExtension(self, materialModifierExtension):
        """registerMaterialModifierExtension(CextensionManager self, CmaterialModifierExtension materialModifierExtension) -> bool"""
        return _pymaxwell5.CextensionManager_registerMaterialModifierExtension(self, materialModifierExtension)


    def registerCameraLensExtension(self, cameraLensExtension):
        """registerCameraLensExtension(CextensionManager self, CcameraLensExtension cameraLensExtension) -> bool"""
        return _pymaxwell5.CextensionManager_registerCameraLensExtension(self, cameraLensExtension)


    def registerGeometryProceduralExtension(self, geometryExtension):
        """registerGeometryProceduralExtension(CextensionManager self, CgeometryProceduralExtension geometryExtension) -> bool"""
        return _pymaxwell5.CextensionManager_registerGeometryProceduralExtension(self, geometryExtension)


    def registerGeometryLoaderExtension(self, geometryExtension):
        """registerGeometryLoaderExtension(CextensionManager self, CgeometryLoaderExtension geometryExtension) -> bool"""
        return _pymaxwell5.CextensionManager_registerGeometryLoaderExtension(self, geometryExtension)


    def registerExtensionUIE(self, extensionUIE):
        """registerExtensionUIE(CextensionManager self, mx::CbaseExtensionUIE * extensionUIE)"""
        return _pymaxwell5.CextensionManager_registerExtensionUIE(self, extensionUIE)


    def createDefaultExtensionUIE(self, extensionName):
        """createDefaultExtensionUIE(CextensionManager self, char const * extensionName) -> mx::CbaseExtensionUIE *"""
        return _pymaxwell5.CextensionManager_createDefaultExtensionUIE(self, extensionName)


    def createExtensionUIE(self, extensionParameters):
        """createExtensionUIE(CextensionManager self, MXparamList extensionParameters) -> mx::CbaseExtensionUIE *"""
        return _pymaxwell5.CextensionManager_createExtensionUIE(self, extensionParameters)


    def unregisterExtensionUIE(self, extensionName):
        """unregisterExtensionUIE(CextensionManager self, char const * extensionName)"""
        return _pymaxwell5.CextensionManager_unregisterExtensionUIE(self, extensionName)


    def addMaterialExtensionUIE(self, materialName, extensionUIE):
        """addMaterialExtensionUIE(CextensionManager self, char const * materialName, mx::CbaseExtensionUIE * extensionUIE)"""
        return _pymaxwell5.CextensionManager_addMaterialExtensionUIE(self, materialName, extensionUIE)


    def changeMaterialExtensionUIEName(self, oldMaterialName, newMaterialName):
        """changeMaterialExtensionUIEName(CextensionManager self, char const * oldMaterialName, char const * newMaterialName)"""
        return _pymaxwell5.CextensionManager_changeMaterialExtensionUIEName(self, oldMaterialName, newMaterialName)


    def removeMaterialExtensionUIE(self, materialName):
        """removeMaterialExtensionUIE(CextensionManager self, char const * materialName)"""
        return _pymaxwell5.CextensionManager_removeMaterialExtensionUIE(self, materialName)


    def clearMaterialExtensionUIEs(self):
        """clearMaterialExtensionUIEs(CextensionManager self)"""
        return _pymaxwell5.CextensionManager_clearMaterialExtensionUIEs(self)


    def getMaterialExtensionUIE(self, materialName):
        """getMaterialExtensionUIE(CextensionManager self, char const * materialName) -> mx::CbaseExtensionUIE *"""
        return _pymaxwell5.CextensionManager_getMaterialExtensionUIE(self, materialName)

    __swig_destroy__ = _pymaxwell5.delete_CextensionManager
CextensionManager.getExtension = new_instancemethod(_pymaxwell5.CextensionManager_getExtension, None, CextensionManager)
CextensionManager.loadAllExtensions = new_instancemethod(_pymaxwell5.CextensionManager_loadAllExtensions, None, CextensionManager)
CextensionManager.getExtensionsDirectory = new_instancemethod(_pymaxwell5.CextensionManager_getExtensionsDirectory, None, CextensionManager)
CextensionManager.InitializeAllExtensions = new_instancemethod(_pymaxwell5.CextensionManager_InitializeAllExtensions, None, CextensionManager)
CextensionManager.setMaxwellRoot = new_instancemethod(_pymaxwell5.CextensionManager_setMaxwellRoot, None, CextensionManager)
CextensionManager.setMaxwellHome = new_instancemethod(_pymaxwell5.CextensionManager_setMaxwellHome, None, CextensionManager)
CextensionManager.addGeometryModifierExtension = new_instancemethod(_pymaxwell5.CextensionManager_addGeometryModifierExtension, None, CextensionManager)
CextensionManager.createDefaultGeometryModifierExtension = new_instancemethod(_pymaxwell5.CextensionManager_createDefaultGeometryModifierExtension, None, CextensionManager)
CextensionManager.createGeometryModifierExtension = new_instancemethod(_pymaxwell5.CextensionManager_createGeometryModifierExtension, None, CextensionManager)
CextensionManager.getGeometryModifierExtensionsCount = new_instancemethod(_pymaxwell5.CextensionManager_getGeometryModifierExtensionsCount, None, CextensionManager)
CextensionManager.getGeometryModifierExtensionAtIndex = new_instancemethod(_pymaxwell5.CextensionManager_getGeometryModifierExtensionAtIndex, None, CextensionManager)
CextensionManager.addGeometryLoaderExtension = new_instancemethod(_pymaxwell5.CextensionManager_addGeometryLoaderExtension, None, CextensionManager)
CextensionManager.createDefaultGeometryLoaderExtension = new_instancemethod(_pymaxwell5.CextensionManager_createDefaultGeometryLoaderExtension, None, CextensionManager)
CextensionManager.createGeometryLoaderExtension = new_instancemethod(_pymaxwell5.CextensionManager_createGeometryLoaderExtension, None, CextensionManager)
CextensionManager.getGeometryLoaderExtensionsCount = new_instancemethod(_pymaxwell5.CextensionManager_getGeometryLoaderExtensionsCount, None, CextensionManager)
CextensionManager.getGeometryLoaderExtensionAtIndex = new_instancemethod(_pymaxwell5.CextensionManager_getGeometryLoaderExtensionAtIndex, None, CextensionManager)
CextensionManager.addGeometryProceduralExtension = new_instancemethod(_pymaxwell5.CextensionManager_addGeometryProceduralExtension, None, CextensionManager)
CextensionManager.createDefaultGeometryProceduralExtension = new_instancemethod(_pymaxwell5.CextensionManager_createDefaultGeometryProceduralExtension, None, CextensionManager)
CextensionManager.createGeometryProceduralExtension = new_instancemethod(_pymaxwell5.CextensionManager_createGeometryProceduralExtension, None, CextensionManager)
CextensionManager.getGeometryProceduralExtensionsCount = new_instancemethod(_pymaxwell5.CextensionManager_getGeometryProceduralExtensionsCount, None, CextensionManager)
CextensionManager.getGeometryProceduralExtensionAtIndex = new_instancemethod(_pymaxwell5.CextensionManager_getGeometryProceduralExtensionAtIndex, None, CextensionManager)
CextensionManager.addMaterialModifierExtension = new_instancemethod(_pymaxwell5.CextensionManager_addMaterialModifierExtension, None, CextensionManager)
CextensionManager.createDefaultMaterialModifierExtension = new_instancemethod(_pymaxwell5.CextensionManager_createDefaultMaterialModifierExtension, None, CextensionManager)
CextensionManager.createMaterialModifierExtension = new_instancemethod(_pymaxwell5.CextensionManager_createMaterialModifierExtension, None, CextensionManager)
CextensionManager.getMaterialModifierExtensionsCount = new_instancemethod(_pymaxwell5.CextensionManager_getMaterialModifierExtensionsCount, None, CextensionManager)
CextensionManager.getMaterialModifierExtensionAtIndex = new_instancemethod(_pymaxwell5.CextensionManager_getMaterialModifierExtensionAtIndex, None, CextensionManager)
CextensionManager.addCameraLensExtension = new_instancemethod(_pymaxwell5.CextensionManager_addCameraLensExtension, None, CextensionManager)
CextensionManager.createDefaultCameraLensExtension = new_instancemethod(_pymaxwell5.CextensionManager_createDefaultCameraLensExtension, None, CextensionManager)
CextensionManager.createCameraLensExtension = new_instancemethod(_pymaxwell5.CextensionManager_createCameraLensExtension, None, CextensionManager)
CextensionManager.getCameraLensExtensionsCount = new_instancemethod(_pymaxwell5.CextensionManager_getCameraLensExtensionsCount, None, CextensionManager)
CextensionManager.getCameraLensExtensionAtIndex = new_instancemethod(_pymaxwell5.CextensionManager_getCameraLensExtensionAtIndex, None, CextensionManager)
CextensionManager.addSceneModifierExtension = new_instancemethod(_pymaxwell5.CextensionManager_addSceneModifierExtension, None, CextensionManager)
CextensionManager.createDefaultSceneModifierExtension = new_instancemethod(_pymaxwell5.CextensionManager_createDefaultSceneModifierExtension, None, CextensionManager)
CextensionManager.createSceneModifierExtension = new_instancemethod(_pymaxwell5.CextensionManager_createSceneModifierExtension, None, CextensionManager)
CextensionManager.getSceneModifierExtensionsCount = new_instancemethod(_pymaxwell5.CextensionManager_getSceneModifierExtensionsCount, None, CextensionManager)
CextensionManager.getSceneModifierExtensionAtIndex = new_instancemethod(_pymaxwell5.CextensionManager_getSceneModifierExtensionAtIndex, None, CextensionManager)
CextensionManager.addSkyExtension = new_instancemethod(_pymaxwell5.CextensionManager_addSkyExtension, None, CextensionManager)
CextensionManager.createDefaultSkyExtension = new_instancemethod(_pymaxwell5.CextensionManager_createDefaultSkyExtension, None, CextensionManager)
CextensionManager.createSkyExtension = new_instancemethod(_pymaxwell5.CextensionManager_createSkyExtension, None, CextensionManager)
CextensionManager.getSkyExtensionsCount = new_instancemethod(_pymaxwell5.CextensionManager_getSkyExtensionsCount, None, CextensionManager)
CextensionManager.getSkyExtensionAtIndex = new_instancemethod(_pymaxwell5.CextensionManager_getSkyExtensionAtIndex, None, CextensionManager)
CextensionManager.addTextureExtension = new_instancemethod(_pymaxwell5.CextensionManager_addTextureExtension, None, CextensionManager)
CextensionManager.createDefaultTextureExtension = new_instancemethod(_pymaxwell5.CextensionManager_createDefaultTextureExtension, None, CextensionManager)
CextensionManager.createTextureExtension = new_instancemethod(_pymaxwell5.CextensionManager_createTextureExtension, None, CextensionManager)
CextensionManager.getTextureExtensionsCount = new_instancemethod(_pymaxwell5.CextensionManager_getTextureExtensionsCount, None, CextensionManager)
CextensionManager.getTextureExtensionAtIndex = new_instancemethod(_pymaxwell5.CextensionManager_getTextureExtensionAtIndex, None, CextensionManager)
CextensionManager.addEventExtension = new_instancemethod(_pymaxwell5.CextensionManager_addEventExtension, None, CextensionManager)
CextensionManager.registerExtensionForEvent = new_instancemethod(_pymaxwell5.CextensionManager_registerExtensionForEvent, None, CextensionManager)
CextensionManager.unregisterExtensionForEvent = new_instancemethod(_pymaxwell5.CextensionManager_unregisterExtensionForEvent, None, CextensionManager)
CextensionManager.sendExtensionEvent = new_instancemethod(_pymaxwell5.CextensionManager_sendExtensionEvent, None, CextensionManager)
CextensionManager.registerGeometryModifierExtension = new_instancemethod(_pymaxwell5.CextensionManager_registerGeometryModifierExtension, None, CextensionManager)
CextensionManager.registerTextureExtension = new_instancemethod(_pymaxwell5.CextensionManager_registerTextureExtension, None, CextensionManager)
CextensionManager.registerSkyExtension = new_instancemethod(_pymaxwell5.CextensionManager_registerSkyExtension, None, CextensionManager)
CextensionManager.registerSceneModifierExtension = new_instancemethod(_pymaxwell5.CextensionManager_registerSceneModifierExtension, None, CextensionManager)
CextensionManager.registerMaterialModifierExtension = new_instancemethod(_pymaxwell5.CextensionManager_registerMaterialModifierExtension, None, CextensionManager)
CextensionManager.registerCameraLensExtension = new_instancemethod(_pymaxwell5.CextensionManager_registerCameraLensExtension, None, CextensionManager)
CextensionManager.registerGeometryProceduralExtension = new_instancemethod(_pymaxwell5.CextensionManager_registerGeometryProceduralExtension, None, CextensionManager)
CextensionManager.registerGeometryLoaderExtension = new_instancemethod(_pymaxwell5.CextensionManager_registerGeometryLoaderExtension, None, CextensionManager)
CextensionManager.registerExtensionUIE = new_instancemethod(_pymaxwell5.CextensionManager_registerExtensionUIE, None, CextensionManager)
CextensionManager.createDefaultExtensionUIE = new_instancemethod(_pymaxwell5.CextensionManager_createDefaultExtensionUIE, None, CextensionManager)
CextensionManager.createExtensionUIE = new_instancemethod(_pymaxwell5.CextensionManager_createExtensionUIE, None, CextensionManager)
CextensionManager.unregisterExtensionUIE = new_instancemethod(_pymaxwell5.CextensionManager_unregisterExtensionUIE, None, CextensionManager)
CextensionManager.addMaterialExtensionUIE = new_instancemethod(_pymaxwell5.CextensionManager_addMaterialExtensionUIE, None, CextensionManager)
CextensionManager.changeMaterialExtensionUIEName = new_instancemethod(_pymaxwell5.CextensionManager_changeMaterialExtensionUIEName, None, CextensionManager)
CextensionManager.removeMaterialExtensionUIE = new_instancemethod(_pymaxwell5.CextensionManager_removeMaterialExtensionUIE, None, CextensionManager)
CextensionManager.clearMaterialExtensionUIEs = new_instancemethod(_pymaxwell5.CextensionManager_clearMaterialExtensionUIEs, None, CextensionManager)
CextensionManager.getMaterialExtensionUIE = new_instancemethod(_pymaxwell5.CextensionManager_getMaterialExtensionUIE, None, CextensionManager)
CextensionManager_swigregister = _pymaxwell5.CextensionManager_swigregister
CextensionManager_swigregister(CextensionManager)

def CextensionManager_instance():
    """CextensionManager_instance() -> CextensionManager"""
    return _pymaxwell5.CextensionManager_instance()

class CgeometryModifierExtension(CbaseExtension):
    """Proxy of C++ CgeometryModifierExtension class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initializeForRendering(self, pMaxwell):
        """initializeForRendering(CgeometryModifierExtension self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell5.CgeometryModifierExtension_initializeForRendering(self, pMaxwell)


    def initializePreview(self, pMaxwell):
        """initializePreview(CgeometryModifierExtension self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell5.CgeometryModifierExtension_initializePreview(self, pMaxwell)


    def modifyMesh(self, mesh):
        """modifyMesh(CgeometryModifierExtension self, CmaxwellObject mesh) -> bool"""
        return _pymaxwell5.CgeometryModifierExtension_modifyMesh(self, mesh)


    def usesThisMaterial(self, materialName):
        """usesThisMaterial(CgeometryModifierExtension self, char const * materialName) -> bool"""
        return _pymaxwell5.CgeometryModifierExtension_usesThisMaterial(self, materialName)


    def getProxyDisplayPoints(self, originalMesh, percent, maxPoints, nPoints, points):
        """getProxyDisplayPoints(CgeometryModifierExtension self, CmaxwellObject originalMesh, dword const & percent, dword const & maxPoints, dword & nPoints, float *& points) -> bool"""
        return _pymaxwell5.CgeometryModifierExtension_getProxyDisplayPoints(self, originalMesh, percent, maxPoints, nPoints, points)


    def getProxyDisplayLines(self, originalMesh, percent, maxLines, nPoints, points, nLines, pointsPerLine):
        """getProxyDisplayLines(CgeometryModifierExtension self, CmaxwellObject originalMesh, dword const & percent, dword const & maxLines, dword & nPoints, float *& points, dword & nLines, dword *& pointsPerLine) -> bool"""
        return _pymaxwell5.CgeometryModifierExtension_getProxyDisplayLines(self, originalMesh, percent, maxLines, nPoints, points, nLines, pointsPerLine)


    def getProxyDisplayFaces(self, originalMesh, percent, maxFaces, nPoints, points, nFaces, faces):
        """getProxyDisplayFaces(CgeometryModifierExtension self, CmaxwellObject originalMesh, dword const & percent, dword const & maxFaces, dword & nPoints, float *& points, dword & nFaces, dword *& faces) -> bool"""
        return _pymaxwell5.CgeometryModifierExtension_getProxyDisplayFaces(self, originalMesh, percent, maxFaces, nPoints, points, nFaces, faces)


    def __init__(self):
        """__init__(CgeometryModifierExtension self) -> CgeometryModifierExtension"""
        if self.__class__ == CgeometryModifierExtension:
            _self = None
        else:
            _self = self
        _pymaxwell5.CgeometryModifierExtension_swiginit(self, _pymaxwell5.new_CgeometryModifierExtension(_self, ))
    __swig_destroy__ = _pymaxwell5.delete_CgeometryModifierExtension
    def __disown__(self):
        self.this.disown()
        _pymaxwell5.disown_CgeometryModifierExtension(self)
        return weakref_proxy(self)
CgeometryModifierExtension.initializeForRendering = new_instancemethod(_pymaxwell5.CgeometryModifierExtension_initializeForRendering, None, CgeometryModifierExtension)
CgeometryModifierExtension.initializePreview = new_instancemethod(_pymaxwell5.CgeometryModifierExtension_initializePreview, None, CgeometryModifierExtension)
CgeometryModifierExtension.modifyMesh = new_instancemethod(_pymaxwell5.CgeometryModifierExtension_modifyMesh, None, CgeometryModifierExtension)
CgeometryModifierExtension.usesThisMaterial = new_instancemethod(_pymaxwell5.CgeometryModifierExtension_usesThisMaterial, None, CgeometryModifierExtension)
CgeometryModifierExtension.getProxyDisplayPoints = new_instancemethod(_pymaxwell5.CgeometryModifierExtension_getProxyDisplayPoints, None, CgeometryModifierExtension)
CgeometryModifierExtension.getProxyDisplayLines = new_instancemethod(_pymaxwell5.CgeometryModifierExtension_getProxyDisplayLines, None, CgeometryModifierExtension)
CgeometryModifierExtension.getProxyDisplayFaces = new_instancemethod(_pymaxwell5.CgeometryModifierExtension_getProxyDisplayFaces, None, CgeometryModifierExtension)
CgeometryModifierExtension_swigregister = _pymaxwell5.CgeometryModifierExtension_swigregister
CgeometryModifierExtension_swigregister(CgeometryModifierExtension)

class CgeometryLoaderExtension(CbaseExtension):
    """Proxy of C++ CgeometryLoaderExtension class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initializeForRendering(self, pMaxwell):
        """initializeForRendering(CgeometryLoaderExtension self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell5.CgeometryLoaderExtension_initializeForRendering(self, pMaxwell)


    def initializePreview(self, pMaxwell):
        """initializePreview(CgeometryLoaderExtension self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell5.CgeometryLoaderExtension_initializePreview(self, pMaxwell)


    def loadMesh(self, meshToLoad):
        """loadMesh(CgeometryLoaderExtension self, CmaxwellObject meshToLoad) -> bool"""
        return _pymaxwell5.CgeometryLoaderExtension_loadMesh(self, meshToLoad)


    def getBoundingBox(self, min, max):
        """getBoundingBox(CgeometryLoaderExtension self, Cvector min, Cvector max) -> bool"""
        return _pymaxwell5.CgeometryLoaderExtension_getBoundingBox(self, min, max)


    def getProxyDisplayPoints(self, percent, maxPoints, nPoints, points):
        """getProxyDisplayPoints(CgeometryLoaderExtension self, dword const & percent, dword const & maxPoints, dword & nPoints, float *& points) -> bool"""
        return _pymaxwell5.CgeometryLoaderExtension_getProxyDisplayPoints(self, percent, maxPoints, nPoints, points)


    def getProxyDisplayLines(self, percent, maxLines, nPoints, points, nLines, pointsPerLine):
        """getProxyDisplayLines(CgeometryLoaderExtension self, dword const & percent, dword const & maxLines, dword & nPoints, float *& points, dword & nLines, dword *& pointsPerLine) -> bool"""
        return _pymaxwell5.CgeometryLoaderExtension_getProxyDisplayLines(self, percent, maxLines, nPoints, points, nLines, pointsPerLine)


    def getProxyDisplayFaces(self, percent, maxFaces, nPoints, points, nFaces, faces):
        """getProxyDisplayFaces(CgeometryLoaderExtension self, dword const & percent, dword const & maxFaces, dword & nPoints, float *& points, dword & nFaces, dword *& faces) -> bool"""
        return _pymaxwell5.CgeometryLoaderExtension_getProxyDisplayFaces(self, percent, maxFaces, nPoints, points, nFaces, faces)


    def __init__(self):
        """__init__(CgeometryLoaderExtension self) -> CgeometryLoaderExtension"""
        if self.__class__ == CgeometryLoaderExtension:
            _self = None
        else:
            _self = self
        _pymaxwell5.CgeometryLoaderExtension_swiginit(self, _pymaxwell5.new_CgeometryLoaderExtension(_self, ))
    __swig_destroy__ = _pymaxwell5.delete_CgeometryLoaderExtension
    def __disown__(self):
        self.this.disown()
        _pymaxwell5.disown_CgeometryLoaderExtension(self)
        return weakref_proxy(self)
CgeometryLoaderExtension.initializeForRendering = new_instancemethod(_pymaxwell5.CgeometryLoaderExtension_initializeForRendering, None, CgeometryLoaderExtension)
CgeometryLoaderExtension.initializePreview = new_instancemethod(_pymaxwell5.CgeometryLoaderExtension_initializePreview, None, CgeometryLoaderExtension)
CgeometryLoaderExtension.loadMesh = new_instancemethod(_pymaxwell5.CgeometryLoaderExtension_loadMesh, None, CgeometryLoaderExtension)
CgeometryLoaderExtension.getBoundingBox = new_instancemethod(_pymaxwell5.CgeometryLoaderExtension_getBoundingBox, None, CgeometryLoaderExtension)
CgeometryLoaderExtension.getProxyDisplayPoints = new_instancemethod(_pymaxwell5.CgeometryLoaderExtension_getProxyDisplayPoints, None, CgeometryLoaderExtension)
CgeometryLoaderExtension.getProxyDisplayLines = new_instancemethod(_pymaxwell5.CgeometryLoaderExtension_getProxyDisplayLines, None, CgeometryLoaderExtension)
CgeometryLoaderExtension.getProxyDisplayFaces = new_instancemethod(_pymaxwell5.CgeometryLoaderExtension_getProxyDisplayFaces, None, CgeometryLoaderExtension)
CgeometryLoaderExtension_swigregister = _pymaxwell5.CgeometryLoaderExtension_swigregister
CgeometryLoaderExtension_swigregister(CgeometryLoaderExtension)

class CgeometryProceduralExtension(CbaseExtension):
    """Proxy of C++ CgeometryProceduralExtension class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initializeForRendering(self, pMaxwell, proceduralObject):
        """initializeForRendering(CgeometryProceduralExtension self, Cmaxwell pMaxwell, CmaxwellObject proceduralObject) -> bool"""
        return _pymaxwell5.CgeometryProceduralExtension_initializeForRendering(self, pMaxwell, proceduralObject)


    def initializePreview(self, pMaxwell, proceduralObject):
        """initializePreview(CgeometryProceduralExtension self, Cmaxwell pMaxwell, CmaxwellObject proceduralObject) -> bool"""
        return _pymaxwell5.CgeometryProceduralExtension_initializePreview(self, pMaxwell, proceduralObject)


    def intersect(self, object, rayOrigin, dir, time, subVolumeIndex, pNormal, pLocalImpact, threadRandom, data, parametricUVW, tangentU, tangentV):
        """intersect(CgeometryProceduralExtension self, CmaxwellObject object, Cvector rayOrigin, Cvector dir, real time, dword subVolumeIndex, Cvector pNormal, Cvector pLocalImpact, Crandom * threadRandom, CfVector data, Cvector parametricUVW, Cvector tangentU, Cvector tangentV) -> bool"""
        return _pymaxwell5.CgeometryProceduralExtension_intersect(self, object, rayOrigin, dir, time, subVolumeIndex, pNormal, pLocalImpact, threadRandom, data, parametricUVW, tangentU, tangentV)


    def getBoundingBox(self, bboxPoints, time):
        """getBoundingBox(CgeometryProceduralExtension self, Cvector bboxPoints, float time)"""
        return _pymaxwell5.CgeometryProceduralExtension_getBoundingBox(self, bboxPoints, time)


    def getNumSubVolumes(self):
        """getNumSubVolumes(CgeometryProceduralExtension self) -> dword"""
        return _pymaxwell5.CgeometryProceduralExtension_getNumSubVolumes(self)


    def getSubVolumeBoundingBox(self, bboxPoints, subVolumeIndex, time):
        """getSubVolumeBoundingBox(CgeometryProceduralExtension self, Cvector bboxPoints, dword subVolumeIndex, float time)"""
        return _pymaxwell5.CgeometryProceduralExtension_getSubVolumeBoundingBox(self, bboxPoints, subVolumeIndex, time)


    def getNumberOfUVGenerators(self):
        """getNumberOfUVGenerators(CgeometryProceduralExtension self) -> byte"""
        return _pymaxwell5.CgeometryProceduralExtension_getNumberOfUVGenerators(self)


    def getUVGeneratorName(self, index):
        """getUVGeneratorName(CgeometryProceduralExtension self, byte index) -> char const *"""
        return _pymaxwell5.CgeometryProceduralExtension_getUVGeneratorName(self, index)


    def getUVForChannel(self, uvw, point, normal, iGenerator, subVolIndex, parametricUVW):
        """getUVForChannel(CgeometryProceduralExtension self, CfVector uvw, Cvector point, Cvector normal, dword iGenerator, dword subVolIndex, Cvector parametricUVW) -> byte"""
        return _pymaxwell5.CgeometryProceduralExtension_getUVForChannel(self, uvw, point, normal, iGenerator, subVolIndex, parametricUVW)


    def isOverlappingBoundingBox(self, bboxPoints, subVolumeIndex, forceHalfTime):
        """isOverlappingBoundingBox(CgeometryProceduralExtension self, Cvector bboxPoints, dword subVolumeIndex, bool forceHalfTime) -> bool"""
        return _pymaxwell5.CgeometryProceduralExtension_isOverlappingBoundingBox(self, bboxPoints, subVolumeIndex, forceHalfTime)


    def getProxyDisplayPoints(self, percent, maxPoints):
        """getProxyDisplayPoints(CgeometryProceduralExtension self, dword percent, dword maxPoints) -> PyObject *"""
        return _pymaxwell5.CgeometryProceduralExtension_getProxyDisplayPoints(self, percent, maxPoints)


    def getProxyDisplayLines(self, percent, maxLines, nPoints, points, nLines, pointsPerLine):
        """getProxyDisplayLines(CgeometryProceduralExtension self, dword const & percent, dword const & maxLines, dword & nPoints, float *& points, dword & nLines, dword *& pointsPerLine) -> bool"""
        return _pymaxwell5.CgeometryProceduralExtension_getProxyDisplayLines(self, percent, maxLines, nPoints, points, nLines, pointsPerLine)


    def getProxyDisplayFaces(self, percent, maxFaces, nPoints, points, nFaces, faces):
        """getProxyDisplayFaces(CgeometryProceduralExtension self, dword const & percent, dword const & maxFaces, dword & nPoints, float *& points, dword & nFaces, dword *& faces) -> bool"""
        return _pymaxwell5.CgeometryProceduralExtension_getProxyDisplayFaces(self, percent, maxFaces, nPoints, points, nFaces, faces)


    def __init__(self):
        """__init__(CgeometryProceduralExtension self) -> CgeometryProceduralExtension"""
        if self.__class__ == CgeometryProceduralExtension:
            _self = None
        else:
            _self = self
        _pymaxwell5.CgeometryProceduralExtension_swiginit(self, _pymaxwell5.new_CgeometryProceduralExtension(_self, ))
    __swig_destroy__ = _pymaxwell5.delete_CgeometryProceduralExtension
    def __disown__(self):
        self.this.disown()
        _pymaxwell5.disown_CgeometryProceduralExtension(self)
        return weakref_proxy(self)
CgeometryProceduralExtension.initializeForRendering = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_initializeForRendering, None, CgeometryProceduralExtension)
CgeometryProceduralExtension.initializePreview = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_initializePreview, None, CgeometryProceduralExtension)
CgeometryProceduralExtension.intersect = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_intersect, None, CgeometryProceduralExtension)
CgeometryProceduralExtension.getBoundingBox = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_getBoundingBox, None, CgeometryProceduralExtension)
CgeometryProceduralExtension.getNumSubVolumes = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_getNumSubVolumes, None, CgeometryProceduralExtension)
CgeometryProceduralExtension.getSubVolumeBoundingBox = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_getSubVolumeBoundingBox, None, CgeometryProceduralExtension)
CgeometryProceduralExtension.getNumberOfUVGenerators = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_getNumberOfUVGenerators, None, CgeometryProceduralExtension)
CgeometryProceduralExtension.getUVGeneratorName = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_getUVGeneratorName, None, CgeometryProceduralExtension)
CgeometryProceduralExtension.getUVForChannel = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_getUVForChannel, None, CgeometryProceduralExtension)
CgeometryProceduralExtension.isOverlappingBoundingBox = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_isOverlappingBoundingBox, None, CgeometryProceduralExtension)
CgeometryProceduralExtension.getProxyDisplayPoints = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_getProxyDisplayPoints, None, CgeometryProceduralExtension)
CgeometryProceduralExtension.getProxyDisplayLines = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_getProxyDisplayLines, None, CgeometryProceduralExtension)
CgeometryProceduralExtension.getProxyDisplayFaces = new_instancemethod(_pymaxwell5.CgeometryProceduralExtension_getProxyDisplayFaces, None, CgeometryProceduralExtension)
CgeometryProceduralExtension_swigregister = _pymaxwell5.CgeometryProceduralExtension_swigregister
CgeometryProceduralExtension_swigregister(CgeometryProceduralExtension)

class CmaterialModifierExtension(CbaseExtension):
    """Proxy of C++ CmaterialModifierExtension class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initializeForRendering(self, pMaxwell):
        """initializeForRendering(CmaterialModifierExtension self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell5.CmaterialModifierExtension_initializeForRendering(self, pMaxwell)


    def initializePreview(self, pMaxwell):
        """initializePreview(CmaterialModifierExtension self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell5.CmaterialModifierExtension_initializePreview(self, pMaxwell)


    def isBrdfExtension(self):
        """isBrdfExtension(CmaterialModifierExtension self) -> bool"""
        return _pymaxwell5.CmaterialModifierExtension_isBrdfExtension(self)


    def modifyMaterial(self, material, pMaxwell, isConvertToAdvanced=False):
        """
        modifyMaterial(CmaterialModifierExtension self, Cmaxwell::Cmaterial & material, Cmaxwell pMaxwell, bool isConvertToAdvanced=False) -> bool
        modifyMaterial(CmaterialModifierExtension self, Cmaxwell::Cmaterial & material, Cmaxwell pMaxwell) -> bool
        """
        return _pymaxwell5.CmaterialModifierExtension_modifyMaterial(self, material, pMaxwell, isConvertToAdvanced)


    def __init__(self):
        """__init__(CmaterialModifierExtension self) -> CmaterialModifierExtension"""
        if self.__class__ == CmaterialModifierExtension:
            _self = None
        else:
            _self = self
        _pymaxwell5.CmaterialModifierExtension_swiginit(self, _pymaxwell5.new_CmaterialModifierExtension(_self, ))
    __swig_destroy__ = _pymaxwell5.delete_CmaterialModifierExtension
    def __disown__(self):
        self.this.disown()
        _pymaxwell5.disown_CmaterialModifierExtension(self)
        return weakref_proxy(self)
CmaterialModifierExtension.initializeForRendering = new_instancemethod(_pymaxwell5.CmaterialModifierExtension_initializeForRendering, None, CmaterialModifierExtension)
CmaterialModifierExtension.initializePreview = new_instancemethod(_pymaxwell5.CmaterialModifierExtension_initializePreview, None, CmaterialModifierExtension)
CmaterialModifierExtension.isBrdfExtension = new_instancemethod(_pymaxwell5.CmaterialModifierExtension_isBrdfExtension, None, CmaterialModifierExtension)
CmaterialModifierExtension.modifyMaterial = new_instancemethod(_pymaxwell5.CmaterialModifierExtension_modifyMaterial, None, CmaterialModifierExtension)
CmaterialModifierExtension_swigregister = _pymaxwell5.CmaterialModifierExtension_swigregister
CmaterialModifierExtension_swigregister(CmaterialModifierExtension)

class CsceneModifierExtension(CbaseExtension):
    """Proxy of C++ CsceneModifierExtension class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initializeForRendering(self, pMaxwell):
        """initializeForRendering(CsceneModifierExtension self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell5.CsceneModifierExtension_initializeForRendering(self, pMaxwell)


    def initializePreview(self, pMaxwell):
        """initializePreview(CsceneModifierExtension self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell5.CsceneModifierExtension_initializePreview(self, pMaxwell)


    def modifyScene(self, scene):
        """modifyScene(CsceneModifierExtension self, Cmaxwell scene) -> bool"""
        return _pymaxwell5.CsceneModifierExtension_modifyScene(self, scene)


    def __init__(self):
        """__init__(CsceneModifierExtension self) -> CsceneModifierExtension"""
        if self.__class__ == CsceneModifierExtension:
            _self = None
        else:
            _self = self
        _pymaxwell5.CsceneModifierExtension_swiginit(self, _pymaxwell5.new_CsceneModifierExtension(_self, ))
    __swig_destroy__ = _pymaxwell5.delete_CsceneModifierExtension
    def __disown__(self):
        self.this.disown()
        _pymaxwell5.disown_CsceneModifierExtension(self)
        return weakref_proxy(self)
CsceneModifierExtension.initializeForRendering = new_instancemethod(_pymaxwell5.CsceneModifierExtension_initializeForRendering, None, CsceneModifierExtension)
CsceneModifierExtension.initializePreview = new_instancemethod(_pymaxwell5.CsceneModifierExtension_initializePreview, None, CsceneModifierExtension)
CsceneModifierExtension.modifyScene = new_instancemethod(_pymaxwell5.CsceneModifierExtension_modifyScene, None, CsceneModifierExtension)
CsceneModifierExtension_swigregister = _pymaxwell5.CsceneModifierExtension_swigregister
CsceneModifierExtension_swigregister(CsceneModifierExtension)

class CskyExtension(CbaseExtension):
    """Proxy of C++ CskyExtension class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initializeForRendering(self, pMaxwell):
        """initializeForRendering(CskyExtension self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell5.CskyExtension_initializeForRendering(self, pMaxwell)


    def initializePreview(self, pMaxwell):
        """initializePreview(CskyExtension self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell5.CskyExtension_initializePreview(self, pMaxwell)


    def getXYZ(self, xyz, dir):
        """getXYZ(CskyExtension self, Cxyz xyz, Cvector dir) -> bool"""
        return _pymaxwell5.CskyExtension_getXYZ(self, xyz, dir)


    def __init__(self):
        """__init__(CskyExtension self) -> CskyExtension"""
        if self.__class__ == CskyExtension:
            _self = None
        else:
            _self = self
        _pymaxwell5.CskyExtension_swiginit(self, _pymaxwell5.new_CskyExtension(_self, ))
    __swig_destroy__ = _pymaxwell5.delete_CskyExtension
    def __disown__(self):
        self.this.disown()
        _pymaxwell5.disown_CskyExtension(self)
        return weakref_proxy(self)
CskyExtension.initializeForRendering = new_instancemethod(_pymaxwell5.CskyExtension_initializeForRendering, None, CskyExtension)
CskyExtension.initializePreview = new_instancemethod(_pymaxwell5.CskyExtension_initializePreview, None, CskyExtension)
CskyExtension.getXYZ = new_instancemethod(_pymaxwell5.CskyExtension_getXYZ, None, CskyExtension)
CskyExtension_swigregister = _pymaxwell5.CskyExtension_swigregister
CskyExtension_swigregister(CskyExtension)

class CtextureExtension(CbaseExtension):
    """Proxy of C++ CtextureExtension class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initializeForRendering(self, pMaxwell, map):
        """initializeForRendering(CtextureExtension self, Cmaxwell pMaxwell, CtextureMap map) -> bool"""
        return _pymaxwell5.CtextureExtension_initializeForRendering(self, pMaxwell, map)


    def initializePreview(self, pMaxwell, map):
        """initializePreview(CtextureExtension self, Cmaxwell pMaxwell, CtextureMap map) -> bool"""
        return _pymaxwell5.CtextureExtension_initializePreview(self, pMaxwell, map)


    def getRGB(self, rgb, u, v, intersectionInfo=None, wu=0, wv=0):
        """
        getRGB(CtextureExtension self, Crgb rgb, real u, real v, IntersectionInfo const * intersectionInfo=None, unsigned int wu=0, unsigned int wv=0) -> bool
        getRGB(CtextureExtension self, Crgb rgb, real u, real v, IntersectionInfo const * intersectionInfo=None, unsigned int wu=0) -> bool
        getRGB(CtextureExtension self, Crgb rgb, real u, real v, IntersectionInfo const * intersectionInfo=None) -> bool
        getRGB(CtextureExtension self, Crgb rgb, real u, real v) -> bool
        """
        return _pymaxwell5.CtextureExtension_getRGB(self, rgb, u, v, intersectionInfo, wu, wv)


    def __init__(self):
        """__init__(CtextureExtension self) -> CtextureExtension"""
        if self.__class__ == CtextureExtension:
            _self = None
        else:
            _self = self
        _pymaxwell5.CtextureExtension_swiginit(self, _pymaxwell5.new_CtextureExtension(_self, ))
    __swig_destroy__ = _pymaxwell5.delete_CtextureExtension
    def __disown__(self):
        self.this.disown()
        _pymaxwell5.disown_CtextureExtension(self)
        return weakref_proxy(self)
CtextureExtension.initializeForRendering = new_instancemethod(_pymaxwell5.CtextureExtension_initializeForRendering, None, CtextureExtension)
CtextureExtension.initializePreview = new_instancemethod(_pymaxwell5.CtextureExtension_initializePreview, None, CtextureExtension)
CtextureExtension.getRGB = new_instancemethod(_pymaxwell5.CtextureExtension_getRGB, None, CtextureExtension)
CtextureExtension_swigregister = _pymaxwell5.CtextureExtension_swigregister
CtextureExtension_swigregister(CtextureExtension)

class CcameraLensExtension(CbaseExtension):
    """Proxy of C++ CcameraLensExtension class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initializeForRendering(self, camera, pMaxwell):
        """initializeForRendering(CcameraLensExtension self, Cmaxwell::Ccamera & camera, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell5.CcameraLensExtension_initializeForRendering(self, camera, pMaxwell)


    def getCameraRay(self, origin, direction, bufferPoint):
        """getCameraRay(CcameraLensExtension self, Cvector origin, Cvector direction, Cvector2D bufferPoint) -> bool"""
        return _pymaxwell5.CcameraLensExtension_getCameraRay(self, origin, direction, bufferPoint)


    def hasArea(self):
        """hasArea(CcameraLensExtension self) -> bool"""
        return _pymaxwell5.CcameraLensExtension_hasArea(self)


    def supportsBPT(self):
        """supportsBPT(CcameraLensExtension self) -> bool"""
        return _pymaxwell5.CcameraLensExtension_supportsBPT(self)


    def onLensToFilm(self, filmPoint, direction):
        """onLensToFilm(CcameraLensExtension self, Cvector2D filmPoint, Cvector direction) -> real"""
        return _pymaxwell5.CcameraLensExtension_onLensToFilm(self, filmPoint, direction)


    def __init__(self):
        """__init__(CcameraLensExtension self) -> CcameraLensExtension"""
        if self.__class__ == CcameraLensExtension:
            _self = None
        else:
            _self = self
        _pymaxwell5.CcameraLensExtension_swiginit(self, _pymaxwell5.new_CcameraLensExtension(_self, ))
    __swig_destroy__ = _pymaxwell5.delete_CcameraLensExtension
    def __disown__(self):
        self.this.disown()
        _pymaxwell5.disown_CcameraLensExtension(self)
        return weakref_proxy(self)
CcameraLensExtension.initializeForRendering = new_instancemethod(_pymaxwell5.CcameraLensExtension_initializeForRendering, None, CcameraLensExtension)
CcameraLensExtension.getCameraRay = new_instancemethod(_pymaxwell5.CcameraLensExtension_getCameraRay, None, CcameraLensExtension)
CcameraLensExtension.hasArea = new_instancemethod(_pymaxwell5.CcameraLensExtension_hasArea, None, CcameraLensExtension)
CcameraLensExtension.supportsBPT = new_instancemethod(_pymaxwell5.CcameraLensExtension_supportsBPT, None, CcameraLensExtension)
CcameraLensExtension.onLensToFilm = new_instancemethod(_pymaxwell5.CcameraLensExtension_onLensToFilm, None, CcameraLensExtension)
CcameraLensExtension_swigregister = _pymaxwell5.CcameraLensExtension_swigregister
CcameraLensExtension_swigregister(CcameraLensExtension)

class CenergyToColorMapping(object):
    """Proxy of C++ CenergyToColorMapping class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TYPE_LINEAR = _pymaxwell5.CenergyToColorMapping_TYPE_LINEAR
    TYPE_CUADRATIC = _pymaxwell5.CenergyToColorMapping_TYPE_CUADRATIC
    TYPE_CUBIC = _pymaxwell5.CenergyToColorMapping_TYPE_CUBIC
    TYPE_QUARTIC = _pymaxwell5.CenergyToColorMapping_TYPE_QUARTIC
    TYPE_LOGARYTHMIC = _pymaxwell5.CenergyToColorMapping_TYPE_LOGARYTHMIC

    def __init__(self):
        """__init__(CenergyToColorMapping self) -> CenergyToColorMapping"""
        _pymaxwell5.CenergyToColorMapping_swiginit(self, _pymaxwell5.new_CenergyToColorMapping())
    __swig_destroy__ = _pymaxwell5.delete_CenergyToColorMapping

    def setValues(self, type, minValue, maxValue):
        """setValues(CenergyToColorMapping self, CenergyToColorMapping::MappingType const & type, real const & minValue, real const & maxValue)"""
        return _pymaxwell5.CenergyToColorMapping_setValues(self, type, minValue, maxValue)


    def convertToRgb(self, *args):
        """
        convertToRgb(CenergyToColorMapping self, real const & value) -> Crgb
        convertToRgb(CenergyToColorMapping self, Cfxyz xyz) -> Crgb
        """
        return _pymaxwell5.CenergyToColorMapping_convertToRgb(self, *args)


    def convertToRgb8(self, *args):
        """
        convertToRgb8(CenergyToColorMapping self, real const & value) -> Crgb8
        convertToRgb8(CenergyToColorMapping self, Cfxyz xyz) -> Crgb8
        """
        return _pymaxwell5.CenergyToColorMapping_convertToRgb8(self, *args)

    mappingType_ = _swig_property(_pymaxwell5.CenergyToColorMapping_mappingType__get, _pymaxwell5.CenergyToColorMapping_mappingType__set)
    minValue_ = _swig_property(_pymaxwell5.CenergyToColorMapping_minValue__get, _pymaxwell5.CenergyToColorMapping_minValue__set)
    maxValue_ = _swig_property(_pymaxwell5.CenergyToColorMapping_maxValue__get, _pymaxwell5.CenergyToColorMapping_maxValue__set)
CenergyToColorMapping.setValues = new_instancemethod(_pymaxwell5.CenergyToColorMapping_setValues, None, CenergyToColorMapping)
CenergyToColorMapping.convertToRgb = new_instancemethod(_pymaxwell5.CenergyToColorMapping_convertToRgb, None, CenergyToColorMapping)
CenergyToColorMapping.convertToRgb8 = new_instancemethod(_pymaxwell5.CenergyToColorMapping_convertToRgb8, None, CenergyToColorMapping)
CenergyToColorMapping_swigregister = _pymaxwell5.CenergyToColorMapping_swigregister
CenergyToColorMapping_swigregister(CenergyToColorMapping)

class CextensionList(object):
    """Proxy of C++ CmaxwellArray<(p.MXparamList)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _pymaxwell5.delete_CextensionList

    def __init__(self, *args):
        """
        __init__(CmaxwellArray<(p.MXparamList)> self) -> CextensionList
        __init__(CmaxwellArray<(p.MXparamList)> self, CextensionList rhs) -> CextensionList
        """
        _pymaxwell5.CextensionList_swiginit(self, _pymaxwell5.new_CextensionList(*args))

    def elementAt(self, *args):
        """
        elementAt(CextensionList self, int i) -> MXparamList
        elementAt(CextensionList self, int i) -> MXparamList
        """
        return _pymaxwell5.CextensionList_elementAt(self, *args)


    def first(self, *args):
        """
        first(CextensionList self) -> MXparamList
        first(CextensionList self) -> MXparamList
        """
        return _pymaxwell5.CextensionList_first(self, *args)


    def back(self, *args):
        """
        back(CextensionList self) -> MXparamList
        back(CextensionList self) -> MXparamList
        """
        return _pymaxwell5.CextensionList_back(self, *args)


    def push_first(self, item):
        """push_first(CextensionList self, MXparamList item)"""
        return _pymaxwell5.CextensionList_push_first(self, item)


    def push_back(self, item):
        """push_back(CextensionList self, MXparamList item)"""
        return _pymaxwell5.CextensionList_push_back(self, item)


    def push_before(self, elem, item):
        """push_before(CextensionList self, int const elem, MXparamList item)"""
        return _pymaxwell5.CextensionList_push_before(self, elem, item)


    def push_after(self, elem, item):
        """push_after(CextensionList self, int const elem, MXparamList item)"""
        return _pymaxwell5.CextensionList_push_after(self, elem, item)


    def pop_first(self):
        """pop_first(CextensionList self)"""
        return _pymaxwell5.CextensionList_pop_first(self)


    def pop_back(self):
        """pop_back(CextensionList self)"""
        return _pymaxwell5.CextensionList_pop_back(self)


    def find(self, item):
        """find(CextensionList self, MXparamList item) -> int"""
        return _pymaxwell5.CextensionList_find(self, item)


    def contains(self, item):
        """contains(CextensionList self, MXparamList item) -> bool"""
        return _pymaxwell5.CextensionList_contains(self, item)


    def isIndexValid(self, i):
        """isIndexValid(CextensionList self, int i) -> bool"""
        return _pymaxwell5.CextensionList_isIndexValid(self, i)


    def isEmpty(self):
        """isEmpty(CextensionList self) -> bool"""
        return _pymaxwell5.CextensionList_isEmpty(self)


    def swap(self, index0, index1):
        """swap(CextensionList self, int index0, int index1)"""
        return _pymaxwell5.CextensionList_swap(self, index0, index1)


    def resize(self, newSize):
        """resize(CextensionList self, int newSize)"""
        return _pymaxwell5.CextensionList_resize(self, newSize)


    def enlarge(self, nItemsAdded=1):
        """
        enlarge(CextensionList self, int nItemsAdded=1)
        enlarge(CextensionList self)
        """
        return _pymaxwell5.CextensionList_enlarge(self, nItemsAdded)


    def decrease(self):
        """decrease(CextensionList self)"""
        return _pymaxwell5.CextensionList_decrease(self)


    def remove(self, *args):
        """
        remove(CextensionList self, int elem)
        remove(CextensionList self, MXparamList item)
        """
        return _pymaxwell5.CextensionList_remove(self, *args)


    def clear(self):
        """clear(CextensionList self)"""
        return _pymaxwell5.CextensionList_clear(self)


    def size(self):
        """size(CextensionList self) -> int"""
        return _pymaxwell5.CextensionList_size(self)


    def capacity(self):
        """capacity(CextensionList self) -> int"""
        return _pymaxwell5.CextensionList_capacity(self)

CextensionList.elementAt = new_instancemethod(_pymaxwell5.CextensionList_elementAt, None, CextensionList)
CextensionList.first = new_instancemethod(_pymaxwell5.CextensionList_first, None, CextensionList)
CextensionList.back = new_instancemethod(_pymaxwell5.CextensionList_back, None, CextensionList)
CextensionList.push_first = new_instancemethod(_pymaxwell5.CextensionList_push_first, None, CextensionList)
CextensionList.push_back = new_instancemethod(_pymaxwell5.CextensionList_push_back, None, CextensionList)
CextensionList.push_before = new_instancemethod(_pymaxwell5.CextensionList_push_before, None, CextensionList)
CextensionList.push_after = new_instancemethod(_pymaxwell5.CextensionList_push_after, None, CextensionList)
CextensionList.pop_first = new_instancemethod(_pymaxwell5.CextensionList_pop_first, None, CextensionList)
CextensionList.pop_back = new_instancemethod(_pymaxwell5.CextensionList_pop_back, None, CextensionList)
CextensionList.find = new_instancemethod(_pymaxwell5.CextensionList_find, None, CextensionList)
CextensionList.contains = new_instancemethod(_pymaxwell5.CextensionList_contains, None, CextensionList)
CextensionList.isIndexValid = new_instancemethod(_pymaxwell5.CextensionList_isIndexValid, None, CextensionList)
CextensionList.isEmpty = new_instancemethod(_pymaxwell5.CextensionList_isEmpty, None, CextensionList)
CextensionList.swap = new_instancemethod(_pymaxwell5.CextensionList_swap, None, CextensionList)
CextensionList.resize = new_instancemethod(_pymaxwell5.CextensionList_resize, None, CextensionList)
CextensionList.enlarge = new_instancemethod(_pymaxwell5.CextensionList_enlarge, None, CextensionList)
CextensionList.decrease = new_instancemethod(_pymaxwell5.CextensionList_decrease, None, CextensionList)
CextensionList.remove = new_instancemethod(_pymaxwell5.CextensionList_remove, None, CextensionList)
CextensionList.clear = new_instancemethod(_pymaxwell5.CextensionList_clear, None, CextensionList)
CextensionList.size = new_instancemethod(_pymaxwell5.CextensionList_size, None, CextensionList)
CextensionList.capacity = new_instancemethod(_pymaxwell5.CextensionList_capacity, None, CextensionList)
CextensionList_swigregister = _pymaxwell5.CextensionList_swigregister
CextensionList_swigregister(CextensionList)


def new_dwordp():
    """new_dwordp() -> dword *"""
    return _pymaxwell5.new_dwordp()

def copy_dwordp(value):
    """copy_dwordp(dword value) -> dword *"""
    return _pymaxwell5.copy_dwordp(value)

def delete_dwordp(obj):
    """delete_dwordp(dword * obj)"""
    return _pymaxwell5.delete_dwordp(obj)

def dwordp_assign(obj, value):
    """dwordp_assign(dword * obj, dword value)"""
    return _pymaxwell5.dwordp_assign(obj, value)

def dwordp_value(obj):
    """dwordp_value(dword * obj) -> dword"""
    return _pymaxwell5.dwordp_value(obj)
class MxiBuffer(object):
    """Proxy of C++ MxiBuffer class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getXRes(self):
        """getXRes(MxiBuffer self) -> dword"""
        return _pymaxwell5.MxiBuffer_getXRes(self)


    def getYRes(self):
        """getYRes(MxiBuffer self) -> dword"""
        return _pymaxwell5.MxiBuffer_getYRes(self)


    def getComponentsCount(self):
        """getComponentsCount(MxiBuffer self) -> dword"""
        return _pymaxwell5.MxiBuffer_getComponentsCount(self)


    def getComponentSize(self):
        """getComponentSize(MxiBuffer self) -> size_t"""
        return _pymaxwell5.MxiBuffer_getComponentSize(self)


    def getName(self):
        """getName(MxiBuffer self) -> mw::String"""
        return _pymaxwell5.MxiBuffer_getName(self)


    def isValid(self):
        """isValid(MxiBuffer self) -> bool"""
        return _pymaxwell5.MxiBuffer_isValid(self)


    def getArray(self):
        """getArray(MxiBuffer self) -> PyObject *"""
        return _pymaxwell5.MxiBuffer_getArray(self)


    def __init__(self):
        """__init__(MxiBuffer self) -> MxiBuffer"""
        _pymaxwell5.MxiBuffer_swiginit(self, _pymaxwell5.new_MxiBuffer())
    __swig_destroy__ = _pymaxwell5.delete_MxiBuffer
MxiBuffer.getXRes = new_instancemethod(_pymaxwell5.MxiBuffer_getXRes, None, MxiBuffer)
MxiBuffer.getYRes = new_instancemethod(_pymaxwell5.MxiBuffer_getYRes, None, MxiBuffer)
MxiBuffer.getComponentsCount = new_instancemethod(_pymaxwell5.MxiBuffer_getComponentsCount, None, MxiBuffer)
MxiBuffer.getComponentSize = new_instancemethod(_pymaxwell5.MxiBuffer_getComponentSize, None, MxiBuffer)
MxiBuffer.getName = new_instancemethod(_pymaxwell5.MxiBuffer_getName, None, MxiBuffer)
MxiBuffer.isValid = new_instancemethod(_pymaxwell5.MxiBuffer_isValid, None, MxiBuffer)
MxiBuffer.getArray = new_instancemethod(_pymaxwell5.MxiBuffer_getArray, None, MxiBuffer)
MxiBuffer_swigregister = _pymaxwell5.MxiBuffer_swigregister
MxiBuffer_swigregister(MxiBuffer)

class CmaxwellMxi(object):
    """Proxy of C++ CmaxwellMxi class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TYPE_COLOR_AND_LUMINANCE = _pymaxwell5.CmaxwellMxi_TYPE_COLOR_AND_LUMINANCE
    TYPE_TEMPERATURE = _pymaxwell5.CmaxwellMxi_TYPE_TEMPERATURE
    TYPE_MXI = _pymaxwell5.CmaxwellMxi_TYPE_MXI
    TYPE_MULTIPLE_EMITTERS = _pymaxwell5.CmaxwellMxi_TYPE_MULTIPLE_EMITTERS
    TYPE_IES = _pymaxwell5.CmaxwellMxi_TYPE_IES
    TYPE_SKY_CONSTANT = _pymaxwell5.CmaxwellMxi_TYPE_SKY_CONSTANT
    TYPE_SKY_PHYSICAL = _pymaxwell5.CmaxwellMxi_TYPE_SKY_PHYSICAL
    TYPE_CONSTANT_SUN = _pymaxwell5.CmaxwellMxi_TYPE_CONSTANT_SUN
    TYPE_IBL_ENVIRONMENT = _pymaxwell5.CmaxwellMxi_TYPE_IBL_ENVIRONMENT

    def __init__(self):
        """__init__(CmaxwellMxi self) -> CmaxwellMxi"""
        _pymaxwell5.CmaxwellMxi_swiginit(self, _pymaxwell5.new_CmaxwellMxi())

    def getVersion(self):
        """
        Method:      getVersion() -> path
        Description: Gets the mxi version of the module. Useful for debugging.
        """
        return _pymaxwell5.CmaxwellMxi_getVersion(self)


    def getFileVersion(self, filename):
        """
        Method:      getFileVersion( filename ) -> (float,Cerror)
        Description: Gets the file version of the MXI.
        """
        return _pymaxwell5.CmaxwellMxi_getFileVersion(self, filename)


    def setScenePath(self, arg2):
        """
        Method:      setScenePath( path ) -> void
        Description: Sets the path to the MXS file used to render this MXI.
        """
        return _pymaxwell5.CmaxwellMxi_setScenePath(self, arg2)


    def getScenePath(self):
        """
        Method:      getScenePath() -> path
        Description: Returns the path to the MXS file used to render this MXI if it exists.
        """
        return _pymaxwell5.CmaxwellMxi_getScenePath(self)


    def getThumbnail(self):
        """
        Method:      getThumbnail() -> image
        Description: Gets a preview image of the render.
        Parameter:   image -> numpy ubyte array. shape is (width,height,3)
        """
        return _pymaxwell5.CmaxwellMxi_getThumbnail(self)


    def setThumbnail(self, preview):
        """
        Method:      setThumbnail( image ) -> bool
        Description: Sets the MXI preview image.
        Parameter:   image -> numpy ubyte array. shape is (width,height,3)
        """
        return _pymaxwell5.CmaxwellMxi_setThumbnail(self, preview)


    def isResumable(self):
        """isResumable(CmaxwellMxi self) -> bool"""
        return _pymaxwell5.CmaxwellMxi_isResumable(self)


    def getSamplingLevel(self):
        """getSamplingLevel(CmaxwellMxi self) -> real"""
        return _pymaxwell5.CmaxwellMxi_getSamplingLevel(self)


    def getRenderTimeInSeconds(self):
        """
        Method:      getRenderTimeInSeconds() -> seconds
        Description: Returns the total render time (including any resume render) in seconds.
                     If the MXI was not generated through a render process but converting an
                     image the method returns 0
        """
        return _pymaxwell5.CmaxwellMxi_getRenderTimeInSeconds(self)


    def xRes(self):
        """xRes(CmaxwellMxi self) -> dword"""
        return _pymaxwell5.CmaxwellMxi_xRes(self)


    def yRes(self):
        """yRes(CmaxwellMxi self) -> dword"""
        return _pymaxwell5.CmaxwellMxi_yRes(self)


    def filmWidth(self):
        """filmWidth(CmaxwellMxi self) -> real"""
        return _pymaxwell5.CmaxwellMxi_filmWidth(self)


    def filmHeight(self):
        """filmHeight(CmaxwellMxi self) -> real"""
        return _pymaxwell5.CmaxwellMxi_filmHeight(self)


    def getIso(self):
        """getIso(CmaxwellMxi self) -> real"""
        return _pymaxwell5.CmaxwellMxi_getIso(self)


    def setIso(self, iso):
        """setIso(CmaxwellMxi self, real iso)"""
        return _pymaxwell5.CmaxwellMxi_setIso(self, iso)


    def getShutter(self):
        """getShutter(CmaxwellMxi self) -> real"""
        return _pymaxwell5.CmaxwellMxi_getShutter(self)


    def setShutter(self, shutter):
        """setShutter(CmaxwellMxi self, real shutter)"""
        return _pymaxwell5.CmaxwellMxi_setShutter(self, shutter)


    def getResponsePreset(self):
        """getResponsePreset(CmaxwellMxi self) -> char const *"""
        return _pymaxwell5.CmaxwellMxi_getResponsePreset(self)


    def setResponsePreset(self, cameraResponse):
        """setResponsePreset(CmaxwellMxi self, char const * cameraResponse)"""
        return _pymaxwell5.CmaxwellMxi_setResponsePreset(self, cameraResponse)


    def getFstop(self):
        """getFstop(CmaxwellMxi self) -> real"""
        return _pymaxwell5.CmaxwellMxi_getFstop(self)


    def setFstop(self, Fstop):
        """setFstop(CmaxwellMxi self, real Fstop)"""
        return _pymaxwell5.CmaxwellMxi_setFstop(self, Fstop)


    def getExposure(self):
        """getExposure(CmaxwellMxi self) -> real"""
        return _pymaxwell5.CmaxwellMxi_getExposure(self)


    def setExposure(self, intensity):
        """setExposure(CmaxwellMxi self, real intensity)"""
        return _pymaxwell5.CmaxwellMxi_setExposure(self, intensity)


    def getBurn(self):
        """getBurn(CmaxwellMxi self) -> real"""
        return _pymaxwell5.CmaxwellMxi_getBurn(self)


    def setBurn(self, burn):
        """setBurn(CmaxwellMxi self, real burn)"""
        return _pymaxwell5.CmaxwellMxi_setBurn(self, burn)


    def getMonitorGamma(self):
        """getMonitorGamma(CmaxwellMxi self) -> real"""
        return _pymaxwell5.CmaxwellMxi_getMonitorGamma(self)


    def setMonitorGamma(self, monitorGamma):
        """setMonitorGamma(CmaxwellMxi self, real monitorGamma)"""
        return _pymaxwell5.CmaxwellMxi_setMonitorGamma(self, monitorGamma)


    def getSharpness(self):
        """getSharpness(CmaxwellMxi self) -> real"""
        return _pymaxwell5.CmaxwellMxi_getSharpness(self)


    def setSharpness(self, mxiSharpness):
        """setSharpness(CmaxwellMxi self, real mxiSharpness)"""
        return _pymaxwell5.CmaxwellMxi_setSharpness(self, mxiSharpness)


    def isSharpnessEnabled(self):
        """isSharpnessEnabled(CmaxwellMxi self) -> bool"""
        return _pymaxwell5.CmaxwellMxi_isSharpnessEnabled(self)


    def setSharpnessEnabled(self, enabled):
        """setSharpnessEnabled(CmaxwellMxi self, bool enabled)"""
        return _pymaxwell5.CmaxwellMxi_setSharpnessEnabled(self, enabled)


    def setColorSpace(self, type):
        """setColorSpace(CmaxwellMxi self, dword type) -> byte"""
        return _pymaxwell5.CmaxwellMxi_setColorSpace(self, type)


    def getColorSpace(self):
        """getColorSpace(CmaxwellMxi self) -> dword"""
        return _pymaxwell5.CmaxwellMxi_getColorSpace(self)


    def setWhitePoint(self, temperature, tint):
        """setWhitePoint(CmaxwellMxi self, float const & temperature, float const & tint) -> byte"""
        return _pymaxwell5.CmaxwellMxi_setWhitePoint(self, temperature, tint)


    def getWhitePoint(self):
        """getWhitePoint(CmaxwellMxi self) -> PyObject *"""
        return _pymaxwell5.CmaxwellMxi_getWhitePoint(self)


    def setTimeCode(self, hour, minute, second, frame):
        """setTimeCode(CmaxwellMxi self, int hour, int minute, int second, int frame) -> byte"""
        return _pymaxwell5.CmaxwellMxi_setTimeCode(self, hour, minute, second, frame)


    def getTimeCode(self):
        """getTimeCode(CmaxwellMxi self) -> PyObject *"""
        return _pymaxwell5.CmaxwellMxi_getTimeCode(self)


    def getMetadata(self):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_getMetadata(self)


    def isDevignettingEnabled(self):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_isDevignettingEnabled(self)


    def setDevignettingEnabled(self, enabled):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_setDevignettingEnabled(self, enabled)


    def getDevignetting(self):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_getDevignetting(self)


    def setDevignetting(self, devignetting):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_setDevignetting(self, devignetting)


    def isDiffractionEnabled(self):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_isDiffractionEnabled(self)


    def setDiffractionEnabled(self, enabled):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_setDiffractionEnabled(self, enabled)


    def getDiffractionIntensity(self):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_getDiffractionIntensity(self)


    def setDiffractionIntensity(self, intensity):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_setDiffractionIntensity(self, intensity)


    def getDiffractionFrequency(self):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_getDiffractionFrequency(self)


    def setDiffractionFrequency(self, frequency):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_setDiffractionFrequency(self, frequency)


    def getApertureMap(self):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_getApertureMap(self)


    def setApertureMap(self, path):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_setApertureMap(self, path)


    def getObstacleMap(self):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_getObstacleMap(self)


    def setObstacleMap(self, path):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_setObstacleMap(self, path)


    def isScatteringEnabled(self):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_isScatteringEnabled(self)


    def setScatteringEnabled(self, enabled):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_setScatteringEnabled(self, enabled)


    def getScattering(self):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_getScattering(self)


    def setScattering(self, scattering):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_setScattering(self, scattering)


    def getCameraName(self):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_getCameraName(self)


    def getCameraCoordinates(self, iStep):
        """
        Method:      getCameraCoordinates( iStep ) -> (Cvector position, Cvector target, Cvector up,
                      ok)
        Description: Gets camera position data.
        Parameter:   iStep -> Subframe index. Return "" if iStep is invalid
        """
        return _pymaxwell5.CmaxwellMxi_getCameraCoordinates(self, iStep)


    def getCameraFocalLength(self, iStep):
        """
        Method:      getCameraFocalLength( iStep ) -> (focalLenght,ok)
        Description: Gets camera focal length.
        Parameter:   iStep -> Subframe index. Return "" if iStep is invalid
        """
        return _pymaxwell5.CmaxwellMxi_getCameraFocalLength(self, iStep)


    def getCameraFStop(self, iStep):
        """
        Method:      getCameraFStop( iStep ) -> (fStop,ok)
        Description: Gets camera fStop.
        Parameter:   iStep -> Subframe index. Return 'error' if iStep is invalid
        """
        return _pymaxwell5.CmaxwellMxi_getCameraFStop(self, iStep)


    def getCameraShutter(self):
        """
        Method:      getCameraShutter() -> shutter
        Description: Gets camera shutter.

        """
        return _pymaxwell5.CmaxwellMxi_getCameraShutter(self)


    def getCameraIso(self):
        """
        Method:      getCameraIso( iStep ) -> iso
        Description: Gets camera Iso.

        """
        return _pymaxwell5.CmaxwellMxi_getCameraIso(self)


    def getCameraResponsePreset(self):
        """
        Method:      getCameraResponsePreset() -> name
        Description: Gets camera response preset name.

        """
        return _pymaxwell5.CmaxwellMxi_getCameraResponsePreset(self)


    def getCameraDiaphragm(self):
        """
        Method:      getCameraDiaphragm() -> (str type, float angle, int nBlades)
        Description: Gets camera diaphragm info.

        """
        return _pymaxwell5.CmaxwellMxi_getCameraDiaphragm(self)


    def getCameraFps(self):
        """
        Method:      getCameraFps() -> fps
        Description: Gets camera fps.

        """
        return _pymaxwell5.CmaxwellMxi_getCameraFps(self)


    def getMultilightType(self):
        """
        Method:      getMultilightType() -> type
        Description: returns the multilight type of the MXI.
        Parameter:   type = 0 (No multilight), 1 (Intensity), 2 (Color + Intensity).
        """
        return _pymaxwell5.CmaxwellMxi_getMultilightType(self)


    def getLightsCount(self):
        """
        Method:      getLightsCount() -> int
        Description: returns the number of lights contained in the MXI.
        """
        return _pymaxwell5.CmaxwellMxi_getLightsCount(self)


    def getLightBuffersCount(self):
        """
        Method:      getLightBuffersCount() -> int
        Description: returns the number of light buffers contained in the MXI, including environment.
        """
        return _pymaxwell5.CmaxwellMxi_getLightBuffersCount(self)


    def getLightsNames(self):
        """
        Method:      getLightsNames() -> list (str)
        Description: returns the light names list of the MXI.
        """
        return _pymaxwell5.CmaxwellMxi_getLightsNames(self)


    def getLightName(self, lightIndex):
        """
        Method:      getLightName( index ) -> name
        Description: Returns the name of the light with the given index. If the index is invalid
                     an empty string is returned.
        """
        return _pymaxwell5.CmaxwellMxi_getLightName(self, lightIndex)


    def getLightIndex(self, lightName):
        """
        Method:      getLightIndex( name ) -> index
        Description: Returns the index of the light with the given name. Returns -1 if there are
                     no lights with this name.
        """
        return _pymaxwell5.CmaxwellMxi_getLightIndex(self, lightName)


    def getLightType(self, lightIndex):
        """
        Method:      getLightType( index ) -> type
        Description: Returns the type of the light with the given index.
        Parameter:   type = CmaxwellMxi.TYPE_COLOR_AND_LUMINANCE or
                            CmaxwellMxi.TYPE_TEMPERATURE or
                            CmaxwellMxi.TYPE_MXI or
                            CmaxwellMxi.TYPE_SKY_CONSTANT or
                            CmaxwellMxi.TYPE_SKY_PHYSICAL or
                            CmaxwellMxi.TYPE_CONSTANT_SUN or
                            CmaxwellMxi.TYPE_MULTIPLE_EMITTERS or
                            CmaxwellMxi.TYPE_IES or
                            CmaxwellMxi.TYPE_SPOT or
                            CmaxwellMxi.TYPE_IBL_ENVIRONMENT 
        """
        return _pymaxwell5.CmaxwellMxi_getLightType(self, lightIndex)


    def getLightEmissionType(self, lightIndex):
        """
        Method:      getLightEmissionType( index ) -> type
        Description: Returns emission type (units) fo the light with the given index.
                     Return values:
                       EMISSION_UNITS_WATTS_AND_LUMINOUS_EFFICACY (watts)
                       EMISSION_UNITS_LUMINOUS_POWER (lumens)
                       EMISSION_UNITS_ILLUMINANCE (lux (lum/m2))
                       EMISSION_UNITS_LUMINOUS_INTENSITY (candela (lm/sr))
                       EMISSION_UNITS_LUMINANCE (nit (candela/m2))
        """
        return _pymaxwell5.CmaxwellMxi_getLightEmissionType(self, lightIndex)


    def getLightIntensity(self, lightIndex):
        """
        Method:      getLightIntensity( index ) -> intensity
        Description: Returns the intensity of the light with the given index. Depending on the type
                     the returned intensity means different things.
                     - If type is CmaxwellMxi.TYPE_COLOR_AND_LUMINANCE the intensity is the absolute
                       emission value in the units used (watts, lumens, etc.).
                     - If type is CmaxwellMxi.TYPE_TEMPERATURE the intensity is in kelvin.
                     - If type is anything else the returned intensity is a multiplier that affects
                       the original emission value.
                     If the index is invalid -1 is returned.

        """
        return _pymaxwell5.CmaxwellMxi_getLightIntensity(self, lightIndex)


    def setLightIntensity(self, lightIndex, intensity):
        """
        Method:      setLightIntensity( index, intensity ) -> 1 = Success, 0 = Fail
        Description: Sets the intensity of the light with the given index.
                     - If type (getLightType(index)) is CmaxwellMxi.TYPE_COLOR_AND_LUMINANCE the
                       intensity is the absolute emission value in the units used (watts, lumens,
                       etc).
                     - If type is CmaxwellMxi.TYPE_TEMPERATURE the intensity is in kelvin.
                     - If type is anything else the returned intensity is a multiplier that affects
                       the original emission value.
                     If the index is invalid 0 is returned.

        """
        return _pymaxwell5.CmaxwellMxi_setLightIntensity(self, lightIndex, intensity)


    def getLightEfficacy(self, lightIndex):
        """
        Method:      getLightEfficacy( index ) -> efficacy
        Description: Returns the efficacy of the light with the given index. Scene emitter must be
                     the type EMISSION_UNITS_WATTS_AND_LUMINOUS_EFFICACY.
                     If the index is invalid -1 is returned.

        """
        return _pymaxwell5.CmaxwellMxi_getLightEfficacy(self, lightIndex)


    def setLightEfficacy(self, lightIndex, efficacy):
        """
        Method:      stLightEfficacy( index, efficacy ) -> 1 = Success, 0 = Fail
        Description: Sets the efficacy of the light with the given index. Scene emitter must be
                     the type EMISSION_UNITS_WATTS_AND_LUMINOUS_EFFICACY.
                     If the index is invalid 0 is returned.

        """
        return _pymaxwell5.CmaxwellMxi_setLightEfficacy(self, lightIndex, efficacy)


    def getLightColor(self, lightIndex):
        """
        Method:      getLightColor( index ) -> Crgb
        Description: Returns the Crgb color of the light with the given index. This call makes sense
                     only when lightType is TYPE_COLOR_AND_LUMINANCE and color type is set to rgb
                     color, otherwise white is returned.
        """
        return _pymaxwell5.CmaxwellMxi_getLightColor(self, lightIndex)


    def setLightColor(self, lightIndex, color):
        """
        Method:      setLightColor( index, Crgb color ) -> Crgb
        Description: Sets the Crgb color of the light with the given index. This call makes sense
                     only when getLightType() is TYPE_COLOR_AND_LUMINANCE and color type is set to
                     rgb color, otherwise return 0.
        """
        return _pymaxwell5.CmaxwellMxi_setLightColor(self, lightIndex, color)


    def getLightTemperatureColor(self, lightIndex):
        """
        Method:      getLightTemperatureColor( index ) -> color
        Description: Returns the temperature color in kelvins of the light with the given index.
                     This call makes sense only when lightType is TYPE_COLOR_AND_LUMINANCE and
                     color type is set to temperature color, otherwise -1.0 is returned.
        """
        return _pymaxwell5.CmaxwellMxi_getLightTemperatureColor(self, lightIndex)


    def setLightTemperatureColor(self, lightIndex, temperature):
        """
        Method:      setLightTemperatureColor( index, temperature ) -> color
        Description: Setsthe temperature color in kelvins of the light with the given index.
                     This call makes sense only when getLightType() is TYPE_COLOR_AND_LUMINANCE and
                     color type is set to temperature color, otherwise -1.0 is returned.
        """
        return _pymaxwell5.CmaxwellMxi_setLightTemperatureColor(self, lightIndex, temperature)


    def getConstantSkyLuminance(self):
        """
        Method:      getConstantSkyLuminance() -> (luminance,ok)
        Description: Returns the constant sky luminance (in cd/m2). Returns -1 if there
                     is no sky or if it is not constant.
        """
        return _pymaxwell5.CmaxwellMxi_getConstantSkyLuminance(self)


    def setConstantSkyLuminance(self, value):
        """
        Method:      setConstantSkyLuminance( value ) -> 1 = Success, 0 = Fail
        Description: Sets the constant sky luminance (in cd/m2). Returns 0 if there
                     is no sky or if it is not constant.
        """
        return _pymaxwell5.CmaxwellMxi_setConstantSkyLuminance(self, value)


    def getPhysicalSkyLuminance(self):
        """
        Method:      getPhysicalSkyLuminance() -> (luminance,ok)
        Description: Returns the physical sky luminance which is represented by the
                     sun power factor in the scene. Returns -1 if there is no sky or if it is not
                     constant.
        """
        return _pymaxwell5.CmaxwellMxi_getPhysicalSkyLuminance(self)


    def setPhysicalSkyLuminance(self, value):
        """
        Method:      setPhysicalSkyLuminance( value ) -> 1 = Success, 0 = Fail
        Description: Sets the physical sky luminance which is represented by the
                     sun power factor in the scene. Returns -1 if there is no sky or if it is not
                     constant.
        """
        return _pymaxwell5.CmaxwellMxi_setPhysicalSkyLuminance(self, value)


    def getSunPowerFactor(self):
        """
        Method:      getSunPowerFactor() -> (float,ok)
        Description: Returns by reference the sun power factor used when there is constant sky plus
                     sun. Returns -1 if there is no sun in the scene.
        """
        return _pymaxwell5.CmaxwellMxi_getSunPowerFactor(self)


    def setSunPowerFactor(self, value):
        """
        Method:      setSunPowerFactor( value ) -> 1 = Success, 0 = Fail
        Description: Sets the sun power factor used when there is constant sky plus sun.
                     Returns 0 if there is no sun in the scene.
        """
        return _pymaxwell5.CmaxwellMxi_setSunPowerFactor(self, value)


    def getEnvironmentWeight(self):
        """
        Method:      getEnvironmentWeight() -> (weight,ok)
        Description: Returns by reference the environment weight factor. Returns -1 if there is no
                     environment in the scene
        """
        return _pymaxwell5.CmaxwellMxi_getEnvironmentWeight(self)


    def setEnvironmentWeight(self, value):
        """
        Method:      setEnvironmentWeight( value ) -> 1 = Success, 0 = Fail
        Description: Sets the environment weight factor. Returns 0 if there is no
                     environment in the scene
        """
        return _pymaxwell5.CmaxwellMxi_setEnvironmentWeight(self, value)


    def getEmixerVersion():
        """
        Method:      getEmixerVersion() -> version
        Description: Returns the emixer version file used in this version of the SDK
        """
        return _pymaxwell5.CmaxwellMxi_getEmixerVersion()

    getEmixerVersion = staticmethod(getEmixerVersion)

    def loadEmixer(self, fileName, frame=0):
        """
        Method:      loadEmixer( filename, frame = 0 ) -> bool
        Description: Reads the given emixer file and applies its settings to the MXI. Returns True
                     if succeed, False if not.
        Parameter:   filename = Path of the emitter file.
        Parameter:   frame = frame of the emitter file (if there is more than one).
        Method:      loadEmixer( filename, frame = 0 ) -> bool
        Description: Reads the given emixer file and applies its settings to the MXI. Returns True
                     if succeed, False if not.
        Parameter:   filename = Path of the emitter file.
        Parameter:   frame = frame of the emitter file (if there is more than one).
        """
        return _pymaxwell5.CmaxwellMxi_loadEmixer(self, fileName, frame)


    def saveEmixer(self, fileName):
        """
        Method:      saveEmixer( filename ) -> bool
        Description: Saves the current MXI settings into a emixer file. Returns True if succeed,
                     False if not.
        Parameter:   filename = Path of the emixer file.
        """
        return _pymaxwell5.CmaxwellMxi_saveEmixer(self, fileName)


    def exportMultilightSettingsToScene(self, pMaxwell):
        """
        Method:      exportMultilightSettingsToScene( Cmaxwell scene ) -> bool
        Description: imports the current MXI settings back into the MXS scene. This method assumes
                     'scene' is valid and contains a valid scene. Returns True if succeed, False
                     if not.
        Parameter:   scene = Cmaxwell scene object.

        """
        return _pymaxwell5.CmaxwellMxi_exportMultilightSettingsToScene(self, pMaxwell)


    def read(self, *args):
        """
        Method:      read( filename, readHeaderOnly = False, selectedChannels = FLAG_ALL )
                     -> Cerror
        Description: Reads an MXI file from disk.
        Parameter:   filename -> Path of the MXI file to read.
        Parameter:   readHeaderOnly -> If this flag is true the function reads only the header of the
                     file. Useful for performance reasons when reading the main image buffer is not
                     needed.
        Parameter:   selectedChannels -> Selected render channels to be loaded (All by default).
                     Examples: FLAG_ALL, FLAG_RENDER, FLAG_RENDER|FLAG_ALPHA.
        Method:      read( filename, readHeaderOnly = False, selectedChannels = FLAG_ALL )
                     -> Cerror
        Description: Reads an MXI file from disk.
        Parameter:   filename -> Path of the MXI file to read.
        Parameter:   readHeaderOnly -> If this flag is true the function reads only the header of the
                     file. Useful for performance reasons when reading the main image buffer is not
                     needed.
        Parameter:   selectedChannels -> Selected render channels to be loaded (All by default).
                     Examples: FLAG_ALL, FLAG_RENDER, FLAG_RENDER|FLAG_ALPHA.
        Method:      read( filename, readHeaderOnly = False, selectedChannels = FLAG_ALL )
                     -> Cerror
        Description: Reads an MXI file from disk.
        Parameter:   filename -> Path of the MXI file to read.
        Parameter:   readHeaderOnly -> If this flag is true the function reads only the header of the
                     file. Useful for performance reasons when reading the main image buffer is not
                     needed.
        Parameter:   selectedChannels -> Selected render channels to be loaded (All by default).
                     Examples: FLAG_ALL, FLAG_RENDER, FLAG_RENDER|FLAG_ALPHA.
        """
        return _pymaxwell5.CmaxwellMxi_read(self, *args)


    def write(self, fileName):
        """
        Method:      write( filename ) -> Cerror
        Description: writes an MXI file to disk.
        Parameter:   fileName -> Path of the MXI file to write.
        """
        return _pymaxwell5.CmaxwellMxi_write(self, fileName)


    def getFileSize(self):
        """
        Method:      getFileSize() -> bytes
        Description: Returns the number of bytes that this MXI will have, even if it has not been
                     saved yet. It takes into account the buffers, channels and multilight options
                     enabled.
        """
        return _pymaxwell5.CmaxwellMxi_getFileSize(self)


    def readImage(self, fileName):
        """
        Method:      readImage( filename ) -> True = Success, False = Fail
        Description: Reads an image file and fills the internal buffer with it.
        """
        return _pymaxwell5.CmaxwellMxi_readImage(self, fileName)


    def writeChannels(self, fileName, destinationFolder, format):
        """
        Method:      writeChannels( filename, destFolder, extension, depth ) -> True = Success, False = Fail
        Description: Extracts all the channels embeded in the MXI to disk.
        Parameter:   fileName -> File name (not full path) of the destination files.
        Parameter:   destinationFolder -> Folder where the channels will be saved.
        Parameter:   format -> Output format, example: OUTPUT_PNG_16.
        """
        return _pymaxwell5.CmaxwellMxi_writeChannels(self, fileName, destinationFolder, format)


    def getRenderBuffer(self, bitDepth, simulens):
        """
        Method:      getRenderBuffer( bitDepth, simulens ) -> data
        Description: Returns the render buffer.
        Parameter:   bitDepth -> [BITDEPTH_8|BITDEPTH_16|BITDEPTH_32].
        Parameter:   simulens -> applies simulens to the render buffer.
        Output:      data -> MxiBuffer data.
        """
        return _pymaxwell5.CmaxwellMxi_getRenderBuffer(self, bitDepth, simulens)


    def getLightBuffer(self, light, bitDepth, simulens):
        """
        Method:      getLightBuffer( light, bitDepth, simulens ) -> data
        Description: Returns the selected light buffer.
        Parameter:   light -> index of the light.
        Parameter:   bitDepth -> [BITDEPTH_8|BITDEPTH_16|BITDEPTH_32].
        Parameter:   simulens -> applies simulens to the light buffer.
        Output:      data -> MxiBuffer data.
        """
        return _pymaxwell5.CmaxwellMxi_getLightBuffer(self, light, bitDepth, simulens)


    def getChannelBuffer(self, channel, subChannel, bitDepth):
        """
        Method:      getChannelBuffer( channel, subChannel, bitDepth ) -> data
        Description: Returns the selected channel buffer.
        Parameter:   channel -> channel selected. Example: FLAG_ALPHA.
        Parameter:   subChannel -> subChannel selected. See Cmaxwell.getNumSubChannels.
        Parameter:   bitDepth -> [BITDEPTH_8|BITDEPTH_16|BITDEPTH_32].
        Output:      data -> MxiBuffer data.
        """
        return _pymaxwell5.CmaxwellMxi_getChannelBuffer(self, channel, subChannel, bitDepth)


    def getNumSubChannels(self, ch):
        """
        Method:      getNumSubChannels( bufferID ) -> int
        Description: Returns number of images on a channel (0 if channel is not active or
                     doesn't exist).
        Parameter:   ch = channel selected. Example: FLAG_ALPHA.
        """
        return _pymaxwell5.CmaxwellMxi_getNumSubChannels(self, ch)


    def getUVIdxFromId(self, id):
        """
        Method:      getUVIdxFromId( id ) -> int
        Description: Returns UV idx in the channel array. Returns -1 if UV channel is not active
                     or id out of bounds.
        Parameter:   id -> UV id. The one specified to the object and material.

        """
        return _pymaxwell5.CmaxwellMxi_getUVIdxFromId(self, id)


    def getUVIdFromIdx(self, idx):
        """
        Method:      getUVIdFromIdx( idx ) -> int
        Description: Returns UV id. The one specified to the object and material. Returns -1 if
                     UV channel is not active or idx out of bounds.
        Parameter:   idx -> UV idx in the channel array.
        """
        return _pymaxwell5.CmaxwellMxi_getUVIdFromIdx(self, idx)


    def getAlphaCustomName(self, subChannel):
        """
        Method:      getAlphaCustomName( index ) -> (name,ok)
        Description: Returns Alpha custom name from id.Parameter:   index -> alpha idx, check with getNumSubChannels [0, numSubChannels-1].
        """
        return _pymaxwell5.CmaxwellMxi_getAlphaCustomName(self, subChannel)


    def getChannelName(self, ch):
        """
        Method:      getChannelName( channel ) -> name
        Description: Returns the name of a channel.
        Parameter:   ch = channel selected. Example: FLAG_ALPHA.
        """
        return _pymaxwell5.CmaxwellMxi_getChannelName(self, ch)


    def getChannelShowName(self, ch, subChannel=-1):
        """
        Method:      getChannelShowName( channel ) -> name
        Description: Returns the 'beauty' name of a channel.
        Parameter:   ch = channel selected. Example: FLAG_ALPHA.
        Method:      getChannelShowName( channel ) -> name
        Description: Returns the 'beauty' name of a channel.
        Parameter:   ch = channel selected. Example: FLAG_ALPHA.
        """
        return _pymaxwell5.CmaxwellMxi_getChannelShowName(self, ch, subChannel)


    def getChannelSuffix(self, ch, subChannel=-1):
        """
        Method:      getChannelSuffix( channel ) -> name
        Description: Returns the suffix of a channel.
        Parameter:   ch = channel selected. Example: FLAG_ALPHA.
        Method:      getChannelSuffix( channel ) -> name
        Description: Returns the suffix of a channel.
        Parameter:   ch = channel selected. Example: FLAG_ALPHA.
        """
        return _pymaxwell5.CmaxwellMxi_getChannelSuffix(self, ch, subChannel)


    def getExtraBuffersEnabledMask(self):
        """
        Method:      getExtraBuffersEnabledMask() -> mask
        Description: Returns a bitwise mask with the extra buffers rendered. Useful with the following
                     flags: FLAG_ALPHA, FLAG_ID_OBJECT, FLAG_ID_MATERIAL, FLAG_SHADOW_PASS,
                     FLAG_MOTION, FLAG_ROUGHNESS, FLAG_Z, FLAG_FRESNEL, FLAG_NORMALS, FLAG_POSITION,
                     FLAG_FALSE_COLOR, FLAG_DEEP, FLAG_UV or FLAG_ALPHA_CUSTOM.
        Sample code: mxi = CmaxwellMxi();
                     mxi.read('sample.mxi');
                     mask = mxi.getExtraBuffersEnabledMask();
                     haveZ = mask & FLAG_Z;
                     if haveZ:
                       print('Z channel available');
        """
        return _pymaxwell5.CmaxwellMxi_getExtraBuffersEnabledMask(self)


    def createImages(self, nLayers, nImages, xRes, yRes):
        """
        Method:      createImages( nImagges, xRes, yRes )
        Description: Create nImages buffers of xRes, yRes resolution.

        """
        return _pymaxwell5.CmaxwellMxi_createImages(self, nLayers, nImages, xRes, yRes)


    def setBufferRGB(self, buffer, layer, iImage):
        """
        Method:      setBufferRGB( data, xRes, yRes )
        Description: Fills the selected image buffer with the given floating RGB buffer. This
                     function recalculates the image buffer taking into account all the parameters
                     as Iso, Shutter, etc.. so it assumes all of them are initialized to the proper
                     values. Also assumes that the buffer size fits with the MXI resolution.
        Parameter:   pRgb -> numpy float array. shape must be (width,height,3).
        Parameter:   iImage -> selected light buffer.
        """
        return _pymaxwell5.CmaxwellMxi_setBufferRGB(self, buffer, layer, iImage)


    def updateDisplay(self):
        """
        Method:      updateDisplay()
        Description: Updates the render image buffer and all the render channels.
        """
        return _pymaxwell5.CmaxwellMxi_updateDisplay(self)


    def updatePreview(self, layer=-1):
        """
        Method:      updatePreview()
        Description: Updates the preview buffer.
        Method:      updatePreview()
        Description: Updates the preview buffer.
        """
        return _pymaxwell5.CmaxwellMxi_updatePreview(self, layer)


    def updateLightInPreview(self, lightIndex, layerSelected=-1):
        """
        Method:      updateLightInPreview( index )
        Description: Updates the given light in the preview buffer.
        Method:      updateLightInPreview( index )
        Description: Updates the given light in the preview buffer.
        """
        return _pymaxwell5.CmaxwellMxi_updateLightInPreview(self, lightIndex, layerSelected)


    def updateAllLightsInPreview(self, layerSelected=-1):
        """
        Method:      updateAllLightsInPreview()
        Description: Updates all the lights in the preview buffer.
        Method:      updateAllLightsInPreview()
        Description: Updates all the lights in the preview buffer.
        """
        return _pymaxwell5.CmaxwellMxi_updateAllLightsInPreview(self, layerSelected)


    def getRenderPreviewResolution(self, xRes, yRes):
        """
        Method:      getPreviesResolution( xRes, yRes ) -> (xResPreview, yResPreview)
        Description: Given a render resolution (xRes & yRes) returns the preview resolution.
        """
        return _pymaxwell5.CmaxwellMxi_getRenderPreviewResolution(self, xRes, yRes)


    def getRenderPreviewBuffer(self):
        """
        Method:      getRenderPreviewBuffer() -> Crgb8
        Description: Returns the preview render buffer used for interactive purposes.
        """
        return _pymaxwell5.CmaxwellMxi_getRenderPreviewBuffer(self)


    def isMerged(self):
        """
        Method:      isMerged() -> bool
        Description: Returns true if the MXI file is the result of a merge process and false if not.

        """
        return _pymaxwell5.CmaxwellMxi_isMerged(self)


    def getRenderIdCpus(self):
        """
        Method:      getRenderIdCpus() -> list
        Description: Fills a list with the cpu ids (seeds) used to generate this MXI file.

        """
        return _pymaxwell5.CmaxwellMxi_getRenderIdCpus(self)


    def mergeMxis(self, targetMxi, sources):
        """
        Method:      mergeMxis( targetMxi, sources ) -> 1 = Success, 0 = Fail
        Description: merges all the MXI files given in the sources array that contains all the
                     paths to the mxis to merge.
        Parameter:   targetMxi -> filename of the MXI where the merge process will be saved.
        Parameter:   sources -> list of MXI pathnames to merge.
        """
        return _pymaxwell5.CmaxwellMxi_mergeMxis(self, targetMxi, sources)


    def getSaveEmbedded(self):
        """
        Method:      getSaveEmbedded() -> embed
        Description: gets how layered image file formats will be saved to disk.
        """
        return _pymaxwell5.CmaxwellMxi_getSaveEmbedded(self)


    def setSaveEmbedded(self, embedded):
        """
        Method:      getSaveEmbedded() -> embed
        Description: Gets how layered image file formats will be saved to disk.
        Parameter:   embedded -> false forces all layers to be saved separately, true to save
                     layers in the same file (when image file format supports it).
        """
        return _pymaxwell5.CmaxwellMxi_setSaveEmbedded(self, embedded)


    def setMetadata(self, params):
        """
        Method:      setMetadata() -> err
        Description: Sets the MXI metadata
        """
        return _pymaxwell5.CmaxwellMxi_setMetadata(self, params)

    __swig_destroy__ = _pymaxwell5.delete_CmaxwellMxi
CmaxwellMxi.getVersion = new_instancemethod(_pymaxwell5.CmaxwellMxi_getVersion, None, CmaxwellMxi)
CmaxwellMxi.getFileVersion = new_instancemethod(_pymaxwell5.CmaxwellMxi_getFileVersion, None, CmaxwellMxi)
CmaxwellMxi.setScenePath = new_instancemethod(_pymaxwell5.CmaxwellMxi_setScenePath, None, CmaxwellMxi)
CmaxwellMxi.getScenePath = new_instancemethod(_pymaxwell5.CmaxwellMxi_getScenePath, None, CmaxwellMxi)
CmaxwellMxi.getThumbnail = new_instancemethod(_pymaxwell5.CmaxwellMxi_getThumbnail, None, CmaxwellMxi)
CmaxwellMxi.setThumbnail = new_instancemethod(_pymaxwell5.CmaxwellMxi_setThumbnail, None, CmaxwellMxi)
CmaxwellMxi.isResumable = new_instancemethod(_pymaxwell5.CmaxwellMxi_isResumable, None, CmaxwellMxi)
CmaxwellMxi.getSamplingLevel = new_instancemethod(_pymaxwell5.CmaxwellMxi_getSamplingLevel, None, CmaxwellMxi)
CmaxwellMxi.getRenderTimeInSeconds = new_instancemethod(_pymaxwell5.CmaxwellMxi_getRenderTimeInSeconds, None, CmaxwellMxi)
CmaxwellMxi.xRes = new_instancemethod(_pymaxwell5.CmaxwellMxi_xRes, None, CmaxwellMxi)
CmaxwellMxi.yRes = new_instancemethod(_pymaxwell5.CmaxwellMxi_yRes, None, CmaxwellMxi)
CmaxwellMxi.filmWidth = new_instancemethod(_pymaxwell5.CmaxwellMxi_filmWidth, None, CmaxwellMxi)
CmaxwellMxi.filmHeight = new_instancemethod(_pymaxwell5.CmaxwellMxi_filmHeight, None, CmaxwellMxi)
CmaxwellMxi.getIso = new_instancemethod(_pymaxwell5.CmaxwellMxi_getIso, None, CmaxwellMxi)
CmaxwellMxi.setIso = new_instancemethod(_pymaxwell5.CmaxwellMxi_setIso, None, CmaxwellMxi)
CmaxwellMxi.getShutter = new_instancemethod(_pymaxwell5.CmaxwellMxi_getShutter, None, CmaxwellMxi)
CmaxwellMxi.setShutter = new_instancemethod(_pymaxwell5.CmaxwellMxi_setShutter, None, CmaxwellMxi)
CmaxwellMxi.getResponsePreset = new_instancemethod(_pymaxwell5.CmaxwellMxi_getResponsePreset, None, CmaxwellMxi)
CmaxwellMxi.setResponsePreset = new_instancemethod(_pymaxwell5.CmaxwellMxi_setResponsePreset, None, CmaxwellMxi)
CmaxwellMxi.getFstop = new_instancemethod(_pymaxwell5.CmaxwellMxi_getFstop, None, CmaxwellMxi)
CmaxwellMxi.setFstop = new_instancemethod(_pymaxwell5.CmaxwellMxi_setFstop, None, CmaxwellMxi)
CmaxwellMxi.getExposure = new_instancemethod(_pymaxwell5.CmaxwellMxi_getExposure, None, CmaxwellMxi)
CmaxwellMxi.setExposure = new_instancemethod(_pymaxwell5.CmaxwellMxi_setExposure, None, CmaxwellMxi)
CmaxwellMxi.getBurn = new_instancemethod(_pymaxwell5.CmaxwellMxi_getBurn, None, CmaxwellMxi)
CmaxwellMxi.setBurn = new_instancemethod(_pymaxwell5.CmaxwellMxi_setBurn, None, CmaxwellMxi)
CmaxwellMxi.getMonitorGamma = new_instancemethod(_pymaxwell5.CmaxwellMxi_getMonitorGamma, None, CmaxwellMxi)
CmaxwellMxi.setMonitorGamma = new_instancemethod(_pymaxwell5.CmaxwellMxi_setMonitorGamma, None, CmaxwellMxi)
CmaxwellMxi.getSharpness = new_instancemethod(_pymaxwell5.CmaxwellMxi_getSharpness, None, CmaxwellMxi)
CmaxwellMxi.setSharpness = new_instancemethod(_pymaxwell5.CmaxwellMxi_setSharpness, None, CmaxwellMxi)
CmaxwellMxi.isSharpnessEnabled = new_instancemethod(_pymaxwell5.CmaxwellMxi_isSharpnessEnabled, None, CmaxwellMxi)
CmaxwellMxi.setSharpnessEnabled = new_instancemethod(_pymaxwell5.CmaxwellMxi_setSharpnessEnabled, None, CmaxwellMxi)
CmaxwellMxi.setColorSpace = new_instancemethod(_pymaxwell5.CmaxwellMxi_setColorSpace, None, CmaxwellMxi)
CmaxwellMxi.getColorSpace = new_instancemethod(_pymaxwell5.CmaxwellMxi_getColorSpace, None, CmaxwellMxi)
CmaxwellMxi.setWhitePoint = new_instancemethod(_pymaxwell5.CmaxwellMxi_setWhitePoint, None, CmaxwellMxi)
CmaxwellMxi.getWhitePoint = new_instancemethod(_pymaxwell5.CmaxwellMxi_getWhitePoint, None, CmaxwellMxi)
CmaxwellMxi.setTimeCode = new_instancemethod(_pymaxwell5.CmaxwellMxi_setTimeCode, None, CmaxwellMxi)
CmaxwellMxi.getTimeCode = new_instancemethod(_pymaxwell5.CmaxwellMxi_getTimeCode, None, CmaxwellMxi)
CmaxwellMxi.getMetadata = new_instancemethod(_pymaxwell5.CmaxwellMxi_getMetadata, None, CmaxwellMxi)
CmaxwellMxi.isDevignettingEnabled = new_instancemethod(_pymaxwell5.CmaxwellMxi_isDevignettingEnabled, None, CmaxwellMxi)
CmaxwellMxi.setDevignettingEnabled = new_instancemethod(_pymaxwell5.CmaxwellMxi_setDevignettingEnabled, None, CmaxwellMxi)
CmaxwellMxi.getDevignetting = new_instancemethod(_pymaxwell5.CmaxwellMxi_getDevignetting, None, CmaxwellMxi)
CmaxwellMxi.setDevignetting = new_instancemethod(_pymaxwell5.CmaxwellMxi_setDevignetting, None, CmaxwellMxi)
CmaxwellMxi.isDiffractionEnabled = new_instancemethod(_pymaxwell5.CmaxwellMxi_isDiffractionEnabled, None, CmaxwellMxi)
CmaxwellMxi.setDiffractionEnabled = new_instancemethod(_pymaxwell5.CmaxwellMxi_setDiffractionEnabled, None, CmaxwellMxi)
CmaxwellMxi.getDiffractionIntensity = new_instancemethod(_pymaxwell5.CmaxwellMxi_getDiffractionIntensity, None, CmaxwellMxi)
CmaxwellMxi.setDiffractionIntensity = new_instancemethod(_pymaxwell5.CmaxwellMxi_setDiffractionIntensity, None, CmaxwellMxi)
CmaxwellMxi.getDiffractionFrequency = new_instancemethod(_pymaxwell5.CmaxwellMxi_getDiffractionFrequency, None, CmaxwellMxi)
CmaxwellMxi.setDiffractionFrequency = new_instancemethod(_pymaxwell5.CmaxwellMxi_setDiffractionFrequency, None, CmaxwellMxi)
CmaxwellMxi.getApertureMap = new_instancemethod(_pymaxwell5.CmaxwellMxi_getApertureMap, None, CmaxwellMxi)
CmaxwellMxi.setApertureMap = new_instancemethod(_pymaxwell5.CmaxwellMxi_setApertureMap, None, CmaxwellMxi)
CmaxwellMxi.getObstacleMap = new_instancemethod(_pymaxwell5.CmaxwellMxi_getObstacleMap, None, CmaxwellMxi)
CmaxwellMxi.setObstacleMap = new_instancemethod(_pymaxwell5.CmaxwellMxi_setObstacleMap, None, CmaxwellMxi)
CmaxwellMxi.isScatteringEnabled = new_instancemethod(_pymaxwell5.CmaxwellMxi_isScatteringEnabled, None, CmaxwellMxi)
CmaxwellMxi.setScatteringEnabled = new_instancemethod(_pymaxwell5.CmaxwellMxi_setScatteringEnabled, None, CmaxwellMxi)
CmaxwellMxi.getScattering = new_instancemethod(_pymaxwell5.CmaxwellMxi_getScattering, None, CmaxwellMxi)
CmaxwellMxi.setScattering = new_instancemethod(_pymaxwell5.CmaxwellMxi_setScattering, None, CmaxwellMxi)
CmaxwellMxi.getCameraName = new_instancemethod(_pymaxwell5.CmaxwellMxi_getCameraName, None, CmaxwellMxi)
CmaxwellMxi.getCameraCoordinates = new_instancemethod(_pymaxwell5.CmaxwellMxi_getCameraCoordinates, None, CmaxwellMxi)
CmaxwellMxi.getCameraFocalLength = new_instancemethod(_pymaxwell5.CmaxwellMxi_getCameraFocalLength, None, CmaxwellMxi)
CmaxwellMxi.getCameraFStop = new_instancemethod(_pymaxwell5.CmaxwellMxi_getCameraFStop, None, CmaxwellMxi)
CmaxwellMxi.getCameraShutter = new_instancemethod(_pymaxwell5.CmaxwellMxi_getCameraShutter, None, CmaxwellMxi)
CmaxwellMxi.getCameraIso = new_instancemethod(_pymaxwell5.CmaxwellMxi_getCameraIso, None, CmaxwellMxi)
CmaxwellMxi.getCameraResponsePreset = new_instancemethod(_pymaxwell5.CmaxwellMxi_getCameraResponsePreset, None, CmaxwellMxi)
CmaxwellMxi.getCameraDiaphragm = new_instancemethod(_pymaxwell5.CmaxwellMxi_getCameraDiaphragm, None, CmaxwellMxi)
CmaxwellMxi.getCameraFps = new_instancemethod(_pymaxwell5.CmaxwellMxi_getCameraFps, None, CmaxwellMxi)
CmaxwellMxi.getMultilightType = new_instancemethod(_pymaxwell5.CmaxwellMxi_getMultilightType, None, CmaxwellMxi)
CmaxwellMxi.getLightsCount = new_instancemethod(_pymaxwell5.CmaxwellMxi_getLightsCount, None, CmaxwellMxi)
CmaxwellMxi.getLightBuffersCount = new_instancemethod(_pymaxwell5.CmaxwellMxi_getLightBuffersCount, None, CmaxwellMxi)
CmaxwellMxi.getLightsNames = new_instancemethod(_pymaxwell5.CmaxwellMxi_getLightsNames, None, CmaxwellMxi)
CmaxwellMxi.getLightName = new_instancemethod(_pymaxwell5.CmaxwellMxi_getLightName, None, CmaxwellMxi)
CmaxwellMxi.getLightIndex = new_instancemethod(_pymaxwell5.CmaxwellMxi_getLightIndex, None, CmaxwellMxi)
CmaxwellMxi.getLightType = new_instancemethod(_pymaxwell5.CmaxwellMxi_getLightType, None, CmaxwellMxi)
CmaxwellMxi.getLightEmissionType = new_instancemethod(_pymaxwell5.CmaxwellMxi_getLightEmissionType, None, CmaxwellMxi)
CmaxwellMxi.getLightIntensity = new_instancemethod(_pymaxwell5.CmaxwellMxi_getLightIntensity, None, CmaxwellMxi)
CmaxwellMxi.setLightIntensity = new_instancemethod(_pymaxwell5.CmaxwellMxi_setLightIntensity, None, CmaxwellMxi)
CmaxwellMxi.getLightEfficacy = new_instancemethod(_pymaxwell5.CmaxwellMxi_getLightEfficacy, None, CmaxwellMxi)
CmaxwellMxi.setLightEfficacy = new_instancemethod(_pymaxwell5.CmaxwellMxi_setLightEfficacy, None, CmaxwellMxi)
CmaxwellMxi.getLightColor = new_instancemethod(_pymaxwell5.CmaxwellMxi_getLightColor, None, CmaxwellMxi)
CmaxwellMxi.setLightColor = new_instancemethod(_pymaxwell5.CmaxwellMxi_setLightColor, None, CmaxwellMxi)
CmaxwellMxi.getLightTemperatureColor = new_instancemethod(_pymaxwell5.CmaxwellMxi_getLightTemperatureColor, None, CmaxwellMxi)
CmaxwellMxi.setLightTemperatureColor = new_instancemethod(_pymaxwell5.CmaxwellMxi_setLightTemperatureColor, None, CmaxwellMxi)
CmaxwellMxi.getConstantSkyLuminance = new_instancemethod(_pymaxwell5.CmaxwellMxi_getConstantSkyLuminance, None, CmaxwellMxi)
CmaxwellMxi.setConstantSkyLuminance = new_instancemethod(_pymaxwell5.CmaxwellMxi_setConstantSkyLuminance, None, CmaxwellMxi)
CmaxwellMxi.getPhysicalSkyLuminance = new_instancemethod(_pymaxwell5.CmaxwellMxi_getPhysicalSkyLuminance, None, CmaxwellMxi)
CmaxwellMxi.setPhysicalSkyLuminance = new_instancemethod(_pymaxwell5.CmaxwellMxi_setPhysicalSkyLuminance, None, CmaxwellMxi)
CmaxwellMxi.getSunPowerFactor = new_instancemethod(_pymaxwell5.CmaxwellMxi_getSunPowerFactor, None, CmaxwellMxi)
CmaxwellMxi.setSunPowerFactor = new_instancemethod(_pymaxwell5.CmaxwellMxi_setSunPowerFactor, None, CmaxwellMxi)
CmaxwellMxi.getEnvironmentWeight = new_instancemethod(_pymaxwell5.CmaxwellMxi_getEnvironmentWeight, None, CmaxwellMxi)
CmaxwellMxi.setEnvironmentWeight = new_instancemethod(_pymaxwell5.CmaxwellMxi_setEnvironmentWeight, None, CmaxwellMxi)
CmaxwellMxi.loadEmixer = new_instancemethod(_pymaxwell5.CmaxwellMxi_loadEmixer, None, CmaxwellMxi)
CmaxwellMxi.saveEmixer = new_instancemethod(_pymaxwell5.CmaxwellMxi_saveEmixer, None, CmaxwellMxi)
CmaxwellMxi.exportMultilightSettingsToScene = new_instancemethod(_pymaxwell5.CmaxwellMxi_exportMultilightSettingsToScene, None, CmaxwellMxi)
CmaxwellMxi.read = new_instancemethod(_pymaxwell5.CmaxwellMxi_read, None, CmaxwellMxi)
CmaxwellMxi.write = new_instancemethod(_pymaxwell5.CmaxwellMxi_write, None, CmaxwellMxi)
CmaxwellMxi.getFileSize = new_instancemethod(_pymaxwell5.CmaxwellMxi_getFileSize, None, CmaxwellMxi)
CmaxwellMxi.readImage = new_instancemethod(_pymaxwell5.CmaxwellMxi_readImage, None, CmaxwellMxi)
CmaxwellMxi.writeChannels = new_instancemethod(_pymaxwell5.CmaxwellMxi_writeChannels, None, CmaxwellMxi)
CmaxwellMxi.getRenderBuffer = new_instancemethod(_pymaxwell5.CmaxwellMxi_getRenderBuffer, None, CmaxwellMxi)
CmaxwellMxi.getLightBuffer = new_instancemethod(_pymaxwell5.CmaxwellMxi_getLightBuffer, None, CmaxwellMxi)
CmaxwellMxi.getChannelBuffer = new_instancemethod(_pymaxwell5.CmaxwellMxi_getChannelBuffer, None, CmaxwellMxi)
CmaxwellMxi.getNumSubChannels = new_instancemethod(_pymaxwell5.CmaxwellMxi_getNumSubChannels, None, CmaxwellMxi)
CmaxwellMxi.getUVIdxFromId = new_instancemethod(_pymaxwell5.CmaxwellMxi_getUVIdxFromId, None, CmaxwellMxi)
CmaxwellMxi.getUVIdFromIdx = new_instancemethod(_pymaxwell5.CmaxwellMxi_getUVIdFromIdx, None, CmaxwellMxi)
CmaxwellMxi.getAlphaCustomName = new_instancemethod(_pymaxwell5.CmaxwellMxi_getAlphaCustomName, None, CmaxwellMxi)
CmaxwellMxi.getChannelName = new_instancemethod(_pymaxwell5.CmaxwellMxi_getChannelName, None, CmaxwellMxi)
CmaxwellMxi.getChannelShowName = new_instancemethod(_pymaxwell5.CmaxwellMxi_getChannelShowName, None, CmaxwellMxi)
CmaxwellMxi.getChannelSuffix = new_instancemethod(_pymaxwell5.CmaxwellMxi_getChannelSuffix, None, CmaxwellMxi)
CmaxwellMxi.getExtraBuffersEnabledMask = new_instancemethod(_pymaxwell5.CmaxwellMxi_getExtraBuffersEnabledMask, None, CmaxwellMxi)
CmaxwellMxi.createImages = new_instancemethod(_pymaxwell5.CmaxwellMxi_createImages, None, CmaxwellMxi)
CmaxwellMxi.setBufferRGB = new_instancemethod(_pymaxwell5.CmaxwellMxi_setBufferRGB, None, CmaxwellMxi)
CmaxwellMxi.updateDisplay = new_instancemethod(_pymaxwell5.CmaxwellMxi_updateDisplay, None, CmaxwellMxi)
CmaxwellMxi.updatePreview = new_instancemethod(_pymaxwell5.CmaxwellMxi_updatePreview, None, CmaxwellMxi)
CmaxwellMxi.updateLightInPreview = new_instancemethod(_pymaxwell5.CmaxwellMxi_updateLightInPreview, None, CmaxwellMxi)
CmaxwellMxi.updateAllLightsInPreview = new_instancemethod(_pymaxwell5.CmaxwellMxi_updateAllLightsInPreview, None, CmaxwellMxi)
CmaxwellMxi.getRenderPreviewResolution = new_instancemethod(_pymaxwell5.CmaxwellMxi_getRenderPreviewResolution, None, CmaxwellMxi)
CmaxwellMxi.getRenderPreviewBuffer = new_instancemethod(_pymaxwell5.CmaxwellMxi_getRenderPreviewBuffer, None, CmaxwellMxi)
CmaxwellMxi.isMerged = new_instancemethod(_pymaxwell5.CmaxwellMxi_isMerged, None, CmaxwellMxi)
CmaxwellMxi.getRenderIdCpus = new_instancemethod(_pymaxwell5.CmaxwellMxi_getRenderIdCpus, None, CmaxwellMxi)
CmaxwellMxi.mergeMxis = new_instancemethod(_pymaxwell5.CmaxwellMxi_mergeMxis, None, CmaxwellMxi)
CmaxwellMxi.getSaveEmbedded = new_instancemethod(_pymaxwell5.CmaxwellMxi_getSaveEmbedded, None, CmaxwellMxi)
CmaxwellMxi.setSaveEmbedded = new_instancemethod(_pymaxwell5.CmaxwellMxi_setSaveEmbedded, None, CmaxwellMxi)
CmaxwellMxi.setMetadata = new_instancemethod(_pymaxwell5.CmaxwellMxi_setMetadata, None, CmaxwellMxi)
CmaxwellMxi_swigregister = _pymaxwell5.CmaxwellMxi_swigregister
CmaxwellMxi_swigregister(CmaxwellMxi)

def CmaxwellMxi_getEmixerVersion():
    """
    Method:      getEmixerVersion() -> version
    Description: Returns the emixer version file used in this version of the SDK
    """
    return _pymaxwell5.CmaxwellMxi_getEmixerVersion()

class CmaxwellMxiAdvanced(CmaxwellMxi):
    """Proxy of C++ CmaxwellMxiAdvanced class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CmaxwellMxiAdvanced self) -> CmaxwellMxiAdvanced"""
        _pymaxwell5.CmaxwellMxiAdvanced_swiginit(self, _pymaxwell5.new_CmaxwellMxiAdvanced())
    __swig_destroy__ = _pymaxwell5.delete_CmaxwellMxiAdvanced

    def getLightSpectralCount(self):
        """
        Method:      getLightSpectralCount() -> int
        Description: Available spectral lights.
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getLightSpectralCount(self)


    def getLightSpectralNames(self):
        """
        Method:      getLightSpectralNames() -> [str]
        Description: Available spectral lights names.
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getLightSpectralNames(self)


    def getLightXYZCount(self):
        """
        Method:      getLightSpectralCount() -> int
        Description: Available spectral lights.
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getLightXYZCount(self)


    def getLightXYZNames(self):
        """
        Method:      getLightXYZNames() -> [str]
        Description: Available XYZ lights names.
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getLightXYZNames(self)


    def getRenderSpectralCoefficients(self):
        """
        Method:      getLightXYZNames() -> [str]
        Description: Available XYZ lights names.
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getRenderSpectralCoefficients(self)


    def getLightSpectralCoefficients(self, lightIndex):
        """
        Method:      getLightXYZNames() -> [str]
        Description: Available XYZ lights names.
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getLightSpectralCoefficients(self, lightIndex)


    def getRenderPowerAtWavelength(self, wavelength):
        """
        Method:      getLightXYZNames() -> [str]
        Description: Available XYZ lights names.
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getRenderPowerAtWavelength(self, wavelength)


    def getRenderPowerAtWavelengths(self, *args):
        """
        Method:      getLightXYZNames() -> [str]
        Description: Available XYZ lights names.
        Method:      getLightXYZNames() -> [str]
        Description: Available XYZ lights names.
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getRenderPowerAtWavelengths(self, *args)


    def getLightPowerAtWavelength(self, lightIndex, wavelength):
        """
        Method:      getLightXYZNames() -> [str]
        Description: Available XYZ lights names.
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getLightPowerAtWavelength(self, lightIndex, wavelength)


    def getLightPowerAtWavelengths(self, *args):
        """
        Method:      getLightXYZNames() -> [str]
        Description: Available XYZ lights names.
        Method:      getLightXYZNames() -> [str]
        Description: Available XYZ lights names.
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getLightPowerAtWavelengths(self, *args)


    def getRenderXYZ(self):
        """
        Method:      getRenderXYZ() -> (image,ok)
        Description: Requests the XYZ render buffer. It combines all lights if
                     there is multilight data.Output:      image -> numpy array.
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getRenderXYZ(self)


    def getLightXYZ(self, lightIndex):
        """
        Method:      getLightXYZ( lightIndex ) -> (image,ok)
        Description: Requests the light XYZ  buffer of index iLight.
        Output:      image -> numpy array. shape is (width,height,3)
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getLightXYZ(self, lightIndex)


    def getSamples(self, *args):
        """
        Method:      getSamples() -> int
        Description: Returns the number of samples added to the pixel. If x or y is
                     out of range, returns -1.
        Method:      getSamples() -> array
        Description: Returns the samples buffer of the image. It contains the amount
                     of samples obtained per pixel.
        Output:      array -> numpy array. shape is (width,height).
        """
        return _pymaxwell5.CmaxwellMxiAdvanced_getSamples(self, *args)

CmaxwellMxiAdvanced.getLightSpectralCount = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getLightSpectralCount, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced.getLightSpectralNames = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getLightSpectralNames, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced.getLightXYZCount = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getLightXYZCount, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced.getLightXYZNames = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getLightXYZNames, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced.getRenderSpectralCoefficients = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getRenderSpectralCoefficients, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced.getLightSpectralCoefficients = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getLightSpectralCoefficients, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced.getRenderPowerAtWavelength = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getRenderPowerAtWavelength, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced.getRenderPowerAtWavelengths = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getRenderPowerAtWavelengths, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced.getLightPowerAtWavelength = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getLightPowerAtWavelength, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced.getLightPowerAtWavelengths = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getLightPowerAtWavelengths, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced.getRenderXYZ = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getRenderXYZ, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced.getLightXYZ = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getLightXYZ, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced.getSamples = new_instancemethod(_pymaxwell5.CmaxwellMxiAdvanced_getSamples, None, CmaxwellMxiAdvanced)
CmaxwellMxiAdvanced_swigregister = _pymaxwell5.CmaxwellMxiAdvanced_swigregister
CmaxwellMxiAdvanced_swigregister(CmaxwellMxiAdvanced)

class SpectrumPixel(object):
    """Proxy of C++ SpectrumPixel class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SpectrumPixel self) -> SpectrumPixel"""
        _pymaxwell5.SpectrumPixel_swiginit(self, _pymaxwell5.new_SpectrumPixel())
    __swig_destroy__ = _pymaxwell5.delete_SpectrumPixel

    def toRGB(self, rgb):
        """toRGB(SpectrumPixel self, Crgb rgb)"""
        return _pymaxwell5.SpectrumPixel_toRGB(self, rgb)


    def toXYZ(self, xyz):
        """toXYZ(SpectrumPixel self, Cxyz xyz)"""
        return _pymaxwell5.SpectrumPixel_toXYZ(self, xyz)


    def data(self):
        """data(SpectrumPixel self) -> PyObject *"""
        return _pymaxwell5.SpectrumPixel_data(self)

SpectrumPixel.toRGB = new_instancemethod(_pymaxwell5.SpectrumPixel_toRGB, None, SpectrumPixel)
SpectrumPixel.toXYZ = new_instancemethod(_pymaxwell5.SpectrumPixel_toXYZ, None, SpectrumPixel)
SpectrumPixel.data = new_instancemethod(_pymaxwell5.SpectrumPixel_data, None, SpectrumPixel)
SpectrumPixel_swigregister = _pymaxwell5.SpectrumPixel_swigregister
SpectrumPixel_swigregister(SpectrumPixel)

class SpectralImage(object):
    """Proxy of C++ SpectralImage class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SpectralImage self) -> SpectralImage"""
        _pymaxwell5.SpectralImage_swiginit(self, _pymaxwell5.new_SpectralImage())
    __swig_destroy__ = _pymaxwell5.delete_SpectralImage

    def clear(self):
        """clear(SpectralImage self)"""
        return _pymaxwell5.SpectralImage_clear(self)


    def create(self, w, h):
        """create(SpectralImage self, unsigned int w, unsigned int h)"""
        return _pymaxwell5.SpectralImage_create(self, w, h)


    def getHeight(self):
        """getHeight(SpectralImage self) -> unsigned int"""
        return _pymaxwell5.SpectralImage_getHeight(self)


    def getWidth(self):
        """getWidth(SpectralImage self) -> unsigned int"""
        return _pymaxwell5.SpectralImage_getWidth(self)


    def getPixel(self, x, y):
        """getPixel(SpectralImage self, unsigned int const x, unsigned int const y) -> SpectrumPixel"""
        return _pymaxwell5.SpectralImage_getPixel(self, x, y)


    def toRGB(self, x, y):
        """toRGB(SpectralImage self, unsigned int const x, unsigned int const y) -> Crgb"""
        return _pymaxwell5.SpectralImage_toRGB(self, x, y)


    def toXYZ(self, x, y):
        """toXYZ(SpectralImage self, unsigned int const x, unsigned int const y) -> Cxyz"""
        return _pymaxwell5.SpectralImage_toXYZ(self, x, y)

    m_width = _swig_property(_pymaxwell5.SpectralImage_m_width_get, _pymaxwell5.SpectralImage_m_width_set)
    m_height = _swig_property(_pymaxwell5.SpectralImage_m_height_get, _pymaxwell5.SpectralImage_m_height_set)

    def data(self):
        """data(SpectralImage self) -> PyObject *"""
        return _pymaxwell5.SpectralImage_data(self)

SpectralImage.clear = new_instancemethod(_pymaxwell5.SpectralImage_clear, None, SpectralImage)
SpectralImage.create = new_instancemethod(_pymaxwell5.SpectralImage_create, None, SpectralImage)
SpectralImage.getHeight = new_instancemethod(_pymaxwell5.SpectralImage_getHeight, None, SpectralImage)
SpectralImage.getWidth = new_instancemethod(_pymaxwell5.SpectralImage_getWidth, None, SpectralImage)
SpectralImage.getPixel = new_instancemethod(_pymaxwell5.SpectralImage_getPixel, None, SpectralImage)
SpectralImage.toRGB = new_instancemethod(_pymaxwell5.SpectralImage_toRGB, None, SpectralImage)
SpectralImage.toXYZ = new_instancemethod(_pymaxwell5.SpectralImage_toXYZ, None, SpectralImage)
SpectralImage.data = new_instancemethod(_pymaxwell5.SpectralImage_data, None, SpectralImage)
SpectralImage_swigregister = _pymaxwell5.SpectralImage_swigregister
SpectralImage_swigregister(SpectralImage)

mwcallback_cb = _pymaxwell5.mwcallback_cb

def mwcallback(type, pMethod, pError, pValue):
    """mwcallback(byte type, char const * pMethod, char const * pError, void const * pValue) -> byte"""
    return _pymaxwell5.mwcallback(type, pMethod, pError, pValue)
class Cmaxwell(object):
    """
    Class Cmaxwell

      Contains the maxwell scene.

      Example code:

        scene = Cmaxwell(mwcallback_cb);
        scene.readMXS('myscene.mxs');
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CALLBACK_WARNING = _pymaxwell5.Cmaxwell_CALLBACK_WARNING
    CALLBACK_ERROR = _pymaxwell5.Cmaxwell_CALLBACK_ERROR
    CALLBACK_WRITE_USER_DATA = _pymaxwell5.Cmaxwell_CALLBACK_WRITE_USER_DATA
    CALLBACK_READ_USER_DATA = _pymaxwell5.Cmaxwell_CALLBACK_READ_USER_DATA
    ALL_CLEAN = _pymaxwell5.Cmaxwell_ALL_CLEAN
    CAMERA_DIRTY = _pymaxwell5.Cmaxwell_CAMERA_DIRTY
    MATERIAL_DIRTY = _pymaxwell5.Cmaxwell_MATERIAL_DIRTY
    MATERIAL_ASSIGNMENTS_DIRTY = _pymaxwell5.Cmaxwell_MATERIAL_ASSIGNMENTS_DIRTY
    GEOMETRY_DIRTY = _pymaxwell5.Cmaxwell_GEOMETRY_DIRTY
    VOXELIZATION_DIRTY = _pymaxwell5.Cmaxwell_VOXELIZATION_DIRTY
    SKY_OR_HDR_DIRTY = _pymaxwell5.Cmaxwell_SKY_OR_HDR_DIRTY
    DEFAULT_OR_OVERRIDE_MATERIAL_DIRTY = _pymaxwell5.Cmaxwell_DEFAULT_OR_OVERRIDE_MATERIAL_DIRTY
    ALL_DIRTY = _pymaxwell5.Cmaxwell_ALL_DIRTY
    _interactiveFlags = _swig_property(_pymaxwell5.Cmaxwell__interactiveFlags_get, _pymaxwell5.Cmaxwell__interactiveFlags_set)

    def __init__(self, pCallBack):
        """
        Description: Maxwell scene constructor
        Example code:

          scene = Cmaxwell(mwcallback_cb);
          help(scene); #help(Cmaxwell);
          # mwcallback_cb is supplied by the Maxwell Python module
          # User don't needs to define it.
        """
        if self.__class__ == Cmaxwell:
            _self = None
        else:
            _self = self
        _pymaxwell5.Cmaxwell_swiginit(self, _pymaxwell5.new_Cmaxwell(_self, pCallBack))
    __swig_destroy__ = _pymaxwell5.delete_Cmaxwell
    getEngineVersion = staticmethod(_pymaxwell5.Cmaxwell_getEngineVersion)
    getSdkVersionString = staticmethod(_pymaxwell5.Cmaxwell_getSdkVersionString)
    getSdkVersion = staticmethod(_pymaxwell5.Cmaxwell_getSdkVersion)

    def getMxsVersion(self):
        """
        Method:      getMxsVersion() -> float
        Description : Returns the version number of the current MXS file loaded.
        """
        return _pymaxwell5.Cmaxwell_getMxsVersion(self)


    def getEngineVersionSaved(self):
        """
        Method:      getEngineVersionSaved() -> str
        Description : Returns the version number of Maxwell Render used to save the MXS file.
        """
        return _pymaxwell5.Cmaxwell_getEngineVersionSaved(self)


    def getMostRecentVersionMXS(self):
        """
        Method:      getMostRecentVersionMXS() -> float
        Description: Returns the highest version of MXS files that can be read with this SDK.
        """
        return _pymaxwell5.Cmaxwell_getMostRecentVersionMXS(self)

    isDepthSupportedForThisFormat = staticmethod(_pymaxwell5.Cmaxwell_isDepthSupportedForThisFormat)
    getHighestDepthSupportedForThisFormat = staticmethod(_pymaxwell5.Cmaxwell_getHighestDepthSupportedForThisFormat)
    isEmbeddingAlphaSupportedForThisFormat = staticmethod(_pymaxwell5.Cmaxwell_isEmbeddingAlphaSupportedForThisFormat)
    isEmbeddingAllChannelsSupportedForThisFormat = staticmethod(_pymaxwell5.Cmaxwell_isEmbeddingAllChannelsSupportedForThisFormat)
    isTextureExtensionSupported = staticmethod(_pymaxwell5.Cmaxwell_isTextureExtensionSupported)

    def getPluginID(self):
        """
        Method:      getPluginID() - > string
        Description: Gets the plugin identifier (string stored in the scene file to know which
                     exporter has generated the MXS file).

        """
        return _pymaxwell5.Cmaxwell_getPluginID(self)


    def setPluginID(self, pID):
        """
        Method:      setPluginID( string )
        Description: Sets the plugin identifier (string stored in the scene file to know which
                     exporter has generated the MXS file).

        """
        return _pymaxwell5.Cmaxwell_setPluginID(self, pID)


    def isProtectionEnabled(self):
        """
        Method:      isProtectionEnabled() -> bool
        Description: Checks whether the ability to export to other formats in Studio is enabled
                     (protection is enabled by default).
        """
        return _pymaxwell5.Cmaxwell_isProtectionEnabled(self)


    def enableProtection(self, enable):
        """
        Method:      enableProtection( bool )
        Description: Enables/Disables the ability to export to other formats in Studio (protection
                     is enabled by default).
        """
        return _pymaxwell5.Cmaxwell_enableProtection(self, enable)


    def freeGeometry(self):
        """freeGeometry(Cmaxwell self)"""
        return _pymaxwell5.Cmaxwell_freeGeometry(self)


    def freeScene(self):
        """freeScene(Cmaxwell self)"""
        return _pymaxwell5.Cmaxwell_freeScene(self)


    def getScenePreview(self):
        """
        Method:      getScenePreview() -> (image,ok)
        Description: Preview image of the scene stored in the file (useful for thums).
        Parameter:   image -> numpy ubyte array. shape is (width,height,3).
        """
        return _pymaxwell5.Cmaxwell_getScenePreview(self)


    def setScenePreview(self, preview):
        """
        Method:      setScenePreview( image ) -> bool
        Description: Sets preview image of the scene stored in the file (useful for thums).
        Parameter:   image -> numpy ubyte array. shape is (width,height,3).
        """
        return _pymaxwell5.Cmaxwell_setScenePreview(self, preview)


    def readPreview(self, pPath):
        """
        Method:      readPreview( filename ) -> image
        Description: Preview image of the scene stored in the file (useful for thums).
        Parameter:   image -> numpy ubyte array. shape is (width,height,3).
        """
        return _pymaxwell5.Cmaxwell_readPreview(self, pPath)


    def setAxisConversion(self, pInput):
        """
        Method:      setAxisConversion( type ) -> 1 = Success, 0 = Fail
        Description: Get the axis orientation of the scene.
        Parameter:   type = 'YZXRH', 'ZXYLH', 'YXZLH' or 'YZXLH'.
                     Plug-in names can be used as well:
                      'YZXRH' -> 'MAXWELL', 'MAYA', 'XSI', 'HOUDINI', 'RHINO', 'SOLIDWORKS'
                      'ZXYLH' -> 'FORMZ', '3DSMAX'
                      'YXZLH' -> 'CINEMA'
                      'YZXLH' -> 'LIGHTWAVE'.
        """
        return _pymaxwell5.Cmaxwell_setAxisConversion(self, pInput)


    def getAxisConversion(self, *args):
        """
        Method:      getAxisConversion() -> (type,base)
        Description: Get the axis orientation of the scene.
        Return:      type -> 'YZXRH', 'ZXYLH', 'YXZLH' or 'YZXLH'.
                     base -> axis conversion, filled with the axis change matrix used in
                      MXParamList.setFloatArrayn and MXParamList.setDoubleArray
        Method:      getAxisConversion() -> (type,base)
        Description: Get the axis orientation of the scene.
        Return:      type -> 'YZXRH', 'ZXYLH', 'YXZLH' or 'YZXLH'.
                     base -> axis conversion, filled with the axis change matrix used in
                      MXParamList.setFloatArrayn and MXParamList.setDoubleArray
        """
        return _pymaxwell5.Cmaxwell_getAxisConversion(self, *args)


    def setSinglePrecisionOfGeometry(self):
        """
        Method:      setSinglePrecisionOfGeometry()
        Description: Uses floats instead doubles for geometry.
        """
        return _pymaxwell5.Cmaxwell_setSinglePrecisionOfGeometry(self)


    def setSceneUserData(self):
        """setSceneUserData(Cmaxwell self) -> byte"""
        return _pymaxwell5.Cmaxwell_setSceneUserData(self)


    def getObject(self, pObjectName):
        """
        Method:      getObject( name ) -> CmaxwellObject [reference]
        Description: Returns the CmaxwellObject with the given name or a null object
                     if there is not an object with that name.
        """
        return _pymaxwell5.Cmaxwell_getObject(self, pObjectName)


    def createMesh(self, pName, nVertexes, nNormals, nTriangles, nPositionsPerVertex):
        """
        Method:      createMesh( name, nVertexes, nNormals,
                                 nTriangles, nPositionsPerVertex )
                     -> CmaxwellObject [reference]
        Description: Creates a mesh with the given parameters and adds it to the scene. If nVertex,
                     nNormals and nTriangles are equal to 0, a null object is created.
                     nPositionsPerVertex sets the number of deformation motion blur substeps
                    (1 or 2, 1 means no deformation blur)
        """
        return _pymaxwell5.Cmaxwell_createMesh(self, pName, nVertexes, nNormals, nTriangles, nPositionsPerVertex)


    def createNullObject(self, name):
        """
        Method:      createNullObject( name ) -> CmaxwellObject [reference]
        Description: Convenience function to create NULL objects.
        """
        return _pymaxwell5.Cmaxwell_createNullObject(self, name)


    def createInstancement(self, pName, object):
        """
        Method:      createInstancement( name, object ) -> CmaxwellObject [reference]
        Description: Creates an instance of 'object'. 'object' must be a mesh. Returns the
                     instance created.
        """
        return _pymaxwell5.Cmaxwell_createInstancement(self, pName, object)


    def createReferencedObject(self, name, path):
        """
        Method:      createReferencedObject( name, mxsPath ) -> CmaxwellObject [reference]
        Description: Creates a MXS referenced object that points to the given MXS path.
        """
        return _pymaxwell5.Cmaxwell_createReferencedObject(self, name, path)


    def addObject(self, object):
        """
        Method:      addObject( CmaxwellObject ) -> CmaxwellObject [reference]
        Description: Adds an existent object into the scene. It is useful for instance for
                     importing objects from one scene to other.
        """
        return _pymaxwell5.Cmaxwell_addObject(self, object)


    def mergeMeshes(self, name, meshes):
        """
        Method:      mergeMeshes( targetObjectName, CmaxwellObject[] meshes )
                     -> CmaxwellObject [reference], 0 = Fail
        Description: Merges an array of meshes into a single mesh The original meshes are not
                     removed (it can be done later calling CmaxwellOobject.free() ).
                     Note: the target object 'targetObjectName' must not be one of the objects
                     included in 'meshes'. In that case the script will crash.
        """
        return _pymaxwell5.Cmaxwell_mergeMeshes(self, name, meshes)


    def addCamera(self, *args):
        """
        Method:      addCamera( name, nSteps, shutter, filmWidth, filmHeight, iso, diaphragmType,
                                angle, nBlades, fps, xRes, yRes, pixelAspect, lensType = TYPE_THIN_LENS,
                     -> CmaxwellCamera [reference]
        Description: Adds a new camera to the scene with the given parameters
        Parameter:   lensType = TYPE_THIN_LENS (default), TYPE_PINHOLE_LENS, TYPE_ORTHO_LENS,
                     TYPE_FISHEYE_LENS, TYPE_SPHERICAL_LENS, TYPE_CYLINDRICAL_LENS.
        Method:      addCamera( name, nSteps, shutter, filmWidth, filmHeight, iso, diaphragmType,
                                angle, nBlades, fps, xRes, yRes, pixelAspect, lensType = TYPE_THIN_LENS,
                     -> CmaxwellCamera [reference]
        Description: Adds a new camera to the scene with the given parameters
        Parameter:   lensType = TYPE_THIN_LENS (default), TYPE_PINHOLE_LENS, TYPE_ORTHO_LENS,
                     TYPE_FISHEYE_LENS, TYPE_SPHERICAL_LENS, TYPE_CYLINDRICAL_LENS.
        """
        return _pymaxwell5.Cmaxwell_addCamera(self, *args)


    def getCamera(self, pCameraName):
        """
        Method:      getCamera( name ) -> CmaxwellCamera [reference]
        Description: Given the name of a camera this function returns its CmaxwellCamera reference.
        """
        return _pymaxwell5.Cmaxwell_getCamera(self, pCameraName)


    def getActiveCamera(self):
        """
        Method:      getActiveCamera() -> CmaxwellCamera [reference]
        Description: Returns a reference to the active camera of the scene.
        """
        return _pymaxwell5.Cmaxwell_getActiveCamera(self)


    def setPath(self, ch, pPath, outputBitDepthMode):
        """
        Method:      setPath( type, path, outputBitDepthMode ) -> (outputBitDepthMode,ok)
        Description: Sets the path and depth for the given channel.
        Parameter:   ch = channel selected. Example: FLAG_ALPHA.
        Parameter:   path = Output path of the channel.
        Parameter:   outputBitDepthMode = [BITDEPTH_8|BITDEPTH_16|BITDEPTH_32].
                     If the depth is not correct for the given format the engine tries to change
                     outputBitDepthMode. i.e setPath( "image.jpg", BITDEPTH_32 ) is not correct because jpg
                     does not support 32 bits so the engine will change it to 8. Check the online
                     documentation to get more info about supported image formats.
        """
        return _pymaxwell5.Cmaxwell_setPath(self, ch, pPath, outputBitDepthMode)


    def getPath(self, ch):
        """
        Method:      getPath( type ) -> (path,outputBitDepthMode)
        Description: Gets the path and depth for the given channel.
        Parameter:   ch = channel selected. Example: FLAG_ALPHA.
                      ('BITMAPS' is deprecated, use addSearchingPath() instead ).
        Parameter:   path = Output path of the channel.
        Parameter:   outputBitDepthMode = [BITDEPTH_8|BITDEPTH_16|BITDEPTH_32].
                     If the depth is not correct for the given format the engine tries to change
                     outputBitDepthMode. i.e setPath('image.jpg', BITDEPTH_32 ) is not correct because jpg
                     does not support 32 bits so the engine will change it to 8. Check the manual to
                     get more info about supported image formats.
        """
        return _pymaxwell5.Cmaxwell_getPath(self, ch)


    def setPaths(self, path, outputBitDepthMode):
        """
        Method:      setPaths( path, outputBitDepthMode ) -> 1 = Success, 0 = Fail
        Description: Sets all channel paths based on a base path.
        Parameter:   path = Output path of the channels.
        Parameter:   outputBitDepthMode = Bits depth per pixel (8/16/32).
                     If the depth is not correct for the given format the engine tries to change
                     outputBitDepthMode.
        """
        return _pymaxwell5.Cmaxwell_setPaths(self, path, outputBitDepthMode)


    def addSearchingPath(self, pPath):
        """
        Method:      addSearchingPath( path ) -> 1 = Succeed, 0 = Fail
        Description: Adds a path to look for missing textures, ior and ies files.
        """
        return _pymaxwell5.Cmaxwell_addSearchingPath(self, pPath)


    def getSearchingPaths(self):
        """
        Method:      getSearchingPaths() -> (list,ok)
        Description: Returns a list of strings with all searching paths of the scene (textures, ior
                     files, hdr files, ies etc).
        """
        return _pymaxwell5.Cmaxwell_getSearchingPaths(self)


    def getChannelUserSuffix(self, ch):
        """
        Method:      getChannelUserSuffix(ch) -> str
        Description: Gets channel name set by user. See CmaxwellMxi.getChannelSuffix.
        Parameter:   ch = channel. Example: FLAG_ALPHA.
        """
        return _pymaxwell5.Cmaxwell_getChannelUserSuffix(self, ch)


    def setChannelUserSuffix(self, ch, suffix, enabled=True):
        """
        Method:      setChannelUserSuffix(ch,suffix,enabled=True)
        Description: Sets user channel name.
        Parameter:   ch = channel. Example: FLAG_ALPHA.
        Parameter:   suffix = string containing the new user name for the channel set by ch.
        Parameter:   enabled = sets the suffix enabled/disabled for the channel. If the user suffix
                     is disabled, output filename for the channel will use the default channel name.
        Method:      setChannelUserSuffix(ch,suffix,enabled=True)
        Description: Sets user channel name.
        Parameter:   ch = channel. Example: FLAG_ALPHA.
        Parameter:   suffix = string containing the new user name for the channel set by ch.
        Parameter:   enabled = sets the suffix enabled/disabled for the channel. If the user suffix
                     is disabled, output filename for the channel will use the default channel name.
        """
        return _pymaxwell5.Cmaxwell_setChannelUserSuffix(self, ch, suffix, enabled)


    def isChannelUserSuffixEnabled(self, ch):
        """
        Method:      isChannelUserSuffixEnabled(ch) -> bool
        Description: Gets whether the user suffix is enabled for the channel selected.
        Parameter:   ch = channel. Example: FLAG_ALPHA.

        """
        return _pymaxwell5.Cmaxwell_isChannelUserSuffixEnabled(self, ch)


    def enableChannelUserSuffix(self, ch, enable):
        """
        Method:      enableChannelUserSuffix(ch,enable)
        Description: Sets user channel name enabled.
        Parameter:   ch = channel. Example: FLAG_ALPHA.
        Parameter:   enable = sets the suffix enabled/disabled for the channel. If the user suffix
                     is disabled, output filename for the channel will use the default channel name.
        """
        return _pymaxwell5.Cmaxwell_enableChannelUserSuffix(self, ch, enable)


    def getChannelSuffixActive(self, ch):
        """
        Method:      getChannelSuffixActive(ch) -> str
        Description: Returns the user suffix if it is active, and the default suffix if not.
        Parameter:   ch = channel. Example: FLAG_ALPHA.

        """
        return _pymaxwell5.Cmaxwell_getChannelSuffixActive(self, ch)


    def getEnvironment(self):
        """
        Method:      getEnvironment() -> CmaxwellEnvironment [reference]
        Description: RReturns a reference to the environment data of the scene.
        """
        return _pymaxwell5.Cmaxwell_getEnvironment(self)


    def readMaterial(self, pFileName):
        """
        Method:      readMaterial( filename ) -> CmaxwellMaterial
        Description: Reads a material from disk.
        """
        return _pymaxwell5.Cmaxwell_readMaterial(self, pFileName)


    def createMaterial(self, pMaterialName, addToScene=True):
        """
        Method:      createMaterial( name, addToScene = True ) -> CmaxwellMaterial [reference]
        Description: Creates a material with the given name and adds it to the scene if the flag
                     addToScene is True (default).
        Method:      createMaterial( name, addToScene = True ) -> CmaxwellMaterial [reference]
        Description: Creates a material with the given name and adds it to the scene if the flag
                     addToScene is True (default).
        """
        return _pymaxwell5.Cmaxwell_createMaterial(self, pMaterialName, addToScene)


    def getMaterial(self, pMaterialName):
        """
        Method:      getMaterial( name ) -> CmaxwellMaterial [reference]
        Description: Given the name of a material, returns its CmaxwellMaterial reference.
        """
        return _pymaxwell5.Cmaxwell_getMaterial(self, pMaterialName)


    def addMaterial(self, material):
        """
        Method:      addMaterial( CmaxwellMaterial ) -> CmaxwellMaterial [reference]
        Description: Adds a material to the scene and returns a reference to the added material.
        """
        return _pymaxwell5.Cmaxwell_addMaterial(self, material)


    def eraseUnusedMaterials(self):
        """
        Method:      eraseUnusedMaterials() -> 1 = Success, 0 = Fail
        Description: Removes unused materials from the scene.
        """
        return _pymaxwell5.Cmaxwell_eraseUnusedMaterials(self)


    def getOverrideMaterial(self):
        """
        Method:      getOverrideMaterial() -> name
        Description: Gets the material that overrides all the materials of the scene (except
                     emitter materials).
        """
        return _pymaxwell5.Cmaxwell_getOverrideMaterial(self)


    def getOverrideMaterialEnabled(self):
        """
        Method:      getOverrideMaterialEnabled() -> bool
        Description: Checks whether the override material is enabled.
        """
        return _pymaxwell5.Cmaxwell_getOverrideMaterialEnabled(self)


    def setOverrideMaterial(self, *args):
        """
        Method:      setOverrideMaterial( name )
        Description: Sets the material that overrides all the materials of the scene (except
                     emitter materials).
        Method:      setOverrideMaterial( bool )
        Description: Sets the override material on/off.
        """
        return _pymaxwell5.Cmaxwell_setOverrideMaterial(self, *args)


    def setShadowedMaterial(self, enabled):
        """
        Method:      setShadowedMaterial( bool )
        Description: Sets shadows in non-emitter materials enabled/disabled.
        """
        return _pymaxwell5.Cmaxwell_setShadowedMaterial(self, enabled)


    def getDefaultMaterial(self):
        """
        Method:      getDefaultMaterial() -> path
        Description: Gets the path of the material that will be used for all the objects/triangles
                     without material.
        """
        return _pymaxwell5.Cmaxwell_getDefaultMaterial(self)


    def getDefaultMaterialEnabled(self):
        """
        Method:      getDefaultMaterialEnabled() -> bool
        Description: Checks whether the default material is enabled
        """
        return _pymaxwell5.Cmaxwell_getDefaultMaterialEnabled(self)


    def setDefaultMaterial(self, *args):
        """
        Method:      setDefaultMaterial( path )
        Description: Sets the path of the material that will be used for all the objects/triangles
                     without material
        Method:      setDefaultMaterial( bool )
        Description: Sets the default material on/off
        """
        return _pymaxwell5.Cmaxwell_setDefaultMaterial(self, *args)


    def enableChannel(self, ch, enable):
        """
        Method:      setDefaultMaterial( bool )
        Description: Sets the default material on/off
        """
        return _pymaxwell5.Cmaxwell_enableChannel(self, ch, enable)


    def isChannelEnabled(self, ch):
        """
        Method:      setDefaultMaterial( bool )
        Description: Sets the default material on/off
        """
        return _pymaxwell5.Cmaxwell_isChannelEnabled(self, ch)


    def getRenderParameter(self, pParameterName):
        """
        Method:      getRenderParameter( parameterName ) -> (value,ok)
        Description: Gets the value of the render parameter given by parameterName. Allowed render
                     parameters and its values are:
                     'ENGINE': 'RS0', 'RS1' or 'RSC'
                     'NUM THREADS': [-1024,1024]
                                    0: autodetect
                                    -N: all available minus N
                     'STOP TIME': [1,50000] (in seconds)
                     'SAMPLING LEVEL: [0.0,50.0]'
                     'USE MULTILIGHT': 0 = No multilight
                                       1 = Intensity multilight
                                       2 = Color multilight
                                       3 = Spectrum multilight
                     'SAVE LIGHTS IN SEPARATE FILES': (0 or 1)
                     'MXI FULLNAME': String that specifies the MXI path
                     'MXS FULLNAME': String that specifies the MXS path
                     'DO NOT SAVE MXI FILE': (0 or 1)
                     'DO NOT SAVE MXS FILE': (0 or 1)
                     'DO NOT SAVE IMAGE FILE': (0 or 1)
                     'RENAME AFTER SAVING': (0 or 1)
                     'COPY MXI AFTER RENDER': String that specifies the MXI path where output will be copied
                     'COPY IMAGE AFTER RENDER': String that specifies the image path where output will be copied
                     'COPY MXS AFTER RENDER': String that specifies the MXS path where output will be copied
                     'REMOVE FILES AFTER COPY': ,(0 or 1)
                     'DO MOTION BLUR': (0 or 1)
                     'DO DISPLACEMENT': (0 or 1)
                     'DO DISPERSION': (0 or 1)
                     'RENDER LAYERS': 0 = RENDER_LAYER_ALL (all layers)
                                      1 = RENDER_LAYER_DIFFUSE (diffuse)
                                      2 = RENDER_LAYER_REFLECTIONS (reflections)
                                      3 = RENDER_LAYER_REFRACTIONS (refractions)
                                      4 = RENDER_LAYER_DIFFUSE_AND_REFLECTIONS (diffuse and reflections)
                                      5 = RENDER_LAYER_REFLECTIONS_AND_REFRACTIONS (reflections and refractions)
                     'DO DIRECT LAYER': (0 or 1)
                     'DO INDIRECT LAYER': (0 or 1)
                     'DO DIRECT REFLECTION CAUSTIC LAYER': (0 or 1)
                     'DO INDIRECT REFLECTION CAUSTIC LAYER': (0 or 1)
                     'DO DIRECT REFRACTION CAUSTIC LAYER': (0 or 1)
                     'DO INDIRECT REFRACTION CAUSTIC LAYER': (0 or 1)
                     'DO RENDER CHANNEL': (0 or 1)
                     'DO ALPHA CHANNEL': (0 or 1)
                     'OPAQUE ALPHA': (0 or 1)
                     'EMBED CHANNELS': (0 or 1) -> 0 = Separate (default); 1 = Embedded
                     'DO IDOBJECT CHANNEL': (0 or 1)
                     'DO IDTRIANGLE CHANNEL': (0 or 1)
                     'DO IDMATERIAL CHANNEL': (0 or 1)
                     'DO SHADOW PASS CHANNEL': (0 or 1)
                     'DO MOTION CHANNEL': (0 or 1)
                     'DO ROUGHNESS CHANNEL': (0 or 1)
                     'DO FRESNEL CHANNEL': (0 or 1)
                     'DO NORMALS CHANNEL': (0 or 1)
                     'NORMALS CHANNEL SPACE': (0 or 1) -> 0 = World (default); 1 = Camera
                     'POSITION CHANNEL SPACE': (0 or 1) -> 0 = World (default); 1 = Camera
                     'MOTION CHANNEL TYPE': (0 or 1) -> 0 = RealSmart (default); 1 = Other
                     'DO POSITION CHANNEL': (0 or 1)
                     'DO ZBUFFER CHANNEL': (0 or 1)
                     'ZBUFFER RANGE': tuple (min,max)
                     'DO DEEP CHANNEL': (0 or 1)
                     'DEEP CHANNEL TYPE': (0 or 1) -> 0 = Alpha (default); 1 = RGBA
                     'DEEP MIN DISTANCE: (float)
                     'DEEP MAX SAMPLES': >0
                     'DO UV CHANNEL': (0 or 1)
                     'DO ALPHA CUSTOM CHANNEL': (0 or 1)
                     'DO REFLECTANCE CHANNEL': (0 or 1)
                     'DO EXTRA SAMPLING': (0 or 1) -> Enable extra-sampling
                     'EXTRA SAMPLING SL': [0.0,50.0] -> The extra-sampling starts working after this SL when DO EXTRA SAMPLING is enabled
                     'EXTRA SAMPLING MASK': (0, 1, or 2) -> Extra-sampling type (0 = custom alpha, 1 = alpha, 2 = bitmap)
                     'EXTRA SAMPLING CUSTOM ALPHA': String with the name of the custom alpha selected when EXTRA SAMPLING MASK = 0
                     'EXTRA SAMPLING USER BITMAP': String with the path of the bitmap to use when EXTRA SAMPLING BITMAP = 2
                     'EXTRA SAMPLING INVERT': (0 or 1) -> inverts alpha mask for extra-sampling
                     'DO DEVIGNETTING': (0 or 1)
                     'DEVIGNETTING': [-100.0,100.0] (percent)
                     'DO SCATTERING_LENS': (0 or 1)
                     'SCATTERING_LENS': [0.0,1.0]
                     'DO SHARPNESS': (0 or 1)
                     'SHARPNESS': (float)
                     'STOP RENDER IF NO PHYSICAL MEMORY': (0 or 1)
                     'STOP RENDER IF EXTENSION ERROR': (0 or 1)
                     'DO FLOATING SHADOWS': (0 or 1)
                     'DO FLOATING REFLECTIONS': (0 or 1)
                     'DO DENOISE':                -> Denoiser: enable/disable denoiser channel.             'DENOISE INTERVAL_START':    -> Denoiser: configure the SLs at which Denoise process is going to start, 0 means only at end.             'DENOISE GPU':               -> Denoiser: enable/disable GPU denoiser (0 = disabled, 1 = enabled).             'DENOISE TILING':            -> Denoiser: enable/disable tiling (0 = disabled, 1 = enabled).             'DENOISE MAX TILE SIZE':     -> Denoiser: configure the max tile size.             'DENOISE KC1':               -> Denoiser: configure the kc1 parameter.             'DENOISE KC2':               -> Denoiser: configure the kc2 parameter.             'DENOISE KF':                -> Denoiser: configure the kf parameter.             'DENOISE KC4':               -> Denoiser: configure the kc4 parameter.             'DENOISE WINDOW RADIUS':     -> Denoiser: configure the window radius parameter.             'DENOISE FIREFLY SUPRESSOR': -> Denoiser: enable/disable firefly supressor (0 = disabled, 1 = enabled).             'DENOISE AUTOCONFIG SCENE':  -> Denoiser: set the autoconfiguration of scene (0 = disabled, 1 = fast, 2 = accurate).             'DENOISE SHADOW':            -> Denoiser: enable/disable denoise shadow channel (0 = disabled, 1 = enabled).             'MAXWELL ENGINE VERSION': (str) -> Version of Maxwell used to save scene
        """
        return _pymaxwell5.Cmaxwell_getRenderParameter(self, pParameterName)


    def setRenderParameter(self, pParameterName, pValue):
        """
        Method:      setRenderParameter( parameterName, value ) -> 1 = Success, 0 = Fail
        Description: Sets the value of the render parameter given by parameterName. Allowed render
                     parameters and its values are:
                     'ENGINE': 'RS0', 'RS1' or 'RSC'
                     'NUM THREADS': [-1024,1024]
                                    0: autodetect
                                    -N: all available minus N
                     'STOP TIME': [1,50000] (in seconds)
                     'SAMPLING LEVEL: [0.0,50.0]'
                     'USE MULTILIGHT': 0 = No multilight
                                       1 = Intensity multilight
                                       2 = Color multilight
                                       3 = Spectrum multilight
                     'SAVE LIGHTS IN SEPARATE FILES': (0 or 1)
                     'MXI FULLNAME': String that specifies the MXI path
                     'MXS FULLNAME': String that specifies the MXS path
                     'DO NOT SAVE MXI FILE': (0 or 1)
                     'DO NOT SAVE MXS FILE': (0 or 1)
                     'DO NOT SAVE IMAGE FILE': (0 or 1)
                     'RENAME AFTER SAVING': (0 or 1)
                     'COPY MXI AFTER RENDER': String that specifies the MXI path where output will be copied
                     'COPY IMAGE AFTER RENDER': String that specifies the image path where output will be copied
                     'COPY MXS AFTER RENDER': String that specifies the MXS path where output will be copied
                     'REMOVE FILES AFTER COPY': ,(0 or 1)
                     'DO MOTION BLUR': (0 or 1)
                     'DO DISPLACEMENT': (0 or 1)
                     'DO DISPERSION': (0 or 1)
                     'RENDER LAYERS': 0 = RENDER_LAYER_ALL (all layers)
                                      1 = RENDER_LAYER_DIFFUSE (diffuse)
                                      2 = RENDER_LAYER_REFLECTIONS (reflections)
                                      3 = RENDER_LAYER_REFRACTIONS (refractions)
                                      4 = RENDER_LAYER_DIFFUSE_AND_REFLECTIONS (diffuse and reflections)
                                      5 = RENDER_LAYER_REFLECTIONS_AND_REFRACTIONS (reflections and refractions)
                     'DO DIRECT LAYER': (0 or 1)
                     'DO INDIRECT LAYER': (0 or 1)
                     'DO DIRECT REFLECTION CAUSTIC LAYER': (0 or 1)
                     'DO INDIRECT REFLECTION CAUSTIC LAYER': (0 or 1)
                     'DO DIRECT REFRACTION CAUSTIC LAYER': (0 or 1)
                     'DO INDIRECT REFRACTION CAUSTIC LAYER': (0 or 1)
                     'DO RENDER CHANNEL': (0 or 1)
                     'DO ALPHA CHANNEL': (0 or 1)
                     'OPAQUE ALPHA': (0 or 1)
                     'EMBED CHANNELS': (0 or 1) -> 0 = Separate (default); 1 = Embedded
                     'DO IDOBJECT CHANNEL': (0 or 1)
                     'DO IDTRIANGLE CHANNEL': (0 or 1)
                     'DO IDMATERIAL CHANNEL': (0 or 1)
                     'DO SHADOW PASS CHANNEL': (0 or 1)
                     'DO MOTION CHANNEL': (0 or 1)
                     'DO ROUGHNESS CHANNEL': (0 or 1)
                     'DO FRESNEL CHANNEL': (0 or 1)
                     'DO NORMALS CHANNEL': (0 or 1)
                     'NORMALS CHANNEL SPACE': (0 or 1) -> 0 = World (default); 1 = Camera
                     'POSITION CHANNEL SPACE': (0 or 1) -> 0 = World (default); 1 = Camera
                     'MOTION CHANNEL TYPE': (0 or 1) -> 0 = RealSmart (default); 1 = Other
                     'DO POSITION CHANNEL': (0 or 1)
                     'DO ZBUFFER CHANNEL': (0 or 1)
                     'ZBUFFER RANGE': tuple (min,max)
                     'DO DEEP CHANNEL': (0 or 1)
                     'DEEP CHANNEL TYPE': (0 or 1) -> 0 = Alpha (default); 1 = RGBA
                     'DEEP MIN DISTANCE: (float)
                     'DEEP MAX SAMPLES': >0
                     'DO UV CHANNEL': (0 or 1)
                     'DO ALPHA CUSTOM CHANNEL': (0 or 1)
                     'DO REFLECTANCE CHANNEL': (0 or 1)
                     'DO EXTRA SAMPLING': (0 or 1) -> Enable extra-sampling
                     'EXTRA SAMPLING SL': [0.0,50.0] -> The extra-sampling starts working after this SL when DO EXTRA SAMPLING is enabled
                     'EXTRA SAMPLING MASK': (0, 1, or 2) -> Extra-sampling type (0 = custom alpha, 1 = alpha, 2 = bitmap)
                     'EXTRA SAMPLING CUSTOM ALPHA': String with the name of the custom alpha selected when EXTRA SAMPLING MASK = 0
                     'EXTRA SAMPLING USER BITMAP': String with the path of the bitmap to use when EXTRA SAMPLING BITMAP = 2
                     'EXTRA SAMPLING INVERT': (0 or 1) -> inverts alpha mask for extra-sampling
                     'DO DEVIGNETTING': (0 or 1)
                     'DEVIGNETTING': [-100.0,100.0] (percent)
                     'DO SCATTERING_LENS': (0 or 1)
                     'SCATTERING_LENS': [0.0,1.0]
                     'DO SHARPNESS': (0 or 1)
                     'SHARPNESS': (float)
                     'STOP RENDER IF NO PHYSICAL MEMORY': (0 or 1)
                     'STOP RENDER IF EXTENSION ERROR': (0 or 1)
                     'DO FLOATING SHADOWS': (0 or 1)
                     'DO FLOATING REFLECTIONS': (0 or 1)
                     'DO DENOISE':                -> Denoiser: enable/disable denoiser channel.             'DENOISE INTERVAL_START':    -> Denoiser: configure the SLs at which Denoise process is going to start, 0 means only at end.             'DENOISE GPU':               -> Denoiser: enable/disable GPU denoiser (0 = disabled, 1 = enabled).             'DENOISE TILING':            -> Denoiser: enable/disable tiling (0 = disabled, 1 = enabled).             'DENOISE MAX TILE SIZE':     -> Denoiser: configure the max tile size.             'DENOISE KC1':               -> Denoiser: configure the kc1 parameter.             'DENOISE KC2':               -> Denoiser: configure the kc2 parameter.             'DENOISE KF':                -> Denoiser: configure the kf parameter.             'DENOISE KC4':               -> Denoiser: configure the kc4 parameter.             'DENOISE WINDOW RADIUS':     -> Denoiser: configure the window radius parameter.             'DENOISE FIREFLY SUPRESSOR': -> Denoiser: enable/disable firefly supressor (0 = disabled, 1 = enabled).             'DENOISE AUTOCONFIG SCENE':  -> Denoiser: set the autoconfiguration of scene (0 = disabled, 1 = fast, 2 = accurate).             'DENOISE SHADOW':            -> Denoiser: enable/disable denoise shadow channel (0 = disabled, 1 = enabled).             'DENOISE SHADOW': (0 or 1) -> Denoise shadow channel
        """
        return _pymaxwell5.Cmaxwell_setRenderParameter(self, pParameterName, pValue)


    def getToneMapping(self):
        """
        Method:      getToneMapping() -> (monitorGamma,burn,ok)
        Description: Gets the tonemapping values.
        Parameter:   burn from 0.0 to 1.0, default = 0.8
        Parameter:   monitorGamma 0.1 to 3.5, default = 2.2
        """
        return _pymaxwell5.Cmaxwell_getToneMapping(self)


    def setToneMapping(self, monitorGamma, burn):
        """
        Method:      setToneMapping(monitorGamma,burn) -> 1 = Success, 0 = Fail
        Description: sets the tonemapping values.
        Parameter:   burn from 0.0 to 1.0, default = 0.8
        Parameter:   monitorGamma 0.1 to 3.5, default = 2.2
        """
        return _pymaxwell5.Cmaxwell_setToneMapping(self, monitorGamma, burn)


    def getActiveToneMapping(self):
        """
        Method: getActiveToneMapping() -> 'BASIC' or 'ADVANCED'

        """
        return _pymaxwell5.Cmaxwell_getActiveToneMapping(self)

    READ_ALL = _pymaxwell5.Cmaxwell_READ_ALL
    SKIP_OBJECTS = _pymaxwell5.Cmaxwell_SKIP_OBJECTS
    SKIP_MESHES = _pymaxwell5.Cmaxwell_SKIP_MESHES

    def setMxsPath(self, mxsPath):
        """
        Method :     setMxsPath( path )
        Description: Sets the path where the mxs file will be written.
        """
        return _pymaxwell5.Cmaxwell_setMxsPath(self, mxsPath)


    def getMxsPath(self):
        """
        Method :     readMXS() -> path
        Description: Gets the path where the mxs file will be written.
        """
        return _pymaxwell5.Cmaxwell_getMxsPath(self)


    def readMXS(self, *args):
        """
        Method :     readMXS( path, readOptions = READ_ALL ) -> 1 = Success, 0 = Fail
        Description: Read a MXS file from disk.
        Parameter:   readOptions -> READ_ALL, SKIP_OBJECTS, SKIP_MESHES.
        Method :     readMXS( path, readOptions = READ_ALL ) -> 1 = Success, 0 = Fail
        Description: Read a MXS file from disk.
        Parameter:   readOptions -> READ_ALL, SKIP_OBJECTS, SKIP_MESHES.
        """
        return _pymaxwell5.Cmaxwell_readMXS(self, *args)


    def readMXS_u(self, *args):
        """
        Method :     readMXS_u( path, readOptions = READ_ALL ) -> 1 = Success, 0 = Fail
        Description: Read a MXS file from disk. Try this one for paths with uncommon characters
        Parameter:   readOptions -> READ_ALL, SKIP_OBJECTS, SKIP_MESHES.
        Method :     readMXS_u( path, readOptions = READ_ALL ) -> 1 = Success, 0 = Fail
        Description: Read a MXS file from disk. Try this one for paths with uncommon characters
        Parameter:   readOptions -> READ_ALL, SKIP_OBJECTS, SKIP_MESHES.
        """
        return _pymaxwell5.Cmaxwell_readMXS_u(self, *args)


    def writeMXS(self, mxsPath=None):
        """
        Method :     writeMXS( path ) -> 1 = Success, 0 = Fail
        Description: Write the scene to a MXS file on disk.
        Parameter:   path: file path. If path is '', the path set in Cmaxwell.setMxsPath() is used.
        Method :     writeMXS( path ) -> 1 = Success, 0 = Fail
        Description: Write the scene to a MXS file on disk.
        Parameter:   path: file path. If path is '', the path set in Cmaxwell.setMxsPath() is used.
        """
        return _pymaxwell5.Cmaxwell_writeMXS(self, mxsPath)


    def writeOBJ(self, objPath):
        """
        Method :     writeOBJ( path ) -> 1 = Success, 0 = Fail
        Description: Write the scene to anOBJ file on disk.
        Parameter:   path: file path.
        """
        return _pymaxwell5.Cmaxwell_writeOBJ(self, objPath)


    def getDiffraction(self):
        """
        Method:      getDiffraction() -> (isEnabled,intensity,frequence,aperture,obstacle,ok)
        Description: Gets diffraction parameters.
        Parameter:   intensity and frequency -> from 0.0 to 1.0, default = 0.0.
        Parameter:   aperture, obstacle -> Paths to the aperture and obstacle maps.
        """
        return _pymaxwell5.Cmaxwell_getDiffraction(self)


    def setDiffraction(self, *args):
        """
        Method :     setDiffraction( intensity, frequency, aperture, obstacle )
                     -> 1 = Success, 0 = Fail
        Description: Sets diffraction parameters.
        Parameter:   intensity and frequency -> from 0.0 to 1.0, default = 0.0
        Parameter:   aperture, obstacle -> Paths to the aperture and obstacle maps.
                     obstacle is optional.
        Method :     setDiffraction( intensity, frequency, aperture, obstacle )
                     -> 1 = Success, 0 = Fail
        Description: Sets diffraction parameters.
        Parameter:   intensity and frequency -> from 0.0 to 1.0, default = 0.0
        Parameter:   aperture, obstacle -> Paths to the aperture and obstacle maps.
                     obstacle is optional.
        """
        return _pymaxwell5.Cmaxwell_setDiffraction(self, *args)


    def enableDiffraction(self):
        """
        Method:      enableDiffraction() -> 1 = Success, 0 = Fail
        Description: Enables diffraction.
        """
        return _pymaxwell5.Cmaxwell_enableDiffraction(self)


    def disableDiffraction(self):
        """
        Method:      disableDiffraction() -> 1 = Success, 0 = Fail
        Description: Disables diffraction.
        """
        return _pymaxwell5.Cmaxwell_disableDiffraction(self)

    getColorSpace = staticmethod(_pymaxwell5.Cmaxwell_getColorSpace)
    setColorSpace = staticmethod(_pymaxwell5.Cmaxwell_setColorSpace)
    getColorSpaceGamma = staticmethod(_pymaxwell5.Cmaxwell_getColorSpaceGamma)
    getWhitePoint = staticmethod(_pymaxwell5.Cmaxwell_getWhitePoint)
    setWhitePoint = staticmethod(_pymaxwell5.Cmaxwell_setWhitePoint)

    def isInteractiveModeEnabled(self):
        """isInteractiveModeEnabled(Cmaxwell self) -> bool"""
        return _pymaxwell5.Cmaxwell_isInteractiveModeEnabled(self)


    def isInteractiveFlagEnabled(self, flag):
        """isInteractiveFlagEnabled(Cmaxwell self, Cmaxwell::InteractiveFlags flag) -> bool"""
        return _pymaxwell5.Cmaxwell_isInteractiveFlagEnabled(self, flag)


    def setInteractiveFlagDirty(self, flag):
        """setInteractiveFlagDirty(Cmaxwell self, Cmaxwell::InteractiveFlags flag)"""
        return _pymaxwell5.Cmaxwell_setInteractiveFlagDirty(self, flag)


    def getLastError(self):
        """
        Method:      getLastError() -> int
        Description: Returns the latest error occurred. Useful for finding out i/o problems
                     when reading/writing MXS/MXI files. To obtain 'human readable' errors
                     use Cmaxwell.getLastErrorString().
        """
        return _pymaxwell5.Cmaxwell_getLastError(self)


    def getLastErrorString(self):
        """
        Method:      getLastErrorString() -> string
        Description: Returns an human readable string containing the latest error occurred
        """
        return _pymaxwell5.Cmaxwell_getLastErrorString(self)


    def getDependencies(self):
        """
        Method:      getDependencies() -> (list (str),ok)
        Description: Returns an array of strings with all the extern
                     dependencies of the scene (textures, ior files, hdr files, etc).
                     User must load extensions (CextensionManager.instance().loadAllExtensions())
                     before call getDependencies to be able to get dependencies of MaterialModifiers
                     extension materials.
        """
        return _pymaxwell5.Cmaxwell_getDependencies(self)


    def getOverlayTextOptions(self):
        """
        Method:      getOverlayTextOptions() -> CoverlayTextOptions
        Description: Gets the render overlay text options.
        """
        return _pymaxwell5.Cmaxwell_getOverlayTextOptions(self)


    def setOverlayTextOptions(self, overlayTextOptions):
        """
        Method:      setOverlayTextOptions( CoverlayTextOptions ) -> 1 = Success, 0 = Fail
        Description: Sets the render overlay text options.
        """
        return _pymaxwell5.Cmaxwell_setOverlayTextOptions(self, overlayTextOptions)


    def getObjectsCount(self):
        """
        Method:      getObjectsCount() -> (int,ok)
        Description: Returns the number of objects in the scene.
        """
        return _pymaxwell5.Cmaxwell_getObjectsCount(self)


    def getMaterialsCount(self):
        """
        Method:      getMaterialsCount() -> (int,ok)
        Description: Returns the number of materials in the scene.
        """
        return _pymaxwell5.Cmaxwell_getMaterialsCount(self)


    def getCamerasCount(self):
        """
        Method:      getCamerasCount() -> (int,ok)
        Description: Returns the number of cameras in the scene
        """
        return _pymaxwell5.Cmaxwell_getCamerasCount(self)


    def getSceneInfo(self):
        """
        Method:      getSceneInfo() -> (CsceneInfo,ok)
        Description: Returns a structure with information about the scene.
        """
        return _pymaxwell5.Cmaxwell_getSceneInfo(self)


    def computeFresnelGraph(self, n, iorOutgoing):
        """
        Method:      computeFresnelGraph(int n, float iorOutgoing) -> (numpy X, numpy Y, ok)
        Description: Compute a fresnel graph.
        """
        return _pymaxwell5.Cmaxwell_computeFresnelGraph(self, n, iorOutgoing)


    def computeAbbeGraph(self, n, nd, abbe):
        """
        Method:      computeAbbeGraph(int n, float nd, real abbe) -> (numpy X, numpy Y, ok)
        Description: Compute a abbe graph.
        """
        return _pymaxwell5.Cmaxwell_computeAbbeGraph(self, n, nd, abbe)


    def getCorrelatedcolorTemperature(self, temperature):
        """Method:      getCorrelatedColorTemperature( temperature ) -> (Crgb,ok)"""
        return _pymaxwell5.Cmaxwell_getCorrelatedcolorTemperature(self, temperature)

    getSquareSwatchIES = staticmethod(_pymaxwell5.Cmaxwell_getSquareSwatchIES)
    getSolidLobeIES = staticmethod(_pymaxwell5.Cmaxwell_getSolidLobeIES)

    def generateUuid(self):
        """
        Method:      generateUuid() -> (string,ok)
        Description: Generates a free unique id, useful for storing unique identifiers in scene
                     entities using setUuid() method.
        """
        return _pymaxwell5.Cmaxwell_generateUuid(self)


    def searchFileInCommonPaths(self, fileToSearch):
        """
        Method:      searchFileInCommonPaths( filename ) -> (filenamefound,ok)
        Description: Looks for the given file in all of the searching paths of the scene,
                     returns the filename if found one, returns 0 if did not find it.
        """
        return _pymaxwell5.Cmaxwell_searchFileInCommonPaths(self, fileToSearch)


    def replaceMacrosInString(self, str):
        """
        Method:      replaceMacrosInString( str ) -> (str,ok)
        Description: Returns a string with the macros replaced. Returns 0 if the string is invalid or
                     there is not active scene.
        """
        return _pymaxwell5.Cmaxwell_replaceMacrosInString(self, str)


    def printMessage(self, text, code):
        """
        Method:      printMessage( text, code )
        Description: Prints a message in the render console or in the message handler installed
                     Can be reimplemented in subclasses to install handlers.
        Parameter:   code -> 0 = Info. 1 = Error. 2 = Warning.
        """
        return _pymaxwell5.Cmaxwell_printMessage(self, text, code)


    def createGeometryLoaderObject(self, objName, pyExtensionParams):
        """createGeometryLoaderObject(Cmaxwell self, char const * objName, PyObject * pyExtensionParams) -> CmaxwellObject"""
        return _pymaxwell5.Cmaxwell_createGeometryLoaderObject(self, objName, pyExtensionParams)


    def createGeometryProceduralObject(self, objName, pyExtensionParams):
        """createGeometryProceduralObject(Cmaxwell self, char const * objName, PyObject * pyExtensionParams) -> CmaxwellObject"""
        return _pymaxwell5.Cmaxwell_createGeometryProceduralObject(self, objName, pyExtensionParams)


    def applySkyExtension(self, pyExtensionParams):
        """applySkyExtension(Cmaxwell self, PyObject * pyExtensionParams) -> byte"""
        return _pymaxwell5.Cmaxwell_applySkyExtension(self, pyExtensionParams)


    def applySceneModifierExtension(self, pyExtensionParams):
        """applySceneModifierExtension(Cmaxwell self, PyObject * pyExtensionParams) -> byte"""
        return _pymaxwell5.Cmaxwell_applySceneModifierExtension(self, pyExtensionParams)


    def transformToMaxwell(self, *args):
        """
        Method:      transformToMaxwell( Cvector pos ) -> (Cvector,ok)
        Description: Transform to maxwell axis system using the current axis conversion set with
                     Cmaxwell.setAxisConversion().
        Method:      transformToMaxwell( CfVector pos ) -> 1 = Success, 0 = Fail
        Description: Transform to maxwell axis system using the current axis conversion set with
                     Cmaxwell.setAxisConversion().
        Method:      transformToMaxwell( Cbase base ) -> 1 = Success, 0 = Fail
        Description: Transform to maxwell axis system using the current axis conversion set with
                     Cmaxwell.setAxisConversion().
        """
        return _pymaxwell5.Cmaxwell_transformToMaxwell(self, *args)


    def transformFromMaxwell(self, *args):
        """
        Method:      transformFromMaxwell( Cbase base ) -> 1 = Success, 0 = Fail
        Description: Transform to maxwell axis system using the current axis conversion set with
                     Cmaxwell.setAxisConversion().
        Method:      transformFromMaxwell( Cbase base ) -> 1 = Success, 0 = Fail
        Description: Transform to maxwell axis system using the current axis conversion set with
                     Cmaxwell.setAxisConversion().
        Method:      transformFromMaxwell( Cbase base ) -> 1 = Success, 0 = Fail
        Description: Transform to maxwell axis system using the current axis conversion set with
                     Cmaxwell.setAxisConversion().
        """
        return _pymaxwell5.Cmaxwell_transformFromMaxwell(self, *args)


    def setTimeCode(self, hour, minute, second, frame):
        """
        Method:      setTimeCode( hour, minute, second, frame ) -> 1 = Success, 0 = Fail
        Description: Sets scene timecode.
        Parameter:   hour   -> <=0, >=23.
        Parameter:   minute -> <=0, >=59.
        Parameter:   second -> <=0, >=59.
        Parameter:   frame  -> <=0, >=59.
        """
        return _pymaxwell5.Cmaxwell_setTimeCode(self, hour, minute, second, frame)


    def getTimeCode(self):
        """
        Method:      getTimeCode() -> (hour,minute,second,frame,ok)
        Description: Gets scene timecode.
        """
        return _pymaxwell5.Cmaxwell_getTimeCode(self)


    def createCustomAlphaChannel(self, name, opaque):
        """
        Method:      createCustomAlphaChannel( name, opaque ) -> 1 = Success, 0 = Fail
        Description: Creates new custom alpha channel on the scene.
        Parameter:   name -> name of the custom alpha channel.
        Parameter:   opaque -> boolean to set opaque alpha state of the channel.
        """
        return _pymaxwell5.Cmaxwell_createCustomAlphaChannel(self, name, opaque)


    def removeCustomAlphaChannel(self, name):
        """
        Method:      removeCustomAlphaChannel( name ) -> 1 = Success, 0 = Fail
        Description: Removes custom alpha channel from the scene.
        Parameter:   name -> name of the custom alpha channel.
        """
        return _pymaxwell5.Cmaxwell_removeCustomAlphaChannel(self, name)


    def cleanCustomAlphaChannels(self):
        """
        Method:      cleanCustomAlphaChannels() -> 1 = Success, 0 = Fail
        Description: Removes all custom alpha channels from the scene.
        """
        return _pymaxwell5.Cmaxwell_cleanCustomAlphaChannels(self)


    def getNumCustomAlphaChannels(self):
        """
        Method:      getNumCustomAlphaChannels() -> (int,ok)
        Description: Gets the number of custom alpha channels in the scene.
        """
        return _pymaxwell5.Cmaxwell_getNumCustomAlphaChannels(self)


    def getCustomAlphaChannelNames(self):
        """
        Method:      getCustomAlphaChannelNames() -> (list,ok)
        Description: Gets the custom alpha channels names.
        """
        return _pymaxwell5.Cmaxwell_getCustomAlphaChannelNames(self)


    def renameCustomAlphaChannel(self, oldName, newName):
        """
        Method:      renameCustomAlphaChannel( oldName, newName ) -> 1 = Success, 0 = Fail
        Description: Renames a custom alpha channel.
        """
        return _pymaxwell5.Cmaxwell_renameCustomAlphaChannel(self, oldName, newName)


    def setCustomAlphaOpaque(self, name, opaque):
        """
        Method:      setCustomAlphaOpaque( name, opaque ) -> 1 = Success, 0 = Fail
        Description: Sets opaque state of a custom alpha channel.
        Parameter:   name -> name of the custom alpha channel.
        Parameter:   opaque -> boolean to set opaque alpha state of the channel.
        """
        return _pymaxwell5.Cmaxwell_setCustomAlphaOpaque(self, name, opaque)


    def getCustomAlphaOpaque(self, name):
        """
        Method:      getCustomAlphaOpaque( name ) (bool,ok)
        Description: Gets custom alpha channel opaque state.
        """
        return _pymaxwell5.Cmaxwell_getCustomAlphaOpaque(self, name)


    def setCustomAlphaPath(self, name, path):
        """
        Method:      setCustomAlphaPath( name, path ) -> 1 = Success, 0 = Fail
        Description: Sets path of a custom alpha channel.
        Parameter:   name -> name of the custom alpha channel.
        Parameter:   path -> path where custom alpha will be saved.
        """
        return _pymaxwell5.Cmaxwell_setCustomAlphaPath(self, name, path)


    def getCustomAlphaPath(self, name):
        """
        Method:      getCustomAlphaPath( name ) (str,ok)
        Description: Gets custom alpha channel path.
        """
        return _pymaxwell5.Cmaxwell_getCustomAlphaPath(self, name)


    def getCustomAlphaObjects(self, name):
        """
        Method:      getCustomAlphaObjects( name ) (list,ok)
        Description: Gets a list with the object names included in the custom alpha channel 'name'.
        """
        return _pymaxwell5.Cmaxwell_getCustomAlphaObjects(self, name)


    def getCustomAlphaMaterials(self, name):
        """
        Method:      getCustomAlphaMaterials( name ) (list,ok)
        Description: Gets a list with the material names included in the custom alpha channel 'name'.
        """
        return _pymaxwell5.Cmaxwell_getCustomAlphaMaterials(self, name)


    def getMetadata(self):
        """
        Method:      getMetadata() -> MXparamlist
        Description: Returns the MXS metadata
        """
        return _pymaxwell5.Cmaxwell_getMetadata(self)

    pack = staticmethod(_pymaxwell5.Cmaxwell_pack)

    def getMaterialNames(self):
        """
        Method:    getMaterialNames() -> string list
        Description: get all material names of the scene

        """
        return _pymaxwell5.Cmaxwell_getMaterialNames(self)


    def getCameraNames(self):
        """
        Method:    getCameraNames() -> string list
        Description: get all camera names of the scene

        """
        return _pymaxwell5.Cmaxwell_getCameraNames(self)


    def getObjectNames(self):
        """
        Method:    getObjectNames() -> string list
        Description: get all object names of the scene

        """
        return _pymaxwell5.Cmaxwell_getObjectNames(self)


    def setMetadata(self, params):
        """
        Method:      setMetadata() -> err
        Description: Sets the MXS metadata
        """
        return _pymaxwell5.Cmaxwell_setMetadata(self, params)

    readACO = staticmethod(_pymaxwell5.Cmaxwell_readACO)
    def __disown__(self):
        self.this.disown()
        _pymaxwell5.disown_Cmaxwell(self)
        return weakref_proxy(self)
Cmaxwell.getMxsVersion = new_instancemethod(_pymaxwell5.Cmaxwell_getMxsVersion, None, Cmaxwell)
Cmaxwell.getEngineVersionSaved = new_instancemethod(_pymaxwell5.Cmaxwell_getEngineVersionSaved, None, Cmaxwell)
Cmaxwell.getMostRecentVersionMXS = new_instancemethod(_pymaxwell5.Cmaxwell_getMostRecentVersionMXS, None, Cmaxwell)
Cmaxwell.getPluginID = new_instancemethod(_pymaxwell5.Cmaxwell_getPluginID, None, Cmaxwell)
Cmaxwell.setPluginID = new_instancemethod(_pymaxwell5.Cmaxwell_setPluginID, None, Cmaxwell)
Cmaxwell.isProtectionEnabled = new_instancemethod(_pymaxwell5.Cmaxwell_isProtectionEnabled, None, Cmaxwell)
Cmaxwell.enableProtection = new_instancemethod(_pymaxwell5.Cmaxwell_enableProtection, None, Cmaxwell)
Cmaxwell.freeGeometry = new_instancemethod(_pymaxwell5.Cmaxwell_freeGeometry, None, Cmaxwell)
Cmaxwell.freeScene = new_instancemethod(_pymaxwell5.Cmaxwell_freeScene, None, Cmaxwell)
Cmaxwell.getScenePreview = new_instancemethod(_pymaxwell5.Cmaxwell_getScenePreview, None, Cmaxwell)
Cmaxwell.setScenePreview = new_instancemethod(_pymaxwell5.Cmaxwell_setScenePreview, None, Cmaxwell)
Cmaxwell.readPreview = new_instancemethod(_pymaxwell5.Cmaxwell_readPreview, None, Cmaxwell)
Cmaxwell.setAxisConversion = new_instancemethod(_pymaxwell5.Cmaxwell_setAxisConversion, None, Cmaxwell)
Cmaxwell.getAxisConversion = new_instancemethod(_pymaxwell5.Cmaxwell_getAxisConversion, None, Cmaxwell)
Cmaxwell.setSinglePrecisionOfGeometry = new_instancemethod(_pymaxwell5.Cmaxwell_setSinglePrecisionOfGeometry, None, Cmaxwell)
Cmaxwell.setSceneUserData = new_instancemethod(_pymaxwell5.Cmaxwell_setSceneUserData, None, Cmaxwell)
Cmaxwell.getObject = new_instancemethod(_pymaxwell5.Cmaxwell_getObject, None, Cmaxwell)
Cmaxwell.createMesh = new_instancemethod(_pymaxwell5.Cmaxwell_createMesh, None, Cmaxwell)
Cmaxwell.createNullObject = new_instancemethod(_pymaxwell5.Cmaxwell_createNullObject, None, Cmaxwell)
Cmaxwell.createInstancement = new_instancemethod(_pymaxwell5.Cmaxwell_createInstancement, None, Cmaxwell)
Cmaxwell.createReferencedObject = new_instancemethod(_pymaxwell5.Cmaxwell_createReferencedObject, None, Cmaxwell)
Cmaxwell.addObject = new_instancemethod(_pymaxwell5.Cmaxwell_addObject, None, Cmaxwell)
Cmaxwell.mergeMeshes = new_instancemethod(_pymaxwell5.Cmaxwell_mergeMeshes, None, Cmaxwell)
Cmaxwell.addCamera = new_instancemethod(_pymaxwell5.Cmaxwell_addCamera, None, Cmaxwell)
Cmaxwell.getCamera = new_instancemethod(_pymaxwell5.Cmaxwell_getCamera, None, Cmaxwell)
Cmaxwell.getActiveCamera = new_instancemethod(_pymaxwell5.Cmaxwell_getActiveCamera, None, Cmaxwell)
Cmaxwell.setPath = new_instancemethod(_pymaxwell5.Cmaxwell_setPath, None, Cmaxwell)
Cmaxwell.getPath = new_instancemethod(_pymaxwell5.Cmaxwell_getPath, None, Cmaxwell)
Cmaxwell.setPaths = new_instancemethod(_pymaxwell5.Cmaxwell_setPaths, None, Cmaxwell)
Cmaxwell.addSearchingPath = new_instancemethod(_pymaxwell5.Cmaxwell_addSearchingPath, None, Cmaxwell)
Cmaxwell.getSearchingPaths = new_instancemethod(_pymaxwell5.Cmaxwell_getSearchingPaths, None, Cmaxwell)
Cmaxwell.getChannelUserSuffix = new_instancemethod(_pymaxwell5.Cmaxwell_getChannelUserSuffix, None, Cmaxwell)
Cmaxwell.setChannelUserSuffix = new_instancemethod(_pymaxwell5.Cmaxwell_setChannelUserSuffix, None, Cmaxwell)
Cmaxwell.isChannelUserSuffixEnabled = new_instancemethod(_pymaxwell5.Cmaxwell_isChannelUserSuffixEnabled, None, Cmaxwell)
Cmaxwell.enableChannelUserSuffix = new_instancemethod(_pymaxwell5.Cmaxwell_enableChannelUserSuffix, None, Cmaxwell)
Cmaxwell.getChannelSuffixActive = new_instancemethod(_pymaxwell5.Cmaxwell_getChannelSuffixActive, None, Cmaxwell)
Cmaxwell.getEnvironment = new_instancemethod(_pymaxwell5.Cmaxwell_getEnvironment, None, Cmaxwell)
Cmaxwell.readMaterial = new_instancemethod(_pymaxwell5.Cmaxwell_readMaterial, None, Cmaxwell)
Cmaxwell.createMaterial = new_instancemethod(_pymaxwell5.Cmaxwell_createMaterial, None, Cmaxwell)
Cmaxwell.getMaterial = new_instancemethod(_pymaxwell5.Cmaxwell_getMaterial, None, Cmaxwell)
Cmaxwell.addMaterial = new_instancemethod(_pymaxwell5.Cmaxwell_addMaterial, None, Cmaxwell)
Cmaxwell.eraseUnusedMaterials = new_instancemethod(_pymaxwell5.Cmaxwell_eraseUnusedMaterials, None, Cmaxwell)
Cmaxwell.getOverrideMaterial = new_instancemethod(_pymaxwell5.Cmaxwell_getOverrideMaterial, None, Cmaxwell)
Cmaxwell.getOverrideMaterialEnabled = new_instancemethod(_pymaxwell5.Cmaxwell_getOverrideMaterialEnabled, None, Cmaxwell)
Cmaxwell.setOverrideMaterial = new_instancemethod(_pymaxwell5.Cmaxwell_setOverrideMaterial, None, Cmaxwell)
Cmaxwell.setShadowedMaterial = new_instancemethod(_pymaxwell5.Cmaxwell_setShadowedMaterial, None, Cmaxwell)
Cmaxwell.getDefaultMaterial = new_instancemethod(_pymaxwell5.Cmaxwell_getDefaultMaterial, None, Cmaxwell)
Cmaxwell.getDefaultMaterialEnabled = new_instancemethod(_pymaxwell5.Cmaxwell_getDefaultMaterialEnabled, None, Cmaxwell)
Cmaxwell.setDefaultMaterial = new_instancemethod(_pymaxwell5.Cmaxwell_setDefaultMaterial, None, Cmaxwell)
Cmaxwell.enableChannel = new_instancemethod(_pymaxwell5.Cmaxwell_enableChannel, None, Cmaxwell)
Cmaxwell.isChannelEnabled = new_instancemethod(_pymaxwell5.Cmaxwell_isChannelEnabled, None, Cmaxwell)
Cmaxwell.getRenderParameter = new_instancemethod(_pymaxwell5.Cmaxwell_getRenderParameter, None, Cmaxwell)
Cmaxwell.setRenderParameter = new_instancemethod(_pymaxwell5.Cmaxwell_setRenderParameter, None, Cmaxwell)
Cmaxwell.getToneMapping = new_instancemethod(_pymaxwell5.Cmaxwell_getToneMapping, None, Cmaxwell)
Cmaxwell.setToneMapping = new_instancemethod(_pymaxwell5.Cmaxwell_setToneMapping, None, Cmaxwell)
Cmaxwell.getActiveToneMapping = new_instancemethod(_pymaxwell5.Cmaxwell_getActiveToneMapping, None, Cmaxwell)
Cmaxwell.setMxsPath = new_instancemethod(_pymaxwell5.Cmaxwell_setMxsPath, None, Cmaxwell)
Cmaxwell.getMxsPath = new_instancemethod(_pymaxwell5.Cmaxwell_getMxsPath, None, Cmaxwell)
Cmaxwell.readMXS = new_instancemethod(_pymaxwell5.Cmaxwell_readMXS, None, Cmaxwell)
Cmaxwell.readMXS_u = new_instancemethod(_pymaxwell5.Cmaxwell_readMXS_u, None, Cmaxwell)
Cmaxwell.writeMXS = new_instancemethod(_pymaxwell5.Cmaxwell_writeMXS, None, Cmaxwell)
Cmaxwell.writeOBJ = new_instancemethod(_pymaxwell5.Cmaxwell_writeOBJ, None, Cmaxwell)
Cmaxwell.getDiffraction = new_instancemethod(_pymaxwell5.Cmaxwell_getDiffraction, None, Cmaxwell)
Cmaxwell.setDiffraction = new_instancemethod(_pymaxwell5.Cmaxwell_setDiffraction, None, Cmaxwell)
Cmaxwell.enableDiffraction = new_instancemethod(_pymaxwell5.Cmaxwell_enableDiffraction, None, Cmaxwell)
Cmaxwell.disableDiffraction = new_instancemethod(_pymaxwell5.Cmaxwell_disableDiffraction, None, Cmaxwell)
Cmaxwell.isInteractiveModeEnabled = new_instancemethod(_pymaxwell5.Cmaxwell_isInteractiveModeEnabled, None, Cmaxwell)
Cmaxwell.isInteractiveFlagEnabled = new_instancemethod(_pymaxwell5.Cmaxwell_isInteractiveFlagEnabled, None, Cmaxwell)
Cmaxwell.setInteractiveFlagDirty = new_instancemethod(_pymaxwell5.Cmaxwell_setInteractiveFlagDirty, None, Cmaxwell)
Cmaxwell.getLastError = new_instancemethod(_pymaxwell5.Cmaxwell_getLastError, None, Cmaxwell)
Cmaxwell.getLastErrorString = new_instancemethod(_pymaxwell5.Cmaxwell_getLastErrorString, None, Cmaxwell)
Cmaxwell.getDependencies = new_instancemethod(_pymaxwell5.Cmaxwell_getDependencies, None, Cmaxwell)
Cmaxwell.getOverlayTextOptions = new_instancemethod(_pymaxwell5.Cmaxwell_getOverlayTextOptions, None, Cmaxwell)
Cmaxwell.setOverlayTextOptions = new_instancemethod(_pymaxwell5.Cmaxwell_setOverlayTextOptions, None, Cmaxwell)
Cmaxwell.getObjectsCount = new_instancemethod(_pymaxwell5.Cmaxwell_getObjectsCount, None, Cmaxwell)
Cmaxwell.getMaterialsCount = new_instancemethod(_pymaxwell5.Cmaxwell_getMaterialsCount, None, Cmaxwell)
Cmaxwell.getCamerasCount = new_instancemethod(_pymaxwell5.Cmaxwell_getCamerasCount, None, Cmaxwell)
Cmaxwell.getSceneInfo = new_instancemethod(_pymaxwell5.Cmaxwell_getSceneInfo, None, Cmaxwell)
Cmaxwell.computeFresnelGraph = new_instancemethod(_pymaxwell5.Cmaxwell_computeFresnelGraph, None, Cmaxwell)
Cmaxwell.computeAbbeGraph = new_instancemethod(_pymaxwell5.Cmaxwell_computeAbbeGraph, None, Cmaxwell)
Cmaxwell.getCorrelatedcolorTemperature = new_instancemethod(_pymaxwell5.Cmaxwell_getCorrelatedcolorTemperature, None, Cmaxwell)
Cmaxwell.generateUuid = new_instancemethod(_pymaxwell5.Cmaxwell_generateUuid, None, Cmaxwell)
Cmaxwell.searchFileInCommonPaths = new_instancemethod(_pymaxwell5.Cmaxwell_searchFileInCommonPaths, None, Cmaxwell)
Cmaxwell.replaceMacrosInString = new_instancemethod(_pymaxwell5.Cmaxwell_replaceMacrosInString, None, Cmaxwell)
Cmaxwell.printMessage = new_instancemethod(_pymaxwell5.Cmaxwell_printMessage, None, Cmaxwell)
Cmaxwell.createGeometryLoaderObject = new_instancemethod(_pymaxwell5.Cmaxwell_createGeometryLoaderObject, None, Cmaxwell)
Cmaxwell.createGeometryProceduralObject = new_instancemethod(_pymaxwell5.Cmaxwell_createGeometryProceduralObject, None, Cmaxwell)
Cmaxwell.applySkyExtension = new_instancemethod(_pymaxwell5.Cmaxwell_applySkyExtension, None, Cmaxwell)
Cmaxwell.applySceneModifierExtension = new_instancemethod(_pymaxwell5.Cmaxwell_applySceneModifierExtension, None, Cmaxwell)
Cmaxwell.transformToMaxwell = new_instancemethod(_pymaxwell5.Cmaxwell_transformToMaxwell, None, Cmaxwell)
Cmaxwell.transformFromMaxwell = new_instancemethod(_pymaxwell5.Cmaxwell_transformFromMaxwell, None, Cmaxwell)
Cmaxwell.setTimeCode = new_instancemethod(_pymaxwell5.Cmaxwell_setTimeCode, None, Cmaxwell)
Cmaxwell.getTimeCode = new_instancemethod(_pymaxwell5.Cmaxwell_getTimeCode, None, Cmaxwell)
Cmaxwell.createCustomAlphaChannel = new_instancemethod(_pymaxwell5.Cmaxwell_createCustomAlphaChannel, None, Cmaxwell)
Cmaxwell.removeCustomAlphaChannel = new_instancemethod(_pymaxwell5.Cmaxwell_removeCustomAlphaChannel, None, Cmaxwell)
Cmaxwell.cleanCustomAlphaChannels = new_instancemethod(_pymaxwell5.Cmaxwell_cleanCustomAlphaChannels, None, Cmaxwell)
Cmaxwell.getNumCustomAlphaChannels = new_instancemethod(_pymaxwell5.Cmaxwell_getNumCustomAlphaChannels, None, Cmaxwell)
Cmaxwell.getCustomAlphaChannelNames = new_instancemethod(_pymaxwell5.Cmaxwell_getCustomAlphaChannelNames, None, Cmaxwell)
Cmaxwell.renameCustomAlphaChannel = new_instancemethod(_pymaxwell5.Cmaxwell_renameCustomAlphaChannel, None, Cmaxwell)
Cmaxwell.setCustomAlphaOpaque = new_instancemethod(_pymaxwell5.Cmaxwell_setCustomAlphaOpaque, None, Cmaxwell)
Cmaxwell.getCustomAlphaOpaque = new_instancemethod(_pymaxwell5.Cmaxwell_getCustomAlphaOpaque, None, Cmaxwell)
Cmaxwell.setCustomAlphaPath = new_instancemethod(_pymaxwell5.Cmaxwell_setCustomAlphaPath, None, Cmaxwell)
Cmaxwell.getCustomAlphaPath = new_instancemethod(_pymaxwell5.Cmaxwell_getCustomAlphaPath, None, Cmaxwell)
Cmaxwell.getCustomAlphaObjects = new_instancemethod(_pymaxwell5.Cmaxwell_getCustomAlphaObjects, None, Cmaxwell)
Cmaxwell.getCustomAlphaMaterials = new_instancemethod(_pymaxwell5.Cmaxwell_getCustomAlphaMaterials, None, Cmaxwell)
Cmaxwell.getMetadata = new_instancemethod(_pymaxwell5.Cmaxwell_getMetadata, None, Cmaxwell)
Cmaxwell.getMaterialNames = new_instancemethod(_pymaxwell5.Cmaxwell_getMaterialNames, None, Cmaxwell)
Cmaxwell.getCameraNames = new_instancemethod(_pymaxwell5.Cmaxwell_getCameraNames, None, Cmaxwell)
Cmaxwell.getObjectNames = new_instancemethod(_pymaxwell5.Cmaxwell_getObjectNames, None, Cmaxwell)
Cmaxwell.setMetadata = new_instancemethod(_pymaxwell5.Cmaxwell_setMetadata, None, Cmaxwell)
Cmaxwell_swigregister = _pymaxwell5.Cmaxwell_swigregister
Cmaxwell_swigregister(Cmaxwell)

def Cmaxwell_getEngineVersion():
    """
    Method:      getEngineVersion() -> string
    Description : Returns the current version of Maxwell.
    """
    return _pymaxwell5.Cmaxwell_getEngineVersion()

def Cmaxwell_getSdkVersionString():
    """
    Method:      getSdkVersionString() -> string
    Description : Returns the current version of the Maxwell SDK.
    """
    return _pymaxwell5.Cmaxwell_getSdkVersionString()

def Cmaxwell_getSdkVersion():
    """
    Method:      getSdkVersion() -> int
    Description : Returns the current version of the Maxwell SDK.
    """
    return _pymaxwell5.Cmaxwell_getSdkVersion()

def Cmaxwell_isDepthSupportedForThisFormat(extension, bitDepth):
    """
    Method:      isDepthSupportedForThisFormat( extension, depth ) -> bool
    Description: Returns true if for the given extension the depth is valid
                 isDepthSupportedForThisFormat( 'exr' 32 ) returns true
                 isDepthSupportedForThisFormat( 'jpg' 16 ) returns false
    """
    return _pymaxwell5.Cmaxwell_isDepthSupportedForThisFormat(extension, bitDepth)

def Cmaxwell_getHighestDepthSupportedForThisFormat(extension):
    """
    Method:      getHighestDepthSupportedForThisFormat( extension ) -> int
    Description: Returns the highest bits per plane supported for the given format
                 getHighestDepthSupportedForThisFormat( 'exr' ) returns 32
                 getHighestDepthSupportedForThisFormat( 'jpg' ) returns 8
    """
    return _pymaxwell5.Cmaxwell_getHighestDepthSupportedForThisFormat(extension)

def Cmaxwell_isEmbeddingAlphaSupportedForThisFormat(extension):
    """
    Method:      isEmbeddingAlphaSupportedForThisFormat( extension ) -> bool
    Description: Returns true if for the given format it is possible embedding the alpha
                 channel. isEmbeddingAlphaSupportedForThisFormat( 'tga' ) returns true,
                 isEmbeddingAlphaSupportedForThisFormat( 'jpg' ) returns false
    """
    return _pymaxwell5.Cmaxwell_isEmbeddingAlphaSupportedForThisFormat(extension)

def Cmaxwell_isEmbeddingAllChannelsSupportedForThisFormat(extension):
    """
    Method:      isEmbeddingAllChannelsSupportedForThisFormat( extension ) -> bool
    Description: Returns true if for the given format it is possible embedding
                 all channels in a multilayer file.
                 isEmbeddingAllChannelsSupportedForThisFormat( 'tif' ) returns true
                 isEmbeddingAllChannelsSupportedForThisFormat( 'exr' ) returns true
    """
    return _pymaxwell5.Cmaxwell_isEmbeddingAllChannelsSupportedForThisFormat(extension)

def Cmaxwell_isTextureExtensionSupported(pExtension):
    """
    Method:      isTextureExtensionSupported( extension ) -> bool
    Description: Returns true if the extension of the given texture path
                 is supported by the render engine

    """
    return _pymaxwell5.Cmaxwell_isTextureExtensionSupported(pExtension)

def Cmaxwell_getColorSpace():
    """
    Method: getColorSpace() -> int
    Description: Gets the output color space used by the render engine.
    Parameter:   type -> possible values:
                 0 = COLOR_SPACE_SRGB ( D65 ) - CIE REC 709, default
                 1 = COLOR_SPACE_ADOBE98 ( D65 )
                 2 = COLOR_SPACE_APPLE ( D65 )
                 3 = COLOR_SPACE_PAL ( D65 )
                 4 = COLOR_SPACE_NTSC ( C )
                 5 = COLOR_SPACE_NTSC1979
                 6 = COLOR_SPACE_WIDEGAMUT
                 7 = COLOR_SPACE_PROPHOTO
                 8 = COLOR_SPACE_ECIRRGB
                 9 = COLOR_SPACE_CIE1931
                 10 = COLOR_SPACE_BRUCERGB
                 11 = COLOR_SPACE_COLORMATCH
                 12 = COLOR_SPACE_BESTRGB
                 13 = COLOR_SPACE_DONRGB4
                 14 = COLOR_SPACE_REC709
                 15 = COLOR_SPACE_ACES
                 0xFFFF = COLOR_SPACE_UNKNOWN
    """
    return _pymaxwell5.Cmaxwell_getColorSpace()

def Cmaxwell_setColorSpace(type):
    """
    Method: setColorSpace( type ) -> 1 = Success, 0 = Fail
    Description: Sets the output color space used by the render engine.
    Parameter:   type -> possible values:
                 0 = COLOR_SPACE_SRGB ( D65 ) - CIE REC 709, default
                 1 = COLOR_SPACE_ADOBE98 ( D65 )
                 2 = COLOR_SPACE_APPLE ( D65 )
                 3 = COLOR_SPACE_PAL ( D65 )
                 4 = COLOR_SPACE_NTSC ( C )
                 5 = COLOR_SPACE_NTSC1979
                 6 = COLOR_SPACE_WIDEGAMUT
                 7 = COLOR_SPACE_PROPHOTO
                 8 = COLOR_SPACE_ECIRRGB
                 9 = COLOR_SPACE_CIE1931
                 10 = COLOR_SPACE_BRUCERGB
                 11 = COLOR_SPACE_COLORMATCH
                 12 = COLOR_SPACE_BESTRGB
                 13 = COLOR_SPACE_DONRGB4
                 0xFF = COLOR_SPACE_UNKNOWN
    """
    return _pymaxwell5.Cmaxwell_setColorSpace(type)

def Cmaxwell_getColorSpaceGamma():
    """
    Method:      getColorSpaceGamma() -> gamma
    Description: Returns the gamma used by the active color space.
    """
    return _pymaxwell5.Cmaxwell_getColorSpaceGamma()

def Cmaxwell_getWhitePoint():
    """
    Method:      getWhitePoint() -> (temperature,tint,ok)
    Description: Gets the white point temperature (in Kelvin) and tint (-100,100) used by the
                 render engine.
    Parameter:   temperature. kelvin, default = 6500.0
    Parameter:   tint in (-100,100) normalized coordinates, default = 0.0
    """
    return _pymaxwell5.Cmaxwell_getWhitePoint()

def Cmaxwell_setWhitePoint(temperature, tint):
    """
    Method:      setWhitePoint() -> (temperature,tint,ok)
    Description: Sets the white point temperature (in Kelvin) and tint (-100,100) used by the
                 render engine.
    Parameter:   temperature. kelvin, default = 6500.0
    Parameter:   tint in (-100,100) normalized coordinates, default = 0.0
    """
    return _pymaxwell5.Cmaxwell_setWhitePoint(temperature, tint)

def Cmaxwell_getSquareSwatchIES(file, resolution):
    """
    Method:      getSquareSwatchIES( filename, resolution ) (list (3-tuple),ok)
    Description: Used to get the IES/EULUM emission pattern plotted into a square rgb buffer
                 of size 'resolution'.
    """
    return _pymaxwell5.Cmaxwell_getSquareSwatchIES(file, resolution)

def Cmaxwell_getSolidLobeIES(fileName, pAxisSystem=None):
    """
    Method:      getSolidLobeIES( filename, axisSystem ) -> (int numPoints, list points,
                                                             int numTriangles, list faces, ok)
    Description: Used to get the IES/EULUM emission pattern plotted as a 3d object.
    Parameter:   faces, 0-based indices into points array : v00, v01, v02, v10, v11, v12, ......
    Parameter:   points, array of vertices, x0, y0, z0, x1, y1, z1, .....
    Parameter:   axisSystem, same as setInputDataType (type 'help(Cmaxwell.setInputDataType)'.
    Method:      getSolidLobeIES( filename, axisSystem ) -> (int numPoints, list points,
                                                             int numTriangles, list faces, ok)
    Description: Used to get the IES/EULUM emission pattern plotted as a 3d object.
    Parameter:   faces, 0-based indices into points array : v00, v01, v02, v10, v11, v12, ......
    Parameter:   points, array of vertices, x0, y0, z0, x1, y1, z1, .....
    Parameter:   axisSystem, same as setInputDataType (type 'help(Cmaxwell.setInputDataType)'.
    """
    return _pymaxwell5.Cmaxwell_getSolidLobeIES(fileName, pAxisSystem)

def Cmaxwell_pack(*args):
    """
    Method:      getMetadata() -> MXparamlist
    Description: Returns the MXS metadata
    Method:      getMetadata() -> MXparamlist
    Description: Returns the MXS metadata
    """
    return _pymaxwell5.Cmaxwell_pack(*args)

def Cmaxwell_readACO(filename):
    """
    Function:    readACO(filename) -> (Crgb16[], string[])
    Description: Reads an Adobe Color (.aco) file containing a set of color swatches.
                 Supports RGB, CMYK and Greyscale colors, but CMYK and Grayscale may
                 not be accurate. Better export all swatches in RGB using the script
                 provided with the Maxwell Render plug-in for Photoshop:
                   SaveSwatchesRGB.jsx
                 http://www.maxwellrender.com/index.php/products/maxwell_render_suite/plugins/#/ps
    """
    return _pymaxwell5.Cmaxwell_readACO(filename)



